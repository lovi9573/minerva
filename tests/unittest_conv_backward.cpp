#include "unittest_main.h"
#include <common/fixedpoint.h>

#include <time.h>
#include <sys/time.h>
#include <stdlib.h>

double get_wall_time(){
    struct timeval time;
    if (gettimeofday(&time,NULL)){
        //  Handle error
        return 0;
    }
    return (double)time.tv_sec + (double)time.tv_usec * .000001;
}

using namespace std;
using namespace minerva;

#ifdef HAS_CUDA

/*
 * Backward Data
 */

TEST(ConvBackwardData, GpuWithoutPaddingSmall) {
  element_t top_diff_raw[] = {8,6,4,2};
  element_t weight_raw[] = {1,2,3,4};
  element_t correct_raw[] = {32,48,18,32,40,12,8,8,2};
  Scale top_size{2, 2, 1, 1};
  Scale weight_size{2, 2, 1, 1};
  Scale correct_size{3, 3, 1, 1};
  auto& ms = MinervaSystem::Instance();
  shared_ptr<element_t> input_ptr(new element_t[top_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), top_diff_raw, top_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));
  ms.SetDevice(cpu_device);
  ImageBatch input = NArray::MakeNArray(top_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  NArray bottom = NArray::Zeros(correct_size);
  ConvInfo conv_info(0, 0, 1, 1);
  ms.SetDevice(gpu_device);
  ImageBatch output = Convolution::ConvBackwardData(input, bottom, weight, conv_info);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
  }
}


TEST(ConvBackwardData, GpuWithoutPaddingLargeTime) {

  Scale top_size{246, 246, 2, 10};
  Scale weight_size{11, 11, 3, 2};
  Scale correct_size{256, 256, 3, 10};
  auto& ms = MinervaSystem::Instance();
  ms.SetDevice(cpu_device);
  element_t top_diff_raw[top_size.Prod()] ;
  element_t weight_raw[weight_size.Prod()];
  //element_t correct_raw[correct_size.Prod()];
  shared_ptr<element_t> input_ptr(new element_t[top_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> correct_ptr(new element_t[correct_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  for(int i  = 0; i <top_size.Prod(); i++){
	  top_diff_raw[i] = rand();
  }
  for(int i  = 0; i <weight_size.Prod(); i++){
	  weight_raw[i] = rand();
  }
  for(int i  = 0; i <correct_size.Prod(); i++){
	  correct_ptr.get()[i] = rand();
  }

  memcpy(input_ptr.get(), top_diff_raw, top_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));
  //memcpy(correct_ptr.get(), correct_raw, correct_size.Prod() * sizeof(element_t));
    ImageBatch top = NArray::MakeNArray(top_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  NArray bottom = NArray::MakeNArray(correct_size, correct_ptr);
  ConvInfo conv_info(0, 0, 1, 1);
  ms.SetDevice(gpu_device);
  double start = get_wall_time();
  ImageBatch output = Convolution::ConvBackwardData(top, bottom, weight, conv_info);
  ms.WaitForAll();
  std::cout << "ConvBackwardData Time: " << (get_wall_time() - start) << "\n";
}

TEST(ConvBackwardData, GpuWithoutPaddingSmallDepth2) {
  element_t input_raw[] = {1,2,3,4,5,6,7,8};
  element_t weight_raw[] = {11,12,13,14,15,16,17,18};
  element_t correct_raw[] = {14.000000,41.000000,26.000000,54.000000,130.000000,74.000000,36.000000,81.000000,44.000000,18.000000,53.000000,34.000000,70.000000,170.000000,98.000000,48.000000,109.000000,60.000000};
  auto& ms = MinervaSystem::Instance();
  Scale input_size{2, 2, 1, 1};
  Scale weight_size{2, 2, 2, 1};
  Scale correct_size{3, 3, 2, 1};
  shared_ptr<element_t> input_ptr(new element_t[input_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), input_raw, input_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));

  ms.SetDevice(cpu_device);
  ImageBatch top = NArray::MakeNArray(input_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  NArray bottom = NArray::Zeros(correct_size);
  ConvInfo conv_info(0, 0, 1, 1);
  ms.SetDevice(gpu_device);
  ImageBatch output = Convolution::ConvBackwardData(top, bottom, weight, conv_info);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
	//printf("%f,",output_ptr.get()[i]);
  }
}


TEST(ConvBackwardData, GpuWithPaddingSmall) {
  element_t input_raw[] = {1,2,3,4,5,6,7,8,9};
  element_t weight_raw[] = {10,2,3,5};
  element_t correct_raw[] = {25.000000,15.000000,10.000000,50.000000};
  auto& ms = MinervaSystem::Instance();
  Scale input_size{3, 3, 1, 1};
  Scale weight_size{2, 2, 1, 1};
  Scale correct_size{2, 2, 1, 1};
  shared_ptr<element_t> input_ptr(new element_t[input_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), input_raw, input_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));

  ms.SetDevice(cpu_device);
  ImageBatch top = NArray::MakeNArray(input_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  NArray bottom = NArray::Zeros(correct_size);
  ConvInfo conv_info(2, 2, 2, 2);
  ms.SetDevice(gpu_device);
  ImageBatch output = Convolution::ConvBackwardData(top, bottom, weight, conv_info);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
	//printf("%f,",output_ptr.get()[i]);
  }
}


TEST(ConvBackwardData, GpuWithoutPaddingFrac) {
  element_t input_raw[] = {8.59232186e-01, -3.67248891e-01, -6.32162377e-01, -5.90879443e-01, 1.35450058e-01, 1.91089406e-01, 9.29029039e-01, 3.06354194e-01, 4.97813275e-01, 3.07139742e-01, 4.95429619e-01, 9.22613472e-01, -9.83223404e-01, -7.87111247e-01, -4.02592572e-01, 3.12822366e-01, 6.19625105e-01, 7.44351827e-01, 9.29295195e-01, 4.47370694e-01, 2.84950656e-01, 4.34907242e-01, -6.48019856e-02, -3.48830645e-01, -1.20710788e-01, 4.59378165e-01, 9.88029172e-01, 3.53747424e-01, 5.81645036e-01, -6.58171484e-01, -9.46301448e-01, 6.00740488e-01, 8.07445076e-01, -9.50647579e-01, -1.65053631e-02, 5.25103347e-02, 1.92732021e-01, -8.96084910e-01, 7.90179056e-01, 4.56532361e-01, 6.36700023e-01, 4.45505669e-04, 6.20378818e-01, -8.08062949e-01, -5.62099913e-01, -4.82561877e-01, -6.37884921e-02, -8.12535948e-02, 4.19019560e-01, -6.43893988e-01, 6.28997687e-02, -6.64515542e-01, 5.37627837e-01, 8.56341098e-01, 2.18987316e-01, -6.99633011e-01, -2.07465926e-02, -2.45310092e-01, 6.97202824e-01, 8.22194457e-01, -2.32302558e-01, -3.69008193e-01, 1.36788306e-01, -6.24363930e-01, -7.48316912e-01, 3.75191610e-01, 5.99213436e-01, 1.47073130e-01, 9.46459963e-01, 2.68108754e-01, 7.76843450e-01, -9.17048249e-03, -2.96766940e-01, 4.28460737e-01, 7.85823290e-03, -5.48724787e-01, -5.10051120e-01, 5.85601400e-01, -9.65517098e-03, 8.30187347e-01, 8.90743668e-01, 6.64644593e-02, -4.95014811e-01, 4.41724116e-01, -2.65122472e-01, -2.70311418e-03, -5.46849905e-01, -2.92868707e-01, 3.01703573e-01, -3.74134209e-01, 5.37470894e-01, 5.63674207e-01, 7.04818966e-01, 8.99811480e-01, -7.85354176e-01, 8.21450712e-01, -3.27889676e-01, 6.52760854e-01, 7.96201270e-01, -9.14569391e-01, -6.08410002e-01, -4.10997356e-01, 2.53999761e-01, -8.27553790e-01, -7.14109960e-01, 3.16530385e-02, 3.78682659e-01, 7.13251622e-01, 2.94723367e-01, 1.63237351e-01, 4.22231910e-01, -4.95166286e-01, 8.00319367e-01, -1.15412614e-01, -9.58958351e-01, 9.19322028e-01, 3.04450845e-01, 2.64125002e-02, 3.64712766e-01, -2.09192187e-02, 8.52980343e-01, 3.17595443e-02, -8.55680237e-01, 1.35016596e-01, 2.30486367e-01, 8.83092589e-01, -1.69273291e-01, -4.71120051e-01, -8.05213669e-01, -2.83115562e-02, -7.06742743e-02, -9.40481366e-01, 3.88554924e-01, 4.33894225e-01, 4.59622847e-01, -1.71297966e-01, -9.69802310e-01, 8.17950315e-01, 5.78757436e-01, -6.69601662e-01, -3.74428077e-01, 2.21890612e-01, -2.71019427e-01, -6.87922822e-01, -6.45392373e-01, 7.35779342e-01, -4.19810663e-01, 1.70359243e-01, -9.20102482e-02, -1.77643736e-01, 7.65268890e-01, 3.85416030e-01, -4.41453290e-01, -8.71119538e-01, -6.02752772e-01, 8.63365489e-01, 7.08827136e-01, 9.09469469e-01, -8.95493304e-01, 1.58943361e-01, -3.90074667e-02, -9.56582042e-01, -2.52759073e-01, -1.71816398e-01, 2.07814468e-01, 3.43497455e-01, 6.77731401e-01, 5.59052417e-01, -1.98597912e-01, 5.89058463e-01, 7.86248621e-01, -4.75020618e-01, 9.78394015e-01, 7.06614198e-01, 4.62954312e-01, -2.88868751e-01, 7.66578981e-01, 7.35918182e-01, 9.11532892e-01, -9.99785487e-01, -9.66917916e-01, -3.71859885e-01, 9.90632349e-01, -7.02311554e-01, -6.65245763e-01, 5.17144074e-01, -8.60940668e-01, 4.10946877e-01, -6.16694364e-02, -9.79623568e-01, 5.49647726e-01, 5.88402017e-01, -7.00861097e-01, -9.52592736e-01, 5.24127542e-01, -5.52659640e-01, -4.75651204e-01, -8.62609944e-02, -5.00146163e-01, 1.36567123e-01, 6.93885994e-01, -2.43800926e-01, -1.35069767e-01, 6.65238353e-01, -2.57736129e-01, -9.18893456e-01, 1.09342972e-01, -9.75075144e-02, 4.50601953e-01, -2.43098955e-01, 6.81324991e-01, -6.13706128e-02, 1.25286858e-01, 3.22398678e-01, -7.55162650e-02, 2.47273891e-01, -5.56238738e-01, 4.65726234e-01, -2.36635823e-01, -6.10330916e-01, -4.57674450e-01, -5.01549896e-01, -6.95721875e-01, 5.42747408e-01, -4.89176535e-01, -7.44913190e-01, 3.30334307e-01, -1.74390103e-01, 3.35535533e-01, 3.19627034e-01, -3.89244656e-01, -5.97551518e-01, -5.55945747e-01, -7.60058273e-01, -9.25709118e-01, -9.31736833e-01, -5.39006904e-01, -5.43292587e-01, 2.49821244e-01, 7.85122371e-01, 5.59456032e-01, 4.42902537e-01, -3.79115682e-01, -2.73833167e-01, -6.07836432e-01, 8.70983596e-01, 1.23468000e-01, 6.34583074e-01, -3.02172038e-01, 5.99428526e-01, -7.91791075e-01, 4.24240330e-01, 8.34896992e-01, 6.07170737e-01, -3.45773707e-01, -4.89785641e-01, -9.99565129e-03, -1.72778091e-01, -1.50125809e-01, -8.51243390e-01, 2.06781303e-01, 4.94399467e-01, 5.95152453e-01, -2.36998955e-01, 5.94316306e-01, -5.64052608e-02, 4.42798342e-01, -6.21574621e-01, -1.30808581e-01, 6.46936218e-01, 6.52545256e-01, -6.20949033e-01, -9.59795660e-01, 4.06982772e-01, -3.05459761e-01, -1.60992368e-01, 5.36177806e-01, 9.25756133e-01, 7.85130614e-01, -7.30115467e-01, 5.95609430e-01, 3.64181215e-01, 6.01057742e-02, 7.31963310e-01, 5.06496191e-01, -8.13594826e-01, -3.41121136e-01, -1.75274609e-01};

  element_t weight_raw[] = {-2.99421235e+00, 5.85381379e-01, 1.09536925e+00, -8.02315431e-01, -6.21006855e-01, -1.47845127e-01, 4.86479403e-01, -2.17717723e+00, 2.99648504e+00, 4.39632527e-02, -4.15997727e-02, -1.87875147e+00, -1.22347191e+00, 1.79109036e+00, -1.23133024e+00, 1.18272956e+00, -1.36224463e+00, 2.47517071e+00, -1.20876460e+00, 2.33915863e+00, 2.68033376e+00, -1.98652306e+00, -8.44251566e-01, 1.09306382e+00, 2.52835182e+00, -2.13045394e+00, -2.40075369e+00, -5.30383341e-01, 2.85075222e+00, -2.75096075e+00, -1.87851423e+00, 6.52607928e-01, -2.47668771e+00, -1.10227108e+00, 6.60814659e-01, -1.79283172e+00, 1.15138630e+00, -1.53223817e+00, 1.08223018e+00, -8.43736265e-02, -1.43703113e+00, -1.30355808e+00, 2.43270972e+00, -1.34494388e+00, 2.04688826e+00, -1.82145375e+00, -1.01649942e+00, 2.67977931e+00, 3.64310972e-02, -5.79504850e-01, -2.83763077e+00, 7.30642137e-01, -9.15908959e-01, -1.33920463e+00, -2.61567136e+00, -9.93656887e-01, -2.59374035e+00, -2.97705451e+00, -2.75419318e+00, -9.06270806e-01, -2.44827413e+00, 1.21894359e-01, -1.70550112e+00, 2.94999927e+00, -1.39687703e+00, 1.08100832e+00, 1.57476715e-01, -3.60461582e-01, 9.69331474e-01, -2.19128895e+00, 1.72709403e+00, -2.17213379e+00, 7.97539786e-01, -1.71800785e+00, -2.85974811e+00, 7.61603840e-01, 8.52982359e-01, 8.52620021e-01, 2.18772540e+00, -9.76791579e-01, -5.34249680e-01, 6.61912103e-01, 2.64505914e+00, -2.08753638e+00, -1.89565196e+00, -2.07337027e+00, 1.27694596e+00, 2.56789897e+00, -4.63876920e-01, 2.71063582e-01, -1.06566621e+00, -2.03577190e+00, 1.21891215e+00, 1.38149044e+00, 2.76242723e+00, -7.77056575e-01, 1.30019035e+00, 2.91636731e+00, -2.33539465e+00, 1.54937129e+00, -2.05467527e+00, 1.89861153e+00, 3.24639277e-01, 4.90261325e-01, 2.61687350e+00, -3.93913469e-01, -6.52368818e-02, 9.96782801e-01, 7.80924006e-01, -2.21877150e+00, -8.76936173e-01, 8.10740308e-01, 2.51373517e+00, -2.45239968e+00, -2.57350725e+00, -5.17730183e-01, -1.70615298e+00, 1.18191789e-01, 3.51084133e-01, -1.57799016e-01, -1.70476727e+00, -1.56336669e+00, -1.69957048e+00, 9.34142269e-01, 2.07836070e+00, 2.58278636e+00, 1.80183310e+00, 1.08435507e+00, -1.75645825e+00, 1.44995835e+00, 1.18142751e+00, -7.09443154e-01, 2.10071475e+00, 1.68667087e-01, 2.35805441e+00, 1.92335625e+00, -1.62852828e+00, 1.92374382e+00, -2.16863145e+00, -1.05195029e-01, -2.10713666e+00, -3.10235670e-01, 9.95738834e-01, 1.73419455e+00, 9.72124549e-01, 1.26907457e+00, 2.32754197e+00, -2.14994825e+00, -2.11457926e+00, -1.04441494e+00, -2.80875702e+00, 1.12657737e+00, 1.58838027e+00, -8.99943488e-01, 6.96045664e-01, 2.75099915e+00, -1.25368430e+00, 1.12007078e+00, -2.74663062e+00, -2.62497821e+00, 1.88639217e+00, -3.80289825e-01, -6.47589408e-01, -1.01611392e+00, -2.54047030e-01, 2.01211291e+00, -1.99386743e-01, -4.72284073e-01, 4.25109318e-01, 1.43433574e+00, -2.66949955e+00, 7.45083894e-01, 7.26361966e-01, -2.99333681e+00, 6.17361038e-01, -2.75888753e+00, 5.14502201e-01, -3.09723452e-01, -8.77618394e-01, 2.60115141e+00, -1.39646441e+00, -1.31220372e+00, 2.94357819e-02, 8.80836712e-01, 2.82344057e+00, -2.78474712e+00, -4.60800803e-01, 5.29872532e-01, 1.39021370e+00, -1.94693356e+00, 6.32327077e-02, 1.70757504e-03, 2.35660579e+00, -7.03903755e-01, 9.77183021e-01, -2.71913064e+00, 1.50733970e+00, -7.87288246e-01, 2.68817182e+00, -9.16648691e-01, 1.10335919e+00, 1.94780929e+00, -8.24820346e-02, 2.90505523e+00, 6.22884229e-01, 1.55774899e+00, 1.10710017e+00, 2.59449736e+00, 2.69871283e+00, 2.94066677e+00, -2.24306770e+00, 2.85960370e+00, -1.62536606e+00, -1.88366146e+00, 5.52685321e-02, 1.82986096e-01, -1.30416455e+00, -1.13903079e+00, -1.14069374e+00, -1.40166668e+00, 5.60586905e-01, -1.69719377e+00, -5.85702494e-01, -1.26863256e+00, -1.95695511e+00};

  element_t correct_raw[] = {-0.861118,1.789599,-0.192098,-3.772066,-1.171446,3.868326,2.829584,3.519578,-0.401897,-5.756625,-1.167793,-0.123237,-0.333016,3.265663,-5.001259,-2.275627,2.801891,-0.380476,-0.281949,4.949083,6.634080,-4.571546,0.500780,-1.600668,-0.404496,5.583798,-5.585242,-4.355585,-1.292285,-7.720478,-3.375307,6.236872,7.582698,-1.215804,-3.438790,-0.206557,-1.589470,-0.288958,-2.960994,1.152735,2.488571,0.781154,-10.562472,-6.016970,8.332851,5.610995,-0.484588,-2.657443,-1.326799,-3.676986,2.932516,9.909317,-5.958278,1.501262,-10.012947,-0.660992,5.210555,-0.936115,1.438923,-0.467051,0.963350,2.352577,-2.595447,8.636878,-9.480071,0.267073,1.893265,4.650538,-2.989280,-0.938347,8.096261,-3.222964,0.069811,5.035134,-3.906377,-1.377284,-3.995087,1.627737,3.472075,5.245581,-5.183541,3.523603,-3.198893,-3.428192,-1.365123,1.956483,-2.648139,0.160610,5.591084,-0.673095,-1.655756,2.517139,5.317964,0.013097,0.232216,2.801119,-2.120084,3.965877,1.821071,-6.614838,-3.438645,4.562026,-0.998281,3.540547,1.997250,-2.849930,-5.619549,3.067973,-0.662032,0.050074,0.522035,-7.773035,13.852877,-2.032331,-4.413694,-6.226500,10.661108,-0.114805,-3.272382,5.556460,1.901664,0.176667,2.947251,-5.377202,-1.506144,-1.278448,10.884763,-7.307772,-5.229288,-5.934045,-3.221240,2.907982,2.758375,0.275452,1.592174,10.682644,-5.715372,1.198609,1.223449,-9.088083,5.399524,2.799407,2.480285,-2.518843,-1.693017,7.182967,-0.465039,8.277404,8.505639,4.144751,-8.093884,6.216247,6.655358,-5.677887,-5.782744,1.879567,-0.438828,5.258228,-0.172530,3.367729,9.702333,-3.334629,-5.368228,14.157303,5.123936,-4.809422,-0.065427,1.169573,4.672944,0.652245,4.008397,-11.696341,4.254375,-1.993380,0.772764,1.319159,1.332594,-1.101508,4.330271,1.487693,0.931754,-0.624353,5.998052,-3.184272,2.561398,2.162698,0.270218,-3.731274,-3.434558,1.781620,-1.208277,-2.355672,1.372223,-0.789950,0.649611,-2.953192,1.254964,-1.761536,4.236151,-1.784639,0.587066,-3.615817,-0.639442,-0.130348,-0.188041,0.387788,0.271775,6.524864,-2.877292,-4.810179,-9.713173,9.856152,5.190222,-0.340538,-1.207057,2.211226,2.282467,1.953119,1.046353,0.264842,-4.145903,-1.298680,-0.327268,-2.559111,-1.095952,-5.823745,-1.162175,2.726061,-0.692636,2.818845,-1.985480,-1.006485,-2.698162,-4.576430,0.639532,-2.779664,-2.504920,1.355231,-1.818899,-0.281408,4.168027,-2.839602,-3.896165,-6.237121,-3.230048,-4.478722,-0.479600,-4.557238,0.973666,-0.679591,1.946007,-0.320245,2.502236,-1.579053,-0.797051,0.614388,-3.737692,-2.902907,-3.467542,6.114590,-5.227870,-2.225209,0.308376,-1.234281,-2.658274,-3.788059,-0.411144,0.909863,-3.417280,-1.573502,4.443288,9.225067,-8.900447,0.296817,1.078235,0.837979,-2.986850,1.819401,-0.025384,-2.111081,-4.244297,0.309446,2.578097,-0.192216,0.128646,1.607225,1.603738,0.789715,-0.754840,-2.446655,3.198629,-1.275119,3.745399,-0.198952,1.012228,-9.062501,-6.847182,-6.631068,-1.483189,-2.420098,-4.444180,-6.471114,3.582602,2.950396,-2.459838,1.502661,1.438711,1.657287,2.918997,0.300620,-4.136347,-5.409235,-1.076149,-5.828786,-3.489184,-7.949127,-5.715112,5.500435,8.982519,2.711071,2.397807,3.291374,-0.682117,0.141506,0.033661,1.968719,-5.533283,-8.360313,-2.997298,-6.019006,-5.280542,4.562503,4.599768,10.330196,-0.459183,2.434101,-3.230419,1.217832,-2.136445,-6.687827,0.397670,1.276150,1.331867,-3.026968,-9.991388,-1.126211,-0.251184,-0.438882,-5.368198,-2.610491,1.660430,-0.768567,-5.618808,10.221746,7.674420,3.173374,-7.144212,4.364618,-6.513852,-3.489739,0.289451,-4.822148,2.654539,-3.901960,-3.065177,8.452254,-2.051857,6.003841,3.181066,6.028013,-4.086824,1.726675,1.147046,-3.829583,4.033304,1.746458,3.904646,-3.204093,-7.025935,-0.839962,0.550992,-1.446497,-0.046597,0.618169,-2.253153,-1.500938,1.324836,4.491065,2.739680,-0.658420,-4.968413,-2.742040,4.975129,1.480235,1.135472,-0.822700,-1.020366,0.607900,-3.481094,-7.163158,-4.878381,6.076893,4.077508,8.087923,-1.881206,-1.168522,0.356536,1.124289,-3.929127,0.373645,-2.309934,-15.655060,2.386410,-1.398612,-10.073902,1.774315,0.976454,3.380183,-1.519989,0.697923,-4.953779,-2.327959,-2.432772,-8.444665,5.078468,-1.868206,1.919565,-7.012532,3.071378,1.572557,-2.038942,0.609350,-3.625793,-0.926332,-3.209588,8.711662,-2.799956,-10.083397,7.346124,-9.100878,6.573493,-4.772502,-0.289014,0.017972,0.234143,1.716366,-5.708624,10.544999,-2.482754,-2.698241,-3.297389,-3.793433,3.759544,-2.163044,4.525909,2.778516,-1.008667,4.021857,-3.232802,3.224124,3.153430,11.552838,-7.959694,6.890323,-2.685184,2.293809,-1.808752,-3.241399,-0.974729,3.134702,-0.548421,-4.630121,1.525826,-0.038890,-5.427561,6.485326,0.995158,5.747540,-4.061276,3.321931,0.462585,-2.676033,0.692586,-4.428205,2.851727,3.579422,-5.693691,0.729099,-2.582628,-0.825910,0.447025,0.897885,0.640083,-1.283184,4.506027,-3.962641,7.628556,2.681618,-6.559796,-5.716064,-4.969007,7.426347,-1.102540,0.887424,1.105928,-2.940975,-2.665337,4.385749,-2.647065,0.559830,-1.729746,-7.954554,7.148817,-0.570385,-1.605864,-5.134223,-1.500844,1.896406,-4.136714,3.501003,2.793357,-4.793551,1.476191,-4.683261,-9.001178,-4.419949,9.630128,-2.325879,-1.769918,1.325857,-1.278566,1.538962,0.064186,2.870047,-0.965176,6.139172,-3.463282,-0.223263,2.689335,-2.884532,5.077912,1.404000,0.423740,-2.956308,-9.883310,-7.647298,-12.772137,10.669836,4.471886,-3.482169,-2.975618,-0.546047,-1.205117,-2.228755,-0.449468,-4.403217,3.962734,-2.994916,-2.372571,5.404981,6.218055,-2.892836,-7.338696,2.709865,1.370737,-0.543779,-1.181389,0.080095,-3.786092,-4.570521,1.758589,-7.591572,-1.925408,5.990691,0.319304,-0.671545,1.396614,-6.039306,2.723629,-3.564336,-3.683028,3.357243,-5.059089,3.105397,3.563374,-4.927155,-1.282873,-2.852456,-0.128050,2.579039,-3.203791,-1.633974,2.279120,2.540485,0.999827,-6.796712,-6.623774,-3.788263,3.813348,0.445892,-1.610440,-1.969648,-7.470009,8.979786,0.616404,7.188474,-2.532911,-0.269502,0.777244,0.460869,-5.537929,2.351184,1.680754,-6.363465,-0.281577,-1.248063,0.479298,0.924884,-12.434249,6.411742,-2.540554,-0.559595,-2.423559,2.458744,-5.743380,-1.139848,1.546543,-4.681086,4.481580,0.868453,-1.468513,2.693946,-0.424048,-2.166499,-1.582664,5.120764,1.363548,2.962844,2.332685,-12.982770,1.316206,-8.815780,6.926795,-1.996612,3.962878,0.706114,2.195045,-4.021688,-3.110470,-2.619936,-0.335381,-3.220358,-3.792652,-3.902319,3.092144,-5.546946,-0.545349,-1.140458,7.396077,-0.228004,-2.237571,-0.078275,-8.610713,1.325492,-3.892920,-0.678534,1.805630,4.158877,6.248294,-0.909855,-2.667446,-0.493430,-0.663760,2.317325,-3.282732,5.942960,-0.797827,-0.294271,0.677391,2.660363,1.896703,2.660187,-1.567300,-0.584433,-0.539476,3.216395,-0.329729,-3.129022,4.960201,1.944759,0.185053,4.696012,-3.133824,-2.115324,0.151550,-2.786795,1.387276,-0.429266,2.415838,-9.534157,1.231715,2.197715,14.833018,-3.656259,-3.150365,-5.877256,-1.249179,-1.445882,-3.559311,3.032200,2.149899,2.542215,7.641285,1.344760,-0.146722,-0.449808,-0.421924,-7.260665,0.207624,-0.040495,-0.054238,2.136933,-3.003693,3.953950,1.666373,-0.640226,2.979584,4.072708,-2.387727,-8.122070,-2.296925,2.226939,5.151889,3.076842,-1.198240,1.833760,-3.935266,-0.096859,4.766315,3.360656,-3.722329,-2.239634,-8.541346,3.749193,-0.790741,3.890601,0.763397,-4.146721,2.115535,4.469295,5.801566,-5.038229,-7.644842,6.513895,-1.125079,1.318954,2.475580,3.880140,1.922904,1.477416,3.806829,-5.331800,-0.318459,-2.795389,-1.227576,3.300580,-0.091793,-1.169827,0.577405,1.558482,1.410214,-2.293223,-2.817356,-2.196218,-0.894050,1.241790,-2.265645,0.723896,-1.552978,0.766894,2.168101,3.185398,7.244444,0.223601,3.850333,-3.544351,-3.879556,-7.993992,-0.913321,-0.246464,-1.968331,-1.076868,1.445627,-1.251424,10.992624,2.406884,3.083553,-3.976796,11.420601,-3.252425,3.770565,-9.027681,-0.820733,-4.536175,3.340143,2.997738,2.608858,-8.541022,-5.629584,-3.355803,0.963625,-5.206939,-10.688908,1.269209,-0.020354,-0.039742,-3.619257,-3.341744,-12.053204,-9.779691,-8.212052,6.107642,3.622704,9.697240,-4.916384,-2.549187,-5.653267,-0.404472,-3.854570,-1.802257,-2.284639,1.788811,-1.379691,-2.401009,-1.385132,13.066822,4.197006,-0.762217,-11.944082,1.003180,0.723836,-3.987071,7.109487,0.669772,8.847664,-6.473099,-5.048759,-1.923731,-5.661686,-0.898357,-2.515805,4.447938,-1.315907,-1.155657,-2.499074,1.253925,0.533754,4.925126,3.260244,0.244958,1.873359,3.839741,-2.589235,-1.933603,1.482819,-0.094911,2.247850,1.916307,-4.324421,5.398454,-2.683898,-3.803080,-2.539108,-3.321848,-0.840137,1.194703,1.077823,-4.391097,2.413430,-1.027599,-4.359714,-2.977153,-3.810991,3.056397,-5.345336,3.692720,-0.248154,0.121191,2.732118,2.065307,5.985812,-2.841371,4.367061,-11.579490,-4.312026,-9.014544,1.899171,0.534760,-0.869187,-0.670206,1.050324,0.597615,-3.133600,-1.037654,7.605500,-6.777506,2.997478,-9.650144,1.548298,-10.662847,6.504010,0.403664,-0.735089,-3.503188,-3.370574,2.038488,0.536245,-2.663870,-7.014248,2.834171,4.278159,0.257983,1.560945,-4.311639,0.876247,-3.126559,0.010525,12.060719,-6.738288,14.523293,-12.654755,-4.698486,-10.429930,-3.694757,-1.646406,5.424623,-0.989953,-0.467865,-0.315587,-8.657926,-2.971225,-6.292002,-6.728180,10.229908,5.584425,4.843599,-6.052397,1.157480,1.020668,-2.501064,2.888194,-1.489629,3.180426,-4.239866,1.106057,0.634659,-3.122109,2.654816,-1.808122,0.462653};

  auto& ms = MinervaSystem::Instance();
  Scale input_size{8, 6, 3, 2};
  Scale weight_size{5, 3, 5, 3};
  Scale correct_size{12, 8, 5, 2};
  shared_ptr<element_t> input_ptr(new element_t[input_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), input_raw, input_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));

  ms.SetDevice(cpu_device);
  ImageBatch top = NArray::MakeNArray(input_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  NArray bottom = NArray::Zeros(correct_size);
  ConvInfo conv_info(0, 0, 1, 1);
  ms.SetDevice(gpu_device);
  ImageBatch output = Convolution::ConvBackwardData(top, bottom, weight, conv_info);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
	//printf("%f,",output_ptr.get()[i]);
  }
}

TEST(ConvBackwardData, GpuWithPaddingFrac) {
  element_t input_raw[] = {5.25103347e-02, 1.92732021e-01, -8.96084910e-01, 7.90179056e-01, 4.56532361e-01, 6.36700023e-01, 4.45505669e-04, -6.37884921e-02, -8.12535948e-02, 4.19019560e-01, -6.43893988e-01, 6.28997687e-02, -6.64515542e-01, 5.37627837e-01, -2.45310092e-01, 6.97202824e-01, 8.22194457e-01, -2.32302558e-01, -3.69008193e-01, 1.36788306e-01, -6.24363930e-01, 9.46459963e-01, 2.68108754e-01, 7.76843450e-01, -9.17048249e-03, -2.96766940e-01, 4.28460737e-01, 7.85823290e-03, 8.30187347e-01, 8.90743668e-01, 6.64644593e-02, -4.95014811e-01, 4.41724116e-01, -2.65122472e-01, -2.70311418e-03, 5.37470894e-01, 5.63674207e-01, 7.04818966e-01, 8.99811480e-01, -7.85354176e-01, 8.21450712e-01, -3.27889676e-01, 5.59052417e-01, -1.98597912e-01, 5.89058463e-01, 7.86248621e-01, -4.75020618e-01, 9.78394015e-01, 7.06614198e-01, 9.11532892e-01, -9.99785487e-01, -9.66917916e-01, -3.71859885e-01, 9.90632349e-01, -7.02311554e-01, -6.65245763e-01, -9.79623568e-01, 5.49647726e-01, 5.88402017e-01, -7.00861097e-01, -9.52592736e-01, 5.24127542e-01, -5.52659640e-01, 6.93885994e-01, -2.43800926e-01, -1.35069767e-01, 6.65238353e-01, -2.57736129e-01, -9.18893456e-01, 1.09342972e-01, -6.13706128e-02, 1.25286858e-01, 3.22398678e-01, -7.55162650e-02, 2.47273891e-01, -5.56238738e-01, 4.65726234e-01, -6.95721875e-01, 5.42747408e-01, -4.89176535e-01, -7.44913190e-01, 3.30334307e-01, -1.74390103e-01, 3.35535533e-01, -6.26250490e-01, -4.07823970e-01, 5.97030118e-01, -4.10443414e-01, 3.94243187e-01, -4.54081542e-01, 8.25056903e-01, -2.81417189e-01, 3.64354606e-01, 8.42783940e-01, -7.10151312e-01, -8.00251230e-01, -1.76794447e-01, 9.50250742e-01, -3.67423692e-01, 2.20271553e-01, -5.97610574e-01, 3.83795433e-01, -5.10746058e-01, 3.60743392e-01, -2.81245422e-02, 6.82296085e-01, -6.07151251e-01, -3.38833141e-01, 8.93259770e-01, 1.21436991e-02, -1.93168283e-01, -9.45876923e-01, -3.31218962e-01, -8.64580115e-01, -9.92351503e-01, -9.18064393e-01, -3.02090269e-01, -8.16091378e-01, 4.06314529e-02, 5.24922383e-02, -1.20153861e-01, 3.23110491e-01, -7.30429651e-01, 5.75698010e-01, -7.24044598e-01, 2.65846595e-01, 5.78064850e-01, 3.24041516e-01, 4.23024858e-01, 7.75847324e-01, -7.16649418e-01, -7.04859753e-01, -3.48138314e-01, 2.32015221e-01, 9.16999718e-01, -4.17894767e-01, 3.73356925e-01, -9.15543539e-01, -8.74992737e-01, 6.28797391e-01, 6.70704305e-01, -6.64622476e-02, -1.57428024e-01, 1.41703106e-01, 4.78111913e-01, -8.89833183e-01, 2.48361298e-01, 1.71500734e-01, -1.03241151e-01, -2.92539465e-01, 8.67050469e-01, -4.65488136e-01, -4.37401239e-01, 9.81192729e-03, 1.76624177e-01, 4.63404565e-01, -6.48977854e-01, 2.10775692e-02, 5.69191679e-04, 7.85535264e-01, -2.34634585e-01, 8.96057273e-01, -3.05549564e-01, 3.67786398e-01, 6.49269763e-01, -2.74940115e-02, 9.68351743e-01, 2.07628076e-01, 1.85028318e-01, -3.49798716e-01, 8.73610682e-01, -8.08034049e-01, 7.66591492e-01, 1.36035466e-01, -8.76153051e-01, -9.42090961e-01, 2.54198007e-01, 2.09278522e-01, -8.43584950e-01, 5.45907125e-01, -7.13366751e-01, -7.26307843e-02, 4.97412749e-01, 7.79227666e-01, -2.41219689e-01, -4.15127476e-01, 1.85804799e-02, 6.56272008e-02, -7.89156759e-01, 5.95946891e-01, -5.11510156e-01, 6.07075484e-01, -4.03649869e-01, -6.54580737e-02, 8.65639316e-01, 8.19513569e-01, 2.93617672e-01, -3.35847054e-01, -7.71555326e-01, 1.42208982e-01, -3.96017041e-01, -6.12988788e-01, 1.29411384e-01, -1.88205315e-01, 3.31118167e-01, -6.05975908e-01, -5.16439080e-01, 2.46344907e-01, 5.97476702e-01, 8.92727341e-02, 8.77082477e-01, 4.78201578e-01, -9.46106323e-01, -2.35208227e-01, -9.78947208e-01, -8.69535860e-01, 3.62785391e-01, 7.88573716e-01, 4.13573947e-01, -4.22013528e-02, -5.68775015e-01, -8.36467872e-01, 3.46404408e-01, 9.89558378e-01, 8.96711938e-02, 9.67284551e-01, 4.71404282e-01, -8.13833601e-01, -4.15551966e-01, -4.53903666e-01, -8.57667173e-01, -5.76563967e-01, -4.14422920e-01, -2.87165417e-01, 9.12734981e-01, 3.20487724e-01, 9.01024809e-01, -8.06264818e-01, -4.12511687e-01, 2.99419879e-01, -1.58010723e-01, -8.50696651e-01, 4.77613710e-01, 1.70740085e-01, -3.10658805e-01, -4.22856328e-01, -4.71636816e-01, -4.46162130e-01, 6.84712020e-01, -6.60755426e-01, -4.95826747e-01, 1.83750401e-01};

  element_t weight_raw[] = {4.69434058e-01, -1.38583424e+00, -1.19454332e+00, 7.51993600e-01, 1.67906442e+00, -4.73379739e-01, 9.41878306e-01, -4.58280482e-01, -8.89644787e-01, 7.47770021e-01, 1.86899005e+00, -3.76912984e-02, -2.68109599e+00, -1.01194085e-01, 2.78046317e-02, -3.78493153e-01, -7.43905667e-01, 1.66726823e+00, -2.39953374e+00, -2.90112339e+00, 1.69425602e+00, 2.11895221e+00, -1.65778947e+00, 7.61535409e-01, -2.61197826e+00, -1.56647519e+00, -2.41361783e-01, 9.76095418e-01, -1.69379028e+00, -1.80317946e-01, 2.86974591e+00, 7.83224328e-02, -1.79212071e-01, 9.96846111e-01, 1.27322826e-01, -1.45638535e+00, 1.94500748e+00, -2.22728921e+00, -1.96833731e+00, -1.95052845e+00, -7.08356663e-01, -2.39044050e+00, -6.61220349e-01, 1.85948655e+00, -8.77489231e-01, 2.25910682e+00, 2.75299436e+00, 2.03237053e+00, -2.30972770e+00, 3.74469986e-01, -2.34937194e+00, 2.25521054e+00, -8.99953121e-01, 2.38629051e+00, -2.25493565e+00, 8.27170971e-01, 2.23515090e+00, -2.99360661e+00, -1.17168090e+00, -2.82705197e+00, 2.98377018e-01, -1.94885169e+00, 5.40153173e-01, -2.96927632e+00, -1.30786336e+00, 1.55878752e+00, 2.23167008e+00, 3.25273789e-02, -9.75319840e-02, -2.71345071e+00, 1.50482951e+00, 1.98800589e+00, 2.19620308e+00, 1.96069188e+00, -2.51859384e-03, -2.94740383e+00, -9.52835533e-01, 1.44073713e+00, 2.46472884e+00, -1.23625174e+00, -1.87975626e+00, 2.30530176e+00, -6.95593244e-01, 7.01437086e-01, 5.81853703e-01, -1.06019632e+00, 8.40219457e-01, -3.08456307e-01, 1.19075977e+00, -2.02837369e+00, -1.82785135e+00, -1.03247982e-01, 3.75951276e-04, 1.60856600e+00, -1.84283918e+00, 2.95301614e+00, -1.04820246e+00, 2.07600281e+00, 1.90885268e+00, 2.43943187e+00, 1.43667562e+00, -1.10003648e+00, -2.83465135e+00, 3.78231860e-01, 2.74004219e+00, -2.06394886e+00, 1.54640811e+00, -2.75194253e+00, -1.83270810e+00, 1.21537604e-01, -2.10613421e-01, 1.73705801e+00, -2.23164924e+00, 2.35449197e+00, -1.94164743e+00, -3.90715826e-01, -2.10387976e+00, 1.13258744e+00, 1.88402160e+00, -1.84470203e+00, 4.68833930e-01, 1.32519944e+00, -1.49205079e-01, -1.42829315e+00, 1.40477660e+00, -9.04758285e-01, 1.02878655e+00, -2.66964987e+00, 2.38227291e+00, 1.29870916e-01, -1.34866170e+00, 2.06100418e+00, -3.45158807e-01, 1.01549933e+00, 2.95588019e+00, 2.11601428e+00, 2.60128869e+00, 2.17276736e+00, -2.59770354e+00, -1.24910999e+00, -1.82202496e+00, -5.33936144e-01, -4.84902078e-01, 2.74960541e+00, 2.54449228e+00, 2.90201444e+00, -7.12005966e-01, 2.78452402e+00, 5.41890668e-01, 6.39412589e-03, -1.30741768e+00, -2.02580336e+00, -3.07274893e-01, -9.16216399e-01, 1.43133925e-01, 2.62978313e-01, -2.93526489e+00, -1.22066322e+00, -1.99031596e+00, 2.75104991e+00, -1.58140965e+00, 1.99593194e+00, 1.24653142e+00, 3.63953174e-01, 1.20670807e+00, -1.72797444e+00, 1.14623773e+00, 7.29634814e-01, 1.30469585e+00, -2.08381639e+00, -2.43447976e+00, 2.70710670e+00, -5.76311983e-01, 8.60548537e-01, 2.76294937e+00, 2.02390457e+00, -2.21619757e+00, 5.84615982e-03, -1.90966590e+00, -2.69773939e+00, 2.37040542e+00, -1.40377827e+00, -2.67741849e+00, -3.91919585e-03, 1.68066674e+00, 3.41687874e-01, -2.18967901e+00, -6.68539573e-01, -1.45396104e+00, 1.63947625e-01, 2.41602503e+00, 2.11868255e+00, 2.02093959e+00, -1.70472896e+00, -2.19870107e+00, -2.27854787e+00, 2.24774629e+00, -2.51982957e+00, -6.63516277e-01, -1.90908765e+00, -5.33080226e-01, 2.00029937e+00, 2.87068895e+00, -2.97450387e+00, 3.59138519e-01, 1.51067887e+00, -6.59731115e-01, -1.14836880e+00, 1.78586722e+00, 1.33662466e+00, 1.80534568e+00, 2.83009647e+00, 2.26499936e+00, 6.41048319e-01, -1.35574472e+00, 1.12644441e-01, 4.13352887e-01, 2.71106637e+00, -3.33341733e-01, 2.67315433e+00, 4.36720777e-01, 2.50423523e+00, -6.96118478e-01, -2.71824102e+00, 2.16307105e+00};

  element_t correct_raw[] = {3.845909,-2.465496,0.589378,1.481120,0.884907,1.961015,0.500441,-0.189879,1.270812,-4.281405,-1.402695,-2.822614,-0.758731,3.904691,2.566453,-0.056369,-1.723649,3.227181,-3.111451,0.287927,-1.381549,-0.714783,-0.548202,-6.959681,3.566275,1.420603,-0.957330,3.048718,0.258934,3.299982,-1.651939,1.008864,0.903139,-1.247975,-1.435244,-3.382528,-3.219559,1.330083,0.363935,-5.283397,-0.940881,2.381196,1.769042,2.943218,3.363449,2.244520,-2.112667,-2.043218,-0.242464,6.034330,-1.592443,0.036246,1.187824,-0.970723,0.590348,-0.434619,-0.056603,4.359330,-2.701239,0.125489,-5.196329,2.204993,1.455175,0.355276,1.358964,-0.867613,-0.587587,-0.731334,4.218861,4.345639,-1.509081,-2.908677,2.392304,-2.414278,-1.048870,0.428391,0.082674,3.568560,-3.110015,0.115598,3.548621,2.857935,-0.625213,-4.325654,-1.892525,-1.123329,-0.774052,0.787844,1.042803,0.060229,0.151543,4.252497,-1.506037,-1.548902,-1.435487,-0.952175,0.300459,-1.655010,-0.013100,0.678614,-3.680426,3.425972,-4.706930,-0.451061,-3.989499,-0.989955,5.115177,-2.533099,-3.652122,2.997863,0.900992,-5.339652,-3.255920,-1.657704,2.184265,-1.052566,-1.911232,-2.566213,6.258489,-0.026860,0.651487,0.560002,1.172848,1.257571,0.956609,0.778904,1.316195,1.400032,1.697551,0.516576,-0.005685,-0.894202,0.716617,1.504589,1.244175,1.204695,-0.934321,4.979046,-2.446317,1.565354,3.064934,-0.646009,1.603688,0.742192,-2.328596,0.895660,6.717861,2.642765,0.848957,-4.231883,-3.285070,-0.015358,7.085264,-4.229325,-1.369987,2.780561,-5.006955,1.614884,2.096627,-1.488195,-0.969727,1.439702,4.590145,-1.538701,-1.702743,-3.201614,0.370406,2.071748,-7.276389,-2.335459,-3.072445,1.612026,-2.150838,0.737521,-4.778410,-3.187677,2.995512,-6.008431,0.704727,-2.855818,0.790036,2.413476,-3.537482,2.981315,-0.254485,-1.552113,-2.812091,3.686908,-5.254025,-0.746237,1.206459,-0.118121,0.444311,2.352103,-2.083818,0.170356,-1.826362,3.922848,1.858447,5.231286,-2.764146,-2.587276,-4.684639,2.891425,-0.359263,-0.644281,-0.141690,-0.865859,3.503142,0.202909,-0.534896,3.400967,-1.291067,-1.489728,-5.936470,-1.071498,0.751956,-0.779727,0.653423,0.921970,-0.653335,-5.214388,3.525232,2.272589,-0.594273,-6.174189,2.074171,-0.064981,-3.958682,-1.996992,1.180740,2.552533,-0.547262,-4.072735,3.163729,3.513303,7.331469,-1.608581,0.152660,1.207877,-0.600691,-4.114732,1.254578,-1.372975,4.985206,3.773743,0.881443,1.881385,-0.933229,-0.050082,-4.220223,-2.887437,-2.506598,-1.019054,-2.116590,4.059282,-6.502472,0.513171,2.942820,-2.190843,0.193118,0.174548,3.709597,0.362227,5.922655,-3.711564,-0.757563,2.130336,-1.346752,1.886258,4.952934,-1.158211,-3.482955,2.205141,-0.718302,-2.713345,3.795985,1.131021,-4.311320,2.169356,1.192950,-4.840281,1.721761,-0.044846,-3.060223,0.248066,-0.244913,-0.932547,0.816900,0.224600,-4.948787,-0.134674,-3.191582,-2.350055,1.463386,1.687222,-0.595048,1.490398,-0.069272,-2.746801,-1.183448,2.672037,1.374844,0.254229,0.243653,0.507790,-0.184270,-5.576647,1.261626,3.873958,-3.129664,-2.727933,5.139612,-1.593915,-2.636973,3.210758,3.229241,-0.367013,-3.478060,-2.554052,-2.304151,5.030469,-4.121919,4.234983,-2.919047,2.168560,-1.494267,-3.873347,0.661109,-0.848496,1.305753,2.738763,-2.520663,4.145588,-1.815840,6.226233,-0.662227,3.165576,-1.726515,-2.950878,2.039074,0.643704,2.397059,-3.560896,8.360213,-0.755646,-7.782828,0.575504,3.175547,5.201870,-4.757899,-2.461914,2.117193,-3.109161,3.757377,1.658546,-0.709510,-3.765276,0.039588,-2.926754,-1.015649,-0.419961,-2.744845,5.806698,-3.276499,1.824898,-0.024031,-0.156863,3.289195,-2.479400,1.003833,-1.715507,2.672881,-0.217725,-1.219872,1.914917,-3.907726,-1.334660,1.338179,-1.517946,-3.130345,-0.822755,3.507508,-1.437899,3.916223,3.983954,2.923595,-1.394103,-4.147160,2.491761,1.978367,1.403063,-1.510401,0.352827,0.118895,-1.901039,-1.202303,0.890955,-0.933127,-2.061333,0.263045,0.138107,1.228044,-0.134735,-2.235384,1.225482,-0.722543,1.120772,-2.495472,5.619652,0.054132,-2.686479,0.510590,-0.544603,1.561153,-1.595171,-5.834252,-1.057082,0.858847,0.107422,0.016260,0.531911,0.865193,-3.562785,1.715964,0.110950,-1.510552,-1.685534,2.924967,0.452031,-0.204090,3.823882,1.627610,1.884829,-0.474959,0.575115,-1.333717,3.413519,-0.399864,2.377424,-0.587248,1.267216,-1.830861,4.679131,1.809601,-3.313360,-1.335972,1.390717,2.501116,-1.190962,-0.160235,-2.605512,-7.383038,2.106052,2.963035,5.050900,1.559346,-3.657293,-5.097447,-0.267254,-0.059867,1.618894,-6.695870,3.967587,-5.301947,-0.000668,-3.751898,5.394303,0.989375,0.850588,0.394054,6.269826,-5.399649,4.726970,-3.585848,1.895974,0.415230,-4.184267,3.788150,-1.250752,-2.909195,4.623605,2.784648,-0.868919,-0.466413,-3.555778,7.118162,-4.998521,0.903996,-3.350409,1.965437,-3.532233,-0.837523,-4.107516,2.996232,-3.463896,-2.378033,-2.893377,-3.105941,4.901556,0.292115,1.032904,-5.590875,-1.154327,4.016511,-2.017132,6.309350,-1.804926,-4.462908,-2.278412,-3.717663,3.976454,-1.462486,0.586214,2.888615,-4.026318,1.834803,-5.511013,3.181872,0.047725,-0.655399,1.408986,-2.944674,2.503071,-0.486758,2.895322,-3.710724,-1.381399,-3.486042,0.758689,2.867280,-3.031202,1.199251,4.763492,7.372323,-2.562604,-0.352317,1.376232,1.642581,-8.715605,-3.080049,-1.452860,-0.846489,1.697400,3.358842,-1.350145,-1.333365,-2.751623,2.454216,-1.311218,1.363098,-2.616372,0.796570,3.090573,-2.414805,0.990002,-2.065000,0.331888,1.513003,-0.708691,3.020488,4.619943,-1.150711,0.394267,2.056544,-1.762712,3.282127,1.840623,-2.073154,0.193464,0.789731,-3.199113,-1.656071,-2.182090,-2.504062,3.417483,1.727930,1.277252,-1.156230,3.277410,-3.618040,-0.056106,2.133247,-3.769239,-0.726722,1.450797,-1.988385,-4.102895,4.262424,-1.924873,0.878807,-0.630764,-0.619184,-2.721413,2.543353,3.202764,2.077056,2.233450,2.498300,2.892667,0.275376,-5.527104,3.038436,-0.279186,2.487061,2.694406,3.197979,-3.717859,1.092427,0.033140,1.502709,1.334429,-0.570145,0.485120,-4.467134,0.858854,-4.443572,-0.210695,5.604330,-3.935902,-0.749726,-5.713008,1.766799,3.561099,-5.418397,-3.463311,-1.850701,-1.196525,-4.872187,-2.094872,-4.654514,1.469945,-0.841315,-1.244426,2.767333,0.702389,1.786901,-1.765896,-1.321167,2.578320,-2.647848,-1.175844,-3.604388,-0.160364,-1.792441,-1.974482,2.328102,2.167312,1.517444,-1.638734,6.621651,3.894485,1.868028,2.828482,-5.493174,-2.068624,-7.601443,-2.733574,1.624552,0.383270,-0.776599,-1.453350,-0.825454,-0.080702,2.731013,0.353324,-0.977805,1.847023,-1.878736,1.146624,-1.890144,1.372788,-2.773447,-1.454903,-0.934755,1.400794,2.410461,0.728298,0.387292,-2.150439,-3.226502,-0.386374,2.402369,-1.855253,-0.782380,1.934853,1.624400,1.711406,0.431427,3.851121,3.935659,-4.803809,-5.327802,-4.906329,0.546551,2.639792,5.612206,-0.947134,-0.206208,-1.519087,-2.879827,0.459535,-0.827835,5.771118,2.951143,2.098813,0.175488,-1.809531,0.148246,-4.536745,-2.495619,-0.064182,-0.904609,2.935551,1.661551,7.521520,1.146868,-5.891061,0.623886,1.093173,-9.421807,0.292302,2.805339,1.087620,5.032285,1.176152,-1.030974,3.026438,-3.765660,-4.720321,-5.311965,-2.660792,1.914408,-2.375712,-0.449142,2.273593,-2.844501,-1.737085,-0.448928,-2.468417,-2.820817,0.000078,-0.924522,-2.148602,-1.027556,-1.951380,0.668982,1.775566,-1.426799,-3.466037,1.627961,-1.873865,-0.091591,-1.550399,0.858698,3.116195,-2.100472,-0.567559,-8.164916,-1.114094,-0.848759,5.331138,-1.377731,-3.351110,-4.675035,-0.926645,-1.931528,-3.059429,-1.072201,4.962532,2.047294,3.908442,-4.517472,-3.468467,-6.120145,8.230668,3.504920,1.434048,-2.316000,4.302949,4.643143,-3.565472,-2.296573,0.407805,-1.101896,-0.071062,-0.200591,0.097454,-1.563670,0.001497,1.109972,-2.591698,4.121682,1.060892,2.735012,-1.224149,0.474362,-0.335191,-0.733630,0.419724,4.662849,0.287340,0.324344,-3.199001,1.897782,2.661641,-3.623981,-2.752945,-3.397589,6.643158,0.331597,0.368056,-2.144771,1.710681,2.233165,-1.665719,4.579946,-2.548426,-1.692296,-0.066699,-2.146310,-0.335489,-4.462538,1.854461,1.217237,0.790415,0.914001,0.275215,-0.163005,1.370544,0.916207,-1.987438,1.111030,-2.643503,-0.433071,0.822819,-5.347632,-3.084691,-0.065221,2.019889,-1.122666,-1.579674,4.524657,3.831008,1.251040,-1.557160,0.717001,3.325828,3.267263,-3.468916,1.712815,-0.795155,0.908987,-0.715514,2.159034,0.062320,4.891331,-3.949323,-1.230718,-2.297485,0.318681,-0.132351,1.125314,-0.369322,-1.501528,-2.795066,0.987646,1.234304,-1.547513,-1.251885,1.841461,3.378464,3.093324,0.240595,-3.017777,-3.058540,-3.520401,0.534534,1.079248,0.474376,-0.547142,-0.211391,-4.003759,0.744047,3.028892,-1.987803,-0.344247,-2.585548,0.841339,1.026980,-4.167926,3.490149,0.929835,3.928648,-1.729900,-0.307800,-1.613881,-0.598899,-0.142021,-2.129205,1.743139,-0.737894,1.799715,-1.000266,-1.037859,-2.526422,-1.643132,2.170768,4.925752,-0.286835,1.727989,0.023550,-1.543920,-1.383892,0.631848,-5.272579,-1.926543,4.492075,-2.087584,-5.156664,1.065979,-1.177350,-0.520421,-0.986071,-2.641171,-2.585831,3.874002,7.958843,3.671890,-4.354837,1.680861,2.413560,-0.639488,-1.371515,-0.515369,2.981484,-2.769229,-1.230824,4.281669,1.342370,1.151566,-5.823674,-1.802693,-2.042440,1.547603,-0.848870,3.133150,-3.274272,0.367319,-0.230035,0.745955,-3.240587,-4.532187,-2.574762,-0.437319,-4.208837,2.214460,-0.194591,2.188668,-1.135109,1.517471,5.862356,1.892405,-1.724983,5.147058,3.033638,-2.263613,-1.375627,2.190180,5.889580,4.656123,1.170402,2.786150,-0.341040,-0.511466,-2.435976,-3.511522,-0.627698,-3.819376,1.037428,-0.514548,1.098882,0.933592,1.872988,-8.126570,-2.264100,-3.390448,1.550356,1.942004,4.993554,-2.604221,-1.926685,-0.953312,-4.998725,1.638166,-4.298827,0.512733,0.227010,2.066640,2.783075,-4.690213,4.231190,3.602269,-3.945251,2.042390,-0.651908,0.647119,0.012408,1.910756,-2.761156,2.671400,-2.801385,6.672872,-2.148654,0.451089,5.693497,0.332481,2.002918,0.350823,0.499623,-0.007228,-3.447148,0.931386,-1.993840,3.500704,0.855663,0.188628,-0.810710,1.723905,0.596219,-2.351015,0.583639,-4.388320,1.867962,2.433845,2.751505,-3.456889,-2.252622,2.140037,-1.638006,1.520913,-3.038548,-0.434819,-3.052736,-3.437835,0.750551,-2.055249,2.182165,-1.098331,-1.366136,-2.756183,-2.673218,2.839476,-1.093923,1.178658,-2.138683,-0.248647,3.898692,0.030749,0.876516,0.018095,-3.955104,1.516175,0.083857,2.215161,-0.379718,3.082961,-4.157503,0.682712,0.683552,-1.436876,0.817879,7.906262,0.141579,-4.394066,1.549221,0.481245,5.265841,-0.389739,0.362608,-1.189218,0.664165,0.173081,1.558873,-12.055103,2.550744,3.567558,-2.026495,-5.126311,-1.677818,-2.886195,1.721386,0.128932,0.491950,0.459580,-1.344010,1.431260,1.094958,3.743199,1.380119,4.147727,0.471604,3.309261,-4.622769,-1.304540,-7.668621,4.168849,0.910127,-0.098865,2.816075,0.395532,3.652626,2.402667,1.568862,-2.662644,-0.717507,-0.233553,1.926129,-7.410192,0.937877,4.227310,0.483673,0.747444,-0.491815,-2.237600,-0.041031,-0.680294,0.573803,-1.361226,0.368102,1.154885,0.299771,-0.690162,-0.828546,3.405936,1.723751,2.138912,0.284385,0.027117,1.467832,-2.583982,-6.070893,0.797992,1.138187,-0.269456,-5.656669,0.640806,4.110087,0.411261,-0.007998,1.857130,-1.483325,-0.245687,4.284704,0.548963,3.017456,3.757858,-0.970869,1.648517,-0.837075,2.539185,-0.511228,0.356514,-3.784048,-1.640567,0.074247,-0.569734,0.968597,-2.400729,2.390262,-1.559955,-3.062568,3.845081,-1.386799,-2.786325,2.454053,1.909970,-3.490635,-1.613415,7.343758,0.964060,-3.060417,-3.838192,1.454522,-0.078194,2.886062,-1.144066,-5.584843,-0.790844,-1.962379,1.554136,-2.598253,-0.482817,2.400339,-0.811326,3.272938,-2.713212,2.583893,0.204418,2.996893,-1.979292,0.563200,-2.046627,-2.991953,-0.495785,0.244667,0.261625,-0.379248,-0.723829,-0.336582,-0.534737,2.750881,0.831466,-4.104002,-2.915404,2.252081,4.178073,1.410509,-1.227218,-3.684549,5.955318,0.123355,-7.035538,1.578054,-0.706451,1.404112,-3.802033,8.739538,-0.451384,4.340664,-4.984023,0.037622,2.116707,5.768828,3.840294,4.408830,-1.111681,1.143913,3.206058,-10.092641,3.985839,-0.754816,1.450521,-0.316634,4.111164,-2.977961,-0.303762,-1.967275,1.388052,0.283297,0.671391,1.793113,-3.034674,-1.171494,-2.714860,3.686311,-3.086224,0.900468,7.322951,-1.853812,-0.397175,5.190455,3.079471,-0.761012,-4.802870,-1.163616,2.971545,-1.201709,1.798075,-0.794905,-2.184322,2.944897,0.617656,-10.066653,-9.239977,2.802136,-3.253031,0.756321,3.079593,-3.417022,2.138905,-0.325971,2.106755,-1.355544,-2.960357,2.897754,-1.672802,2.118155,-1.535472,-0.677410,-3.817737,3.536949,2.148230,-2.728638,-1.727207,2.952166,-1.168653,-0.475837,-0.307470,-2.027559,-1.103787,1.063904,4.816449,3.064092,4.645157,7.486440,-0.698588,-1.232254,-0.609907,-0.135891,-0.866970,0.268786,-0.952668,2.528575,-2.181770,-2.289371,-1.316394,2.917477,4.522099,-4.378400,1.513688,0.946281,-0.679696,0.669249,1.501191,4.138062,-0.630634,2.002233,-0.704404,-1.113182,1.453661,2.429029,-6.343977,-2.888141,0.387189,3.393198,-0.363554,-2.157344,-6.250227,-2.618359,-5.624626,5.672784,-1.707563,-1.105783,-1.045594,1.339093,2.604943,-3.861166,2.190233,-2.907994,5.226472,-2.840702,-1.388996,-2.087420,2.427795,-1.240384,0.008698,1.419662,1.916767,-0.709483,2.184299,0.895472,1.579453,-2.638179,-0.341889,-1.185175,-3.911908,-0.770060,-0.386477,-3.275759,3.670346,-0.387191,-1.094651,-5.091290,-1.277973,6.066463,1.083110,5.202495,1.171572,2.931968,2.038907,-2.205145,-0.321943,-3.238070,1.692306,-3.002420,-4.857695,-3.754157,-0.847138,-1.005508,-2.379500,-6.203844,2.098895,-2.681978,0.610876,2.638650,1.027793,3.635301,1.643098,-0.229483,-5.741793,-3.203817,-1.120786,2.685856,3.924101,-2.562212,-1.195341,-4.507626,1.256577,-0.674392,-0.616030,0.552610,-3.464050,3.334847,3.140853,3.091267,-1.212179,1.851817,2.494154,-3.197718,-5.242874,-1.206107,0.188038,1.320299,4.161740,-2.693547,-6.056599,-1.145394,6.017052,1.975902,2.242362,0.908978,-2.219457,1.389856,-3.643971,-0.636760,-2.000452,-2.159404,1.028562,-1.120047,2.253449,1.083152,-1.291330,-7.183073,-3.465961,-4.383882,2.590384,2.485516,3.266732,3.486783,1.706422,2.686608,0.625926,-2.523892,1.246413,-5.327024,-2.070274,1.517101,-1.975741,-0.543594,1.475664,4.718972,-2.302999,-2.141681,-0.878854,1.442263,2.517845,-1.082412,-2.035593,-3.093157,2.698419,4.481010,1.948406,0.885463,4.926666,1.552248,2.008760,-1.162539,0.363607,0.673476,2.491370,-2.231702,-0.723514,-4.161361,-2.953119,-3.506404,-1.115868,2.693108,-1.059692,1.371176,-1.101700,1.755706,-0.267018,3.584848,7.465904,0.585300,-1.244709,-1.374579,0.989673,0.712619,-0.637506,-0.075358,-3.071044,1.048911,-2.374567,-0.113002,-1.570234,1.486891,-2.824701,-1.042766,0.785679,2.286445,2.842867,-1.501233,1.097603,0.778050,-1.896764,5.698798,-2.953891,1.280133,-5.356856,-2.095205,-0.286779,1.757654,1.307184,-3.128605,3.348935,3.614693,-1.420319,2.337458};

  element_t bias_raw[] = {1.324, 3.829, 2.112, 0.003, 0.28464628};

  auto& ms = MinervaSystem::Instance();
  Scale input_size{7, 6, 3, 2};
  Scale weight_size{5, 3, 5, 3};
  Scale correct_size{17, 9, 5, 2};
  Scale bias_size{5};
  shared_ptr<element_t> input_ptr(new element_t[input_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> bias_ptr(new element_t[bias_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), input_raw, input_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));
  memcpy(bias_ptr.get(), bias_raw, bias_size.Prod() * sizeof(element_t));

  ms.SetDevice(cpu_device);
  ImageBatch top = NArray::MakeNArray(input_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  NArray bottom = NArray::Zeros(correct_size);
  ConvInfo conv_info(2, 3, 2, 3);
  ms.SetDevice(gpu_device);
  ImageBatch output = Convolution::ConvBackwardData(top, bottom, weight, conv_info);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
	//printf("%f,",output_ptr.get()[i]);
  }
}


/*
 *  Backward Bias
 */

TEST(ConvBackwardBias, GpuWithoutPaddingSmall) {
  element_t top_diff_raw[] = {8,6,4,2};
  element_t weight_raw[] = {1,2,3,4};
  element_t correct_raw[] = {20};
  Scale top_size{2, 2, 1, 1};
  Scale weight_size{2, 2, 1, 1};
  Scale correct_size{1, 1, 1, 1};
  auto& ms = MinervaSystem::Instance();
  shared_ptr<element_t> input_ptr(new element_t[top_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), top_diff_raw, top_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));
  ms.SetDevice(cpu_device);
  ImageBatch input = NArray::MakeNArray(top_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  ConvInfo conv_info(0, 0, 1, 1);
  ms.SetDevice(gpu_device);
  NArray output = Convolution::ConvBackwardBias(input);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
  }
}



TEST(ConvBackwardBias, GpuWithoutPaddingSmallDepth2) {
  element_t input_raw[] = {1,2,3,4,5,6,7,8};
  element_t correct_raw[] = {10.000000,26.000000};
  auto& ms = MinervaSystem::Instance();
  Scale input_size{2, 2, 2, 1};
  Scale correct_size{2};
  shared_ptr<element_t> input_ptr(new element_t[input_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), input_raw, input_size.Prod() * sizeof(element_t));
  ms.SetDevice(cpu_device);
  ImageBatch input = NArray::MakeNArray(input_size, input_ptr);
  ConvInfo conv_info(0, 0, 1, 1);
  ms.SetDevice(gpu_device);
  NArray output = Convolution::ConvBackwardBias(input);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
    //printf("%f,",output_ptr.get()[i]);
  }
}


TEST(ConvBackwardBias, GpuWithPaddingSmall) {
  element_t input_raw[] = {1,2,3,4};
  element_t correct_raw[] = {10.000000};
  auto& ms = MinervaSystem::Instance();
  Scale input_size{2, 2, 1, 1};
  Scale correct_size{1, 1, 1, 1};
  shared_ptr<element_t> input_ptr(new element_t[input_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), input_raw, input_size.Prod() * sizeof(element_t));
  ms.SetDevice(cpu_device);
  ImageBatch input = NArray::MakeNArray(input_size, input_ptr);
  ms.SetDevice(gpu_device);
  NArray output = Convolution::ConvBackwardBias(input);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
    //printf("%f,",output_ptr.get()[i]);
  }
}


TEST(ConvBackwardBias, GpuWithoutPadding) {
  element_t input_raw[] = {8.59232186e-01, -3.67248891e-01, -6.32162377e-01, -5.90879443e-01, 1.35450058e-01, 1.91089406e-01, 9.29029039e-01, 3.06354194e-01, 4.97813275e-01, 3.07139742e-01, 4.95429619e-01, 9.22613472e-01, -9.83223404e-01, -7.87111247e-01, -4.02592572e-01, 3.12822366e-01, 6.19625105e-01, 7.44351827e-01, 9.29295195e-01, 4.47370694e-01, 2.84950656e-01, 4.34907242e-01, -6.48019856e-02, -3.48830645e-01, -1.20710788e-01, 4.59378165e-01, 9.88029172e-01, 3.53747424e-01, 5.81645036e-01, -6.58171484e-01, -9.46301448e-01, 6.00740488e-01, 8.07445076e-01, -9.50647579e-01, -1.65053631e-02, 5.25103347e-02, 1.92732021e-01, -8.96084910e-01, 7.90179056e-01, 4.56532361e-01, 6.36700023e-01, 4.45505669e-04, 6.20378818e-01, -8.08062949e-01, -5.62099913e-01, -4.82561877e-01, -6.37884921e-02, -8.12535948e-02, 4.19019560e-01, -6.43893988e-01, 6.28997687e-02, -6.64515542e-01, 5.37627837e-01, 8.56341098e-01, 2.18987316e-01, -6.99633011e-01, -2.07465926e-02, -2.45310092e-01, 6.97202824e-01, 8.22194457e-01, -2.32302558e-01, -3.69008193e-01, 1.36788306e-01, -6.24363930e-01, -7.48316912e-01, 3.75191610e-01, 5.99213436e-01, 1.47073130e-01, 9.46459963e-01, 2.68108754e-01, 7.76843450e-01, -9.17048249e-03, -2.96766940e-01, 4.28460737e-01, 7.85823290e-03, -5.48724787e-01, -5.10051120e-01, 5.85601400e-01, -9.65517098e-03, 8.30187347e-01, 8.90743668e-01, 6.64644593e-02, -4.95014811e-01, 4.41724116e-01, -2.65122472e-01, -2.70311418e-03, -5.46849905e-01, -2.92868707e-01, 3.01703573e-01, -3.74134209e-01, 5.37470894e-01, 5.63674207e-01, 7.04818966e-01, 8.99811480e-01, -7.85354176e-01, 8.21450712e-01, -3.27889676e-01, 6.52760854e-01, 7.96201270e-01, -9.14569391e-01, -6.08410002e-01, -4.10997356e-01, 2.53999761e-01, -8.27553790e-01, -7.14109960e-01, 3.16530385e-02, 3.78682659e-01, 7.13251622e-01, 2.94723367e-01, 1.63237351e-01, 4.22231910e-01, -4.95166286e-01, 8.00319367e-01, -1.15412614e-01, -9.58958351e-01, 9.19322028e-01, 3.04450845e-01, 2.64125002e-02, 3.64712766e-01, -2.09192187e-02, 8.52980343e-01, 3.17595443e-02, -8.55680237e-01, 1.35016596e-01, 2.30486367e-01, 8.83092589e-01, -1.69273291e-01, -4.71120051e-01, -8.05213669e-01, -2.83115562e-02, -7.06742743e-02, -9.40481366e-01, 3.88554924e-01, 4.33894225e-01, 4.59622847e-01, -1.71297966e-01, -9.69802310e-01, 8.17950315e-01, 5.78757436e-01, -6.69601662e-01, -3.74428077e-01, 2.21890612e-01, -2.71019427e-01, -6.87922822e-01, -6.45392373e-01, 7.35779342e-01, -4.19810663e-01, 1.70359243e-01, -9.20102482e-02, -1.77643736e-01, 7.65268890e-01, 3.85416030e-01, -4.41453290e-01, -8.71119538e-01, -6.02752772e-01, 8.63365489e-01, 7.08827136e-01, 9.09469469e-01, -8.95493304e-01, 1.58943361e-01, -3.90074667e-02, -9.56582042e-01, -2.52759073e-01, -1.71816398e-01, 2.07814468e-01, 3.43497455e-01, 6.77731401e-01, 5.59052417e-01, -1.98597912e-01, 5.89058463e-01, 7.86248621e-01, -4.75020618e-01, 9.78394015e-01, 7.06614198e-01, 4.62954312e-01, -2.88868751e-01, 7.66578981e-01, 7.35918182e-01, 9.11532892e-01, -9.99785487e-01, -9.66917916e-01, -3.71859885e-01, 9.90632349e-01, -7.02311554e-01, -6.65245763e-01, 5.17144074e-01, -8.60940668e-01, 4.10946877e-01, -6.16694364e-02, -9.79623568e-01, 5.49647726e-01, 5.88402017e-01, -7.00861097e-01, -9.52592736e-01, 5.24127542e-01, -5.52659640e-01, -4.75651204e-01, -8.62609944e-02, -5.00146163e-01, 1.36567123e-01, 6.93885994e-01, -2.43800926e-01, -1.35069767e-01, 6.65238353e-01, -2.57736129e-01, -9.18893456e-01, 1.09342972e-01, -9.75075144e-02, 4.50601953e-01, -2.43098955e-01, 6.81324991e-01, -6.13706128e-02, 1.25286858e-01, 3.22398678e-01, -7.55162650e-02, 2.47273891e-01, -5.56238738e-01, 4.65726234e-01, -2.36635823e-01, -6.10330916e-01, -4.57674450e-01, -5.01549896e-01, -6.95721875e-01, 5.42747408e-01, -4.89176535e-01, -7.44913190e-01, 3.30334307e-01, -1.74390103e-01, 3.35535533e-01, 3.19627034e-01, -3.89244656e-01, -5.97551518e-01, -5.55945747e-01, -7.60058273e-01, -9.25709118e-01, -9.31736833e-01, -5.39006904e-01, -5.43292587e-01, 2.49821244e-01, 7.85122371e-01, 5.59456032e-01, 4.42902537e-01, -3.79115682e-01, -2.73833167e-01, -6.07836432e-01, 8.70983596e-01, 1.23468000e-01, 6.34583074e-01, -3.02172038e-01, 5.99428526e-01, -7.91791075e-01, 4.24240330e-01, 8.34896992e-01, 6.07170737e-01, -3.45773707e-01, -4.89785641e-01, -9.99565129e-03, -1.72778091e-01, -1.50125809e-01, -8.51243390e-01, 2.06781303e-01, 4.94399467e-01, 5.95152453e-01, -2.36998955e-01, 5.94316306e-01, -5.64052608e-02, 4.42798342e-01, -6.21574621e-01, -1.30808581e-01, 6.46936218e-01, 6.52545256e-01, -6.20949033e-01, -9.59795660e-01, 4.06982772e-01, -3.05459761e-01, -1.60992368e-01, 5.36177806e-01, 9.25756133e-01, 7.85130614e-01, -7.30115467e-01, 5.95609430e-01, 3.64181215e-01, 6.01057742e-02, 7.31963310e-01, 5.06496191e-01, -8.13594826e-01, -3.41121136e-01, -1.75274609e-01};
  element_t correct_raw[] = {8.537814,-2.465966,3.392074};
  auto& ms = MinervaSystem::Instance();
  Scale input_size{8, 6, 3, 2};
  Scale correct_size{3};
  shared_ptr<element_t> input_ptr(new element_t[input_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), input_raw, input_size.Prod() * sizeof(element_t));
  ms.SetDevice(cpu_device);
  ImageBatch input = NArray::MakeNArray(input_size, input_ptr);
  ConvInfo conv_info(0, 0, 1, 1);
  ms.SetDevice(gpu_device);
  NArray output = Convolution::ConvBackwardBias(input);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
    //printf("%f,",output_ptr.get()[i]);
  }
}

TEST(ConvBackwardBias, GpuWithPadding) {
  element_t input_raw[] = {5.25103347e-02, 1.92732021e-01, -8.96084910e-01, 7.90179056e-01, 4.56532361e-01, 6.36700023e-01, 4.45505669e-04, -6.37884921e-02, -8.12535948e-02, 4.19019560e-01, -6.43893988e-01, 6.28997687e-02, -6.64515542e-01, 5.37627837e-01, -2.45310092e-01, 6.97202824e-01, 8.22194457e-01, -2.32302558e-01, -3.69008193e-01, 1.36788306e-01, -6.24363930e-01, 9.46459963e-01, 2.68108754e-01, 7.76843450e-01, -9.17048249e-03, -2.96766940e-01, 4.28460737e-01, 7.85823290e-03, 8.30187347e-01, 8.90743668e-01, 6.64644593e-02, -4.95014811e-01, 4.41724116e-01, -2.65122472e-01, -2.70311418e-03, 5.37470894e-01, 5.63674207e-01, 7.04818966e-01, 8.99811480e-01, -7.85354176e-01, 8.21450712e-01, -3.27889676e-01, 5.59052417e-01, -1.98597912e-01, 5.89058463e-01, 7.86248621e-01, -4.75020618e-01, 9.78394015e-01, 7.06614198e-01, 9.11532892e-01, -9.99785487e-01, -9.66917916e-01, -3.71859885e-01, 9.90632349e-01, -7.02311554e-01, -6.65245763e-01, -9.79623568e-01, 5.49647726e-01, 5.88402017e-01, -7.00861097e-01, -9.52592736e-01, 5.24127542e-01, -5.52659640e-01, 6.93885994e-01, -2.43800926e-01, -1.35069767e-01, 6.65238353e-01, -2.57736129e-01, -9.18893456e-01, 1.09342972e-01, -6.13706128e-02, 1.25286858e-01, 3.22398678e-01, -7.55162650e-02, 2.47273891e-01, -5.56238738e-01, 4.65726234e-01, -6.95721875e-01, 5.42747408e-01, -4.89176535e-01, -7.44913190e-01, 3.30334307e-01, -1.74390103e-01, 3.35535533e-01, -6.26250490e-01, -4.07823970e-01, 5.97030118e-01, -4.10443414e-01, 3.94243187e-01, -4.54081542e-01, 8.25056903e-01, -2.81417189e-01, 3.64354606e-01, 8.42783940e-01, -7.10151312e-01, -8.00251230e-01, -1.76794447e-01, 9.50250742e-01, -3.67423692e-01, 2.20271553e-01, -5.97610574e-01, 3.83795433e-01, -5.10746058e-01, 3.60743392e-01, -2.81245422e-02, 6.82296085e-01, -6.07151251e-01, -3.38833141e-01, 8.93259770e-01, 1.21436991e-02, -1.93168283e-01, -9.45876923e-01, -3.31218962e-01, -8.64580115e-01, -9.92351503e-01, -9.18064393e-01, -3.02090269e-01, -8.16091378e-01, 4.06314529e-02, 5.24922383e-02, -1.20153861e-01, 3.23110491e-01, -7.30429651e-01, 5.75698010e-01, -7.24044598e-01, 2.65846595e-01, 5.78064850e-01, 3.24041516e-01, 4.23024858e-01, 7.75847324e-01, -7.16649418e-01, -7.04859753e-01, -3.48138314e-01, 2.32015221e-01, 9.16999718e-01, -4.17894767e-01, 3.73356925e-01, -9.15543539e-01, -8.74992737e-01, 6.28797391e-01, 6.70704305e-01, -6.64622476e-02, -1.57428024e-01, 1.41703106e-01, 4.78111913e-01, -8.89833183e-01, 2.48361298e-01, 1.71500734e-01, -1.03241151e-01, -2.92539465e-01, 8.67050469e-01, -4.65488136e-01, -4.37401239e-01, 9.81192729e-03, 1.76624177e-01, 4.63404565e-01, -6.48977854e-01, 2.10775692e-02, 5.69191679e-04, 7.85535264e-01, -2.34634585e-01, 8.96057273e-01, -3.05549564e-01, 3.67786398e-01, 6.49269763e-01, -2.74940115e-02, 9.68351743e-01, 2.07628076e-01, 1.85028318e-01, -3.49798716e-01, 8.73610682e-01, -8.08034049e-01, 7.66591492e-01, 1.36035466e-01, -8.76153051e-01, -9.42090961e-01, 2.54198007e-01, 2.09278522e-01, -8.43584950e-01, 5.45907125e-01, -7.13366751e-01, -7.26307843e-02, 4.97412749e-01, 7.79227666e-01, -2.41219689e-01, -4.15127476e-01, 1.85804799e-02, 6.56272008e-02, -7.89156759e-01, 5.95946891e-01, -5.11510156e-01, 6.07075484e-01, -4.03649869e-01, -6.54580737e-02, 8.65639316e-01, 8.19513569e-01, 2.93617672e-01, -3.35847054e-01, -7.71555326e-01, 1.42208982e-01, -3.96017041e-01, -6.12988788e-01, 1.29411384e-01, -1.88205315e-01, 3.31118167e-01, -6.05975908e-01, -5.16439080e-01, 2.46344907e-01, 5.97476702e-01, 8.92727341e-02, 8.77082477e-01, 4.78201578e-01, -9.46106323e-01, -2.35208227e-01, -9.78947208e-01, -8.69535860e-01, 3.62785391e-01, 7.88573716e-01, 4.13573947e-01, -4.22013528e-02, -5.68775015e-01, -8.36467872e-01, 3.46404408e-01, 9.89558378e-01, 8.96711938e-02, 9.67284551e-01, 4.71404282e-01, -8.13833601e-01, -4.15551966e-01, -4.53903666e-01, -8.57667173e-01, -5.76563967e-01, -4.14422920e-01, -2.87165417e-01, 9.12734981e-01, 3.20487724e-01, 9.01024809e-01, -8.06264818e-01, -4.12511687e-01, 2.99419879e-01, -1.58010723e-01, -8.50696651e-01, 4.77613710e-01, 1.70740085e-01, -3.10658805e-01, -4.22856328e-01, -4.71636816e-01, -4.46162130e-01, 6.84712020e-01, -6.60755426e-01, -4.95826747e-01, 1.83750401e-01};
  element_t correct_raw[] = {10.754934,-2.306509,-9.067871};
  auto& ms = MinervaSystem::Instance();
  Scale input_size{7, 6, 3, 2};
  Scale correct_size{3};
  shared_ptr<element_t> input_ptr(new element_t[input_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), input_raw, input_size.Prod() * sizeof(element_t));
  ms.SetDevice(cpu_device);
  ImageBatch input = NArray::MakeNArray(input_size, input_ptr);
  ms.SetDevice(gpu_device);
  NArray output = Convolution::ConvBackwardBias(input);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i] , 0.001);
    //printf("%f,",output_ptr.get()[i]);
  }
}


/*
 * Backward Filter
 */

TEST(ConvBackwardFilter, GpuWithoutPaddingSmall) {
  element_t top_diff_raw[] = {8,6,4,2};
  element_t weight_raw[] = {1,2,3,4};
  element_t bottom_raw[] = {10,11,12,13,14,15,16,17,18};
  element_t correct_raw[] = {306,286,246,226};
  Scale top_size{2, 2, 1, 1};
  Scale weight_size{2, 2, 1, 1};
  Scale bottom_size{3, 3, 1, 1};
  Scale correct_size{2, 2, 1, 1};
  auto& ms = MinervaSystem::Instance();
  shared_ptr<element_t> input_ptr(new element_t[top_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> bottom_ptr(new element_t[bottom_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), top_diff_raw, top_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));
  memcpy(bottom_ptr.get(), bottom_raw, bottom_size.Prod() * sizeof(element_t));
  ms.SetDevice(cpu_device);
  ImageBatch input = NArray::MakeNArray(top_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  ImageBatch bottom = NArray::MakeNArray(bottom_size, bottom_ptr);

  ConvInfo conv_info(0, 0, 1, 1);
  ms.SetDevice(gpu_device);
  ImageBatch output = Convolution::ConvBackwardFilter(input, bottom, weight, conv_info);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
	  //printf("%f,",output_ptr.get()[i]);
  }
}

TEST(ConvBackwardFilter, GpuWithPaddingSmall) {
  element_t top_diff_raw[] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24};
  element_t weight_raw[] = {1,2,3,4,11,12,13,14};
  element_t bottom_raw[] = {10,11,12,13,14,15,16,17,18,19};
  element_t correct_raw[] = {217.000000,204.000000,191.000000,178.000000,601.000000,564.000000,527.000000,490.000000};
  Scale top_size{3, 4, 2, 1};
  Scale weight_size{2, 2, 1, 2};
  Scale bottom_size{2, 5, 1, 1};
  Scale correct_size{2, 2, 1, 2};
  auto& ms = MinervaSystem::Instance();
  shared_ptr<element_t> input_ptr(new element_t[top_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> bottom_ptr(new element_t[bottom_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), top_diff_raw, top_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));
  memcpy(bottom_ptr.get(), bottom_raw, bottom_size.Prod() * sizeof(element_t));
  ms.SetDevice(cpu_device);
  ImageBatch input = NArray::MakeNArray(top_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  ImageBatch bottom = NArray::MakeNArray(bottom_size, bottom_ptr);

  ConvInfo conv_info(3, 2, 3, 2);
  ms.SetDevice(gpu_device);
  ImageBatch output = Convolution::ConvBackwardFilter(input, bottom, weight, conv_info);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
	//printf("%f,",output_ptr.get()[i]);
  }
}


TEST(ConvBackwardFilter, GpuWithoutPadding) {
  element_t bottom_raw[] = {8.59232186e-01, -3.67248891e-01, -6.32162377e-01, -5.90879443e-01, 1.35450058e-01, 1.91089406e-01, 9.29029039e-01, 3.06354194e-01, 4.97813275e-01, 3.07139742e-01, 4.95429619e-01, 9.22613472e-01, -9.83223404e-01, -7.87111247e-01, -4.02592572e-01, 3.12822366e-01, 6.19625105e-01, 7.44351827e-01, 9.29295195e-01, 4.47370694e-01, 2.84950656e-01, 4.34907242e-01, -6.48019856e-02, -3.48830645e-01, -1.20710788e-01, 4.59378165e-01, 9.88029172e-01, 3.53747424e-01, 5.81645036e-01, -6.58171484e-01, -9.46301448e-01, 6.00740488e-01, 8.07445076e-01, -9.50647579e-01, -1.65053631e-02, 5.25103347e-02, 1.92732021e-01, -8.96084910e-01, 7.90179056e-01, 4.56532361e-01, 6.36700023e-01, 4.45505669e-04, 6.20378818e-01, -8.08062949e-01, -5.62099913e-01, -4.82561877e-01, -6.37884921e-02, -8.12535948e-02, 4.19019560e-01, -6.43893988e-01, 6.28997687e-02, -6.64515542e-01, 5.37627837e-01, 8.56341098e-01, 2.18987316e-01, -6.99633011e-01, -2.07465926e-02, -2.45310092e-01, 6.97202824e-01, 8.22194457e-01, -2.32302558e-01, -3.69008193e-01, 1.36788306e-01, -6.24363930e-01, -7.48316912e-01, 3.75191610e-01, 5.99213436e-01, 1.47073130e-01, 9.46459963e-01, 2.68108754e-01, 7.76843450e-01, -9.17048249e-03, -2.96766940e-01, 4.28460737e-01, 7.85823290e-03, -5.48724787e-01, -5.10051120e-01, 5.85601400e-01, -9.65517098e-03, 8.30187347e-01, 8.90743668e-01, 6.64644593e-02, -4.95014811e-01, 4.41724116e-01, -2.65122472e-01, -2.70311418e-03, -5.46849905e-01, -2.92868707e-01, 3.01703573e-01, -3.74134209e-01, 5.37470894e-01, 5.63674207e-01, 7.04818966e-01, 8.99811480e-01, -7.85354176e-01, 8.21450712e-01, -3.27889676e-01, 6.52760854e-01, 7.96201270e-01, -9.14569391e-01, -6.08410002e-01, -4.10997356e-01, 2.53999761e-01, -8.27553790e-01, -7.14109960e-01, 3.16530385e-02, 3.78682659e-01, 7.13251622e-01, 2.94723367e-01, 1.63237351e-01, 4.22231910e-01, -4.95166286e-01, 8.00319367e-01, -1.15412614e-01, -9.58958351e-01, 9.19322028e-01, 3.04450845e-01, 2.64125002e-02, 3.64712766e-01, -2.09192187e-02, 8.52980343e-01, 3.17595443e-02, -8.55680237e-01, 1.35016596e-01, 2.30486367e-01, 8.83092589e-01, -1.69273291e-01, -4.71120051e-01, -8.05213669e-01, -2.83115562e-02, -7.06742743e-02, -9.40481366e-01, 3.88554924e-01, 4.33894225e-01, 4.59622847e-01, -1.71297966e-01, -9.69802310e-01, 8.17950315e-01, 5.78757436e-01, -6.69601662e-01, -3.74428077e-01, 2.21890612e-01, -2.71019427e-01, -6.87922822e-01, -6.45392373e-01, 7.35779342e-01, -4.19810663e-01, 1.70359243e-01, -9.20102482e-02, -1.77643736e-01, 7.65268890e-01, 3.85416030e-01, -4.41453290e-01, -8.71119538e-01, -6.02752772e-01, 8.63365489e-01, 7.08827136e-01, 9.09469469e-01, -8.95493304e-01, 1.58943361e-01, -3.90074667e-02, -9.56582042e-01, -2.52759073e-01, -1.71816398e-01, 2.07814468e-01, 3.43497455e-01, 6.77731401e-01, 5.59052417e-01, -1.98597912e-01, 5.89058463e-01, 7.86248621e-01, -4.75020618e-01, 9.78394015e-01, 7.06614198e-01, 4.62954312e-01, -2.88868751e-01, 7.66578981e-01, 7.35918182e-01, 9.11532892e-01, -9.99785487e-01, -9.66917916e-01, -3.71859885e-01, 9.90632349e-01, -7.02311554e-01, -6.65245763e-01, 5.17144074e-01, -8.60940668e-01, 4.10946877e-01, -6.16694364e-02, -9.79623568e-01, 5.49647726e-01, 5.88402017e-01, -7.00861097e-01, -9.52592736e-01, 5.24127542e-01, -5.52659640e-01, -4.75651204e-01, -8.62609944e-02, -5.00146163e-01, 1.36567123e-01, 6.93885994e-01, -2.43800926e-01, -1.35069767e-01, 6.65238353e-01, -2.57736129e-01, -9.18893456e-01, 1.09342972e-01, -9.75075144e-02, 4.50601953e-01, -2.43098955e-01, 6.81324991e-01, -6.13706128e-02, 1.25286858e-01, 3.22398678e-01, -7.55162650e-02, 2.47273891e-01, -5.56238738e-01, 4.65726234e-01, -2.36635823e-01, -6.10330916e-01, -4.57674450e-01, -5.01549896e-01, -6.95721875e-01, 5.42747408e-01, -4.89176535e-01, -7.44913190e-01, 3.30334307e-01, -1.74390103e-01, 3.35535533e-01, 3.19627034e-01, -3.89244656e-01, -5.97551518e-01, -5.55945747e-01, -7.60058273e-01, -9.25709118e-01, -9.31736833e-01, -5.39006904e-01, -5.43292587e-01, 2.49821244e-01, 7.85122371e-01, 5.59456032e-01, 4.42902537e-01, -3.79115682e-01, -2.73833167e-01, -6.07836432e-01, 8.70983596e-01, 1.23468000e-01, 6.34583074e-01, -3.02172038e-01, 5.99428526e-01, -7.91791075e-01, 4.24240330e-01, 8.34896992e-01, 6.07170737e-01, -3.45773707e-01, -4.89785641e-01, -9.99565129e-03, -1.72778091e-01, -1.50125809e-01, -8.51243390e-01, 2.06781303e-01, 4.94399467e-01, 5.95152453e-01, -2.36998955e-01, 5.94316306e-01, -5.64052608e-02, 4.42798342e-01, -6.21574621e-01, -1.30808581e-01, 6.46936218e-01, 6.52545256e-01, -6.20949033e-01, -9.59795660e-01, 4.06982772e-01, -3.05459761e-01, -1.60992368e-01, 5.36177806e-01, 9.25756133e-01, 7.85130614e-01, -7.30115467e-01, 5.95609430e-01, 3.64181215e-01, 6.01057742e-02, 7.31963310e-01, 5.06496191e-01, -8.13594826e-01, -3.41121136e-01, -1.75274609e-01};

  element_t weight_raw[] = {-2.99421235e+00, 5.85381379e-01, 1.09536925e+00, -8.02315431e-01, -6.21006855e-01, -1.47845127e-01, 4.86479403e-01, -2.17717723e+00, 2.99648504e+00, 4.39632527e-02, -4.15997727e-02, -1.87875147e+00, -1.22347191e+00, 1.79109036e+00, -1.23133024e+00, 1.18272956e+00, -1.36224463e+00, 2.47517071e+00, -1.20876460e+00, 2.33915863e+00, 2.68033376e+00, -1.98652306e+00, -8.44251566e-01, 1.09306382e+00, 2.52835182e+00, -2.13045394e+00, -2.40075369e+00, -5.30383341e-01, 2.85075222e+00, -2.75096075e+00, -1.87851423e+00, 6.52607928e-01, -2.47668771e+00, -1.10227108e+00, 6.60814659e-01, -1.79283172e+00, 1.15138630e+00, -1.53223817e+00, 1.08223018e+00, -8.43736265e-02, -1.43703113e+00, -1.30355808e+00, 2.43270972e+00, -1.34494388e+00, 2.04688826e+00, -1.82145375e+00, -1.01649942e+00, 2.67977931e+00, 3.64310972e-02, -5.79504850e-01, -2.83763077e+00, 7.30642137e-01, -9.15908959e-01, -1.33920463e+00, -2.61567136e+00, -9.93656887e-01, -2.59374035e+00, -2.97705451e+00, -2.75419318e+00, -9.06270806e-01, -2.44827413e+00, 1.21894359e-01, -1.70550112e+00, 2.94999927e+00, -1.39687703e+00, 1.08100832e+00, 1.57476715e-01, -3.60461582e-01, 9.69331474e-01, -2.19128895e+00, 1.72709403e+00, -2.17213379e+00, 7.97539786e-01, -1.71800785e+00, -2.85974811e+00, 7.61603840e-01, 8.52982359e-01, 8.52620021e-01, 2.18772540e+00, -9.76791579e-01, -5.34249680e-01, 6.61912103e-01, 2.64505914e+00, -2.08753638e+00, -1.89565196e+00, -2.07337027e+00, 1.27694596e+00, 2.56789897e+00, -4.63876920e-01, 2.71063582e-01, -1.06566621e+00, -2.03577190e+00, 1.21891215e+00, 1.38149044e+00, 2.76242723e+00, -7.77056575e-01, 1.30019035e+00, 2.91636731e+00, -2.33539465e+00, 1.54937129e+00, -2.05467527e+00, 1.89861153e+00, 3.24639277e-01, 4.90261325e-01, 2.61687350e+00, -3.93913469e-01, -6.52368818e-02, 9.96782801e-01, 7.80924006e-01, -2.21877150e+00, -8.76936173e-01, 8.10740308e-01, 2.51373517e+00, -2.45239968e+00, -2.57350725e+00, -5.17730183e-01, -1.70615298e+00, 1.18191789e-01, 3.51084133e-01, -1.57799016e-01, -1.70476727e+00, -1.56336669e+00, -1.69957048e+00, 9.34142269e-01, 2.07836070e+00, 2.58278636e+00, 1.80183310e+00, 1.08435507e+00, -1.75645825e+00, 1.44995835e+00, 1.18142751e+00, -7.09443154e-01, 2.10071475e+00, 1.68667087e-01, 2.35805441e+00, 1.92335625e+00, -1.62852828e+00, 1.92374382e+00, -2.16863145e+00, -1.05195029e-01, -2.10713666e+00, -3.10235670e-01, 9.95738834e-01, 1.73419455e+00, 9.72124549e-01, 1.26907457e+00, 2.32754197e+00, -2.14994825e+00, -2.11457926e+00, -1.04441494e+00, -2.80875702e+00, 1.12657737e+00, 1.58838027e+00, -8.99943488e-01, 6.96045664e-01, 2.75099915e+00, -1.25368430e+00, 1.12007078e+00, -2.74663062e+00, -2.62497821e+00, 1.88639217e+00, -3.80289825e-01, -6.47589408e-01, -1.01611392e+00, -2.54047030e-01, 2.01211291e+00, -1.99386743e-01, -4.72284073e-01, 4.25109318e-01, 1.43433574e+00, -2.66949955e+00, 7.45083894e-01, 7.26361966e-01, -2.99333681e+00, 6.17361038e-01, -2.75888753e+00, 5.14502201e-01, -3.09723452e-01, -8.77618394e-01, 2.60115141e+00, -1.39646441e+00, -1.31220372e+00, 2.94357819e-02, 8.80836712e-01, 2.82344057e+00, -2.78474712e+00, -4.60800803e-01, 5.29872532e-01, 1.39021370e+00, -1.94693356e+00, 6.32327077e-02, 1.70757504e-03, 2.35660579e+00, -7.03903755e-01, 9.77183021e-01, -2.71913064e+00, 1.50733970e+00, -7.87288246e-01, 2.68817182e+00, -9.16648691e-01, 1.10335919e+00, 1.94780929e+00, -8.24820346e-02, 2.90505523e+00, 6.22884229e-01, 1.55774899e+00, 1.10710017e+00, 2.59449736e+00, 2.69871283e+00, 2.94066677e+00, -2.24306770e+00, 2.85960370e+00, -1.62536606e+00, -1.88366146e+00, 5.52685321e-02, 1.82986096e-01, -1.30416455e+00, -1.13903079e+00, -1.14069374e+00, -1.40166668e+00, 5.60586905e-01, -1.69719377e+00, -5.85702494e-01, -1.26863256e+00, -1.95695511e+00};

  element_t top_raw[] = {-1.53458012e-01, -7.65405332e+00, 4.98830497e+00, 2.04852002e+00, -3.82358333e+00, 7.36837003e+00, 8.39924023e+00, -4.62756444e+00, -5.50727587e+00, 1.20214505e+01, -1.53043815e+01, 1.11244327e+00, 7.04805004e-01, 2.29797806e-01, -7.32889433e+00, 1.47271564e+01, 1.01044780e+01, 2.41905064e+00, -5.31388064e+00, -3.27185811e+00, -5.79821618e+00, 3.00265788e-01, 1.47316324e+00, -4.31265309e+00, -1.16285290e+01, -5.65152968e+00, -1.26282823e+00, -7.59112465e+00, -8.72511524e+00, -5.25022006e+00, -7.82986638e-01, 6.10214152e+00, 1.61352078e+01, -4.04867987e-01, -1.31349268e+01, -2.44915779e-01, 1.39773955e+01, 3.66806225e+00, 5.80719452e+00, 6.22372275e+00, 1.61941934e+00, 1.61922030e+00, 4.08148270e+00, -5.31495425e+00, 3.31723523e+00, 1.48087048e+01, 5.12534403e+00, -8.85206695e+00, 3.47283117e+00, 8.13983753e+00, -6.09539078e-02, -2.29926111e+00, 5.15988338e+00, -1.18856035e+01, -7.12207532e+00, 6.25921427e-01, 2.04809803e+00, 2.17005161e+00, 3.07331189e+00, 1.32922857e+00, -9.02002841e+00, -3.46313153e+00, -1.68674612e+00, -5.82162868e+00, 6.27101890e+00, 3.68211379e+00, 7.06585228e-01, 1.61090449e+00, 5.32800254e+00, 5.92726186e+00, 7.48984518e+00, -3.15173559e+00, -4.97384231e-01, 6.95062311e+00, 1.38288414e+01, -3.14463537e+00, -2.77009473e+00, 5.24369450e+00, 7.55776522e+00, -1.11608027e+01, 6.57839023e+00, -4.40262046e+00, 1.09980762e+00, 1.40552491e+00, -1.92546614e+01, -1.08176358e+00, 1.14700068e+00, 2.91672461e+00, -3.09855249e+00, -8.76800761e-01, -1.50497319e+01, 3.63177760e+00, 5.45905926e+00, 1.92832976e-01, -1.20174465e+01, -1.99778930e+00, -4.32951502e+00, 1.49937736e+00, 2.32108850e+00, -3.67743356e+00, -3.04202120e+00, -1.11109333e+00, -2.60361444e-01, 3.16173660e-01, 2.45348885e+00, -9.83839821e+00, -1.07808297e+01, 9.32800709e+00, -2.67422968e+00, -5.28735861e+00, -5.76634320e+00, 5.89462610e+00, -9.91125411e-01, 1.34330406e+01, -1.49107008e+01, -5.03363614e+00, 1.12514116e+00, -3.32207401e+00, 6.11599114e+00, 1.11681283e+00, 4.11900416e+00, -4.21087862e+00, 4.36223246e+00, -7.76174330e+00, 1.45358128e+00, 4.93798049e+00, 1.13569034e+01, 4.94783663e+00, -4.44187478e+00, -3.27488160e+00, 6.61695509e+00, -8.27047693e-01, 3.13530944e+00, -2.92434481e+00, -4.27918564e-01, -1.18010988e+01, 1.06067542e+00, -6.99189526e+00, 7.01859887e+00, 7.34324150e+00, 2.28063152e+00, 1.16676194e+00, -6.16082444e+00, -4.55011217e+00, -1.55240377e+01, -6.96617531e+00, 7.84952584e-03, -6.58186876e+00, -1.15664570e+00, 1.61505289e+00, 1.23032964e+00, -2.69841882e+00, 2.99208490e+00, 3.77462452e+00, -2.27055021e+00, 1.14624322e+00, -1.64543438e+00, 2.79936201e+00, -1.79692494e+01, -8.04918516e+00};

  element_t correct_raw[] = {-87.839737,55.670185,-2.760406,-5.037184,-29.532505,-16.696562,35.585823,-35.409763,55.847198,-12.123655,-5.045956,-58.838722,-10.460643,64.943695,-13.401913,36.588478,-21.025944,19.812962,-14.492578,35.101135,39.885696,-5.493200,-13.266821,3.828527,28.689999,2.148367,-22.143036,15.647212,19.494331,-26.957058,-14.216600,18.461151,-23.361153,14.402693,-29.035461,-11.999926,-13.112941,9.915014,25.131447,-37.037628,-47.017479,-30.786623,50.230354,-9.698263,23.699821,-11.928401,35.875587,20.286373,1.065355,-32.647820,-34.974159,20.347515,5.448040,-1.460605,-49.710472,-18.918600,-46.167141,-37.300568,-14.192636,-3.354599,11.379536,-6.960431,4.541770,17.439545,-10.376041,3.371535,-0.848792,17.778641,1.724992,-16.552511,19.132044,-23.863392,-10.383378,-20.947819,-0.630253,-23.926777,15.440426,-15.611677,-17.771730,15.887785,-47.121540,5.100863,43.666832,3.889046,-38.619736,-42.933716,-36.388340,41.083237,34.993313,-35.070477,4.692018,-43.588646,26.656734,27.559555,16.748703,10.674379,19.890995,43.985317,-38.925514,20.244083,-58.822952,17.664349,24.420860,20.843430,80.021469,16.170225,6.770903,-19.752224,-10.814628,-69.303635,-18.710674,49.350380,55.770599,-11.051724,-15.561520,0.656210,-37.447792,-24.433018,8.804070,12.136912,12.660419,0.621016,-53.088398,5.070529,62.691254,52.780792,49.502029,-23.385761,-48.703609,18.834047,24.661079,-2.795620,29.689743,14.102832,-14.084435,34.291759,18.688787,2.298650,-30.957550,-6.305978,-46.689964,-26.865265,41.511147,28.068226,-5.760167,16.610649,30.802259,-30.006382,-33.024563,-10.600061,-43.476139,6.808041,12.825454,15.900805,9.544801,10.004972,-25.930882,-3.735494,-5.218906,-41.269180,16.214556,32.120453,5.388186,-10.956462,17.061073,6.588340,19.301245,5.965245,-12.849375,16.033880,-11.121034,1.802675,-6.669435,-3.816042,26.183525,-2.271964,-0.275114,-13.881083,-3.661838,-25.868546,-36.923176,-3.584579,35.971779,31.142235,49.301235,-54.468193,-22.957298,48.690342,72.248535,24.877382,-32.391319,-7.476780,-6.798456,11.218929,18.607216,-30.798222,30.793110,-6.350722,27.036694,2.408312,31.936998,5.557388,-4.325306,13.619703,-22.029459,28.251791,36.107342,19.902391,40.932384,48.550446,31.950968,54.364944,-20.795389,-36.436943,24.947496,-0.428848,-4.887825,-10.809711,-25.472151,-0.949390,10.155606,-0.352958,8.584686,21.947765,-47.293579};

  auto& ms = MinervaSystem::Instance();
  Scale bottom_size{8, 6, 3, 2};
  Scale weight_size{5, 3, 3, 5};
  Scale top_size{4, 4, 5, 2};
  shared_ptr<element_t> bottom_ptr(new element_t[bottom_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> top_ptr(new element_t[top_size.Prod()], [](element_t* ptr) { delete[] ptr; });

  memcpy(bottom_ptr.get(), bottom_raw, bottom_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));
  memcpy(top_ptr.get(), top_raw, top_size.Prod() * sizeof(element_t));

  ms.SetDevice(cpu_device);
  NArray bottom = NArray::MakeNArray(bottom_size, bottom_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  NArray top = NArray::MakeNArray(top_size, top_ptr);
  ConvInfo conv_info(0, 0, 1, 1);
  ms.SetDevice(gpu_device);
  ImageBatch output = Convolution::ConvBackwardFilter(top, bottom, weight, conv_info);
  auto output_ptr = output.Get();
  for (int i = 0; i < weight_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
	//printf("%f,",output_ptr.get()[i]);
  }
}

TEST(ConvBackwardFilter, GpuWithPadding) {
  element_t bottom_raw[] = {5.25103347e-02, 1.92732021e-01, -8.96084910e-01, 7.90179056e-01, 4.56532361e-01, 6.36700023e-01, 4.45505669e-04, -6.37884921e-02, -8.12535948e-02, 4.19019560e-01, -6.43893988e-01, 6.28997687e-02, -6.64515542e-01, 5.37627837e-01, -2.45310092e-01, 6.97202824e-01, 8.22194457e-01, -2.32302558e-01, -3.69008193e-01, 1.36788306e-01, -6.24363930e-01, 9.46459963e-01, 2.68108754e-01, 7.76843450e-01, -9.17048249e-03, -2.96766940e-01, 4.28460737e-01, 7.85823290e-03, 8.30187347e-01, 8.90743668e-01, 6.64644593e-02, -4.95014811e-01, 4.41724116e-01, -2.65122472e-01, -2.70311418e-03, 5.37470894e-01, 5.63674207e-01, 7.04818966e-01, 8.99811480e-01, -7.85354176e-01, 8.21450712e-01, -3.27889676e-01, 5.59052417e-01, -1.98597912e-01, 5.89058463e-01, 7.86248621e-01, -4.75020618e-01, 9.78394015e-01, 7.06614198e-01, 9.11532892e-01, -9.99785487e-01, -9.66917916e-01, -3.71859885e-01, 9.90632349e-01, -7.02311554e-01, -6.65245763e-01, -9.79623568e-01, 5.49647726e-01, 5.88402017e-01, -7.00861097e-01, -9.52592736e-01, 5.24127542e-01, -5.52659640e-01, 6.93885994e-01, -2.43800926e-01, -1.35069767e-01, 6.65238353e-01, -2.57736129e-01, -9.18893456e-01, 1.09342972e-01, -6.13706128e-02, 1.25286858e-01, 3.22398678e-01, -7.55162650e-02, 2.47273891e-01, -5.56238738e-01, 4.65726234e-01, -6.95721875e-01, 5.42747408e-01, -4.89176535e-01, -7.44913190e-01, 3.30334307e-01, -1.74390103e-01, 3.35535533e-01, -6.26250490e-01, -4.07823970e-01, 5.97030118e-01, -4.10443414e-01, 3.94243187e-01, -4.54081542e-01, 8.25056903e-01, -2.81417189e-01, 3.64354606e-01, 8.42783940e-01, -7.10151312e-01, -8.00251230e-01, -1.76794447e-01, 9.50250742e-01, -3.67423692e-01, 2.20271553e-01, -5.97610574e-01, 3.83795433e-01, -5.10746058e-01, 3.60743392e-01, -2.81245422e-02, 6.82296085e-01, -6.07151251e-01, -3.38833141e-01, 8.93259770e-01, 1.21436991e-02, -1.93168283e-01, -9.45876923e-01, -3.31218962e-01, -8.64580115e-01, -9.92351503e-01, -9.18064393e-01, -3.02090269e-01, -8.16091378e-01, 4.06314529e-02, 5.24922383e-02, -1.20153861e-01, 3.23110491e-01, -7.30429651e-01, 5.75698010e-01, -7.24044598e-01, 2.65846595e-01, 5.78064850e-01, 3.24041516e-01, 4.23024858e-01, 7.75847324e-01, -7.16649418e-01, -7.04859753e-01, -3.48138314e-01, 2.32015221e-01, 9.16999718e-01, -4.17894767e-01, 3.73356925e-01, -9.15543539e-01, -8.74992737e-01, 6.28797391e-01, 6.70704305e-01, -6.64622476e-02, -1.57428024e-01, 1.41703106e-01, 4.78111913e-01, -8.89833183e-01, 2.48361298e-01, 1.71500734e-01, -1.03241151e-01, -2.92539465e-01, 8.67050469e-01, -4.65488136e-01, -4.37401239e-01, 9.81192729e-03, 1.76624177e-01, 4.63404565e-01, -6.48977854e-01, 2.10775692e-02, 5.69191679e-04, 7.85535264e-01, -2.34634585e-01, 8.96057273e-01, -3.05549564e-01, 3.67786398e-01, 6.49269763e-01, -2.74940115e-02, 9.68351743e-01, 2.07628076e-01, 1.85028318e-01, -3.49798716e-01, 8.73610682e-01, -8.08034049e-01, 7.66591492e-01, 1.36035466e-01, -8.76153051e-01, -9.42090961e-01, 2.54198007e-01, 2.09278522e-01, -8.43584950e-01, 5.45907125e-01, -7.13366751e-01, -7.26307843e-02, 4.97412749e-01, 7.79227666e-01, -2.41219689e-01, -4.15127476e-01, 1.85804799e-02, 6.56272008e-02, -7.89156759e-01, 5.95946891e-01, -5.11510156e-01, 6.07075484e-01, -4.03649869e-01, -6.54580737e-02, 8.65639316e-01, 8.19513569e-01, 2.93617672e-01, -3.35847054e-01, -7.71555326e-01, 1.42208982e-01, -3.96017041e-01, -6.12988788e-01, 1.29411384e-01, -1.88205315e-01, 3.31118167e-01, -6.05975908e-01, -5.16439080e-01, 2.46344907e-01, 5.97476702e-01, 8.92727341e-02, 8.77082477e-01, 4.78201578e-01, -9.46106323e-01, -2.35208227e-01, -9.78947208e-01, -8.69535860e-01, 3.62785391e-01, 7.88573716e-01, 4.13573947e-01, -4.22013528e-02, -5.68775015e-01, -8.36467872e-01, 3.46404408e-01, 9.89558378e-01, 8.96711938e-02, 9.67284551e-01, 4.71404282e-01, -8.13833601e-01, -4.15551966e-01, -4.53903666e-01, -8.57667173e-01, -5.76563967e-01, -4.14422920e-01, -2.87165417e-01, 9.12734981e-01, 3.20487724e-01, 9.01024809e-01, -8.06264818e-01, -4.12511687e-01, 2.99419879e-01, -1.58010723e-01, -8.50696651e-01, 4.77613710e-01, 1.70740085e-01, -3.10658805e-01, -4.22856328e-01, -4.71636816e-01, -4.46162130e-01, 6.84712020e-01, -6.60755426e-01, -4.95826747e-01, 1.83750401e-01};

  element_t weight_raw[] = {4.69434058e-01, -1.38583424e+00, -1.19454332e+00, 7.51993600e-01, 1.67906442e+00, -4.73379739e-01, 9.41878306e-01, -4.58280482e-01, -8.89644787e-01, 7.47770021e-01, 1.86899005e+00, -3.76912984e-02, -2.68109599e+00, -1.01194085e-01, 2.78046317e-02, -3.78493153e-01, -7.43905667e-01, 1.66726823e+00, -2.39953374e+00, -2.90112339e+00, 1.69425602e+00, 2.11895221e+00, -1.65778947e+00, 7.61535409e-01, -2.61197826e+00, -1.56647519e+00, -2.41361783e-01, 9.76095418e-01, -1.69379028e+00, -1.80317946e-01, 2.86974591e+00, 7.83224328e-02, -1.79212071e-01, 9.96846111e-01, 1.27322826e-01, -1.45638535e+00, 1.94500748e+00, -2.22728921e+00, -1.96833731e+00, -1.95052845e+00, -7.08356663e-01, -2.39044050e+00, -6.61220349e-01, 1.85948655e+00, -8.77489231e-01, 2.25910682e+00, 2.75299436e+00, 2.03237053e+00, -2.30972770e+00, 3.74469986e-01, -2.34937194e+00, 2.25521054e+00, -8.99953121e-01, 2.38629051e+00, -2.25493565e+00, 8.27170971e-01, 2.23515090e+00, -2.99360661e+00, -1.17168090e+00, -2.82705197e+00, 2.98377018e-01, -1.94885169e+00, 5.40153173e-01, -2.96927632e+00, -1.30786336e+00, 1.55878752e+00, 2.23167008e+00, 3.25273789e-02, -9.75319840e-02, -2.71345071e+00, 1.50482951e+00, 1.98800589e+00, 2.19620308e+00, 1.96069188e+00, -2.51859384e-03, -2.94740383e+00, -9.52835533e-01, 1.44073713e+00, 2.46472884e+00, -1.23625174e+00, -1.87975626e+00, 2.30530176e+00, -6.95593244e-01, 7.01437086e-01, 5.81853703e-01, -1.06019632e+00, 8.40219457e-01, -3.08456307e-01, 1.19075977e+00, -2.02837369e+00, -1.82785135e+00, -1.03247982e-01, 3.75951276e-04, 1.60856600e+00, -1.84283918e+00, 2.95301614e+00, -1.04820246e+00, 2.07600281e+00, 1.90885268e+00, 2.43943187e+00, 1.43667562e+00, -1.10003648e+00, -2.83465135e+00, 3.78231860e-01, 2.74004219e+00, -2.06394886e+00, 1.54640811e+00, -2.75194253e+00, -1.83270810e+00, 1.21537604e-01, -2.10613421e-01, 1.73705801e+00, -2.23164924e+00, 2.35449197e+00, -1.94164743e+00, -3.90715826e-01, -2.10387976e+00, 1.13258744e+00, 1.88402160e+00, -1.84470203e+00, 4.68833930e-01, 1.32519944e+00, -1.49205079e-01, -1.42829315e+00, 1.40477660e+00, -9.04758285e-01, 1.02878655e+00, -2.66964987e+00, 2.38227291e+00, 1.29870916e-01, -1.34866170e+00, 2.06100418e+00, -3.45158807e-01, 1.01549933e+00, 2.95588019e+00, 2.11601428e+00, 2.60128869e+00, 2.17276736e+00, -2.59770354e+00, -1.24910999e+00, -1.82202496e+00, -5.33936144e-01, -4.84902078e-01, 2.74960541e+00, 2.54449228e+00, 2.90201444e+00, -7.12005966e-01, 2.78452402e+00, 5.41890668e-01, 6.39412589e-03, -1.30741768e+00, -2.02580336e+00, -3.07274893e-01, -9.16216399e-01, 1.43133925e-01, 2.62978313e-01, -2.93526489e+00, -1.22066322e+00, -1.99031596e+00, 2.75104991e+00, -1.58140965e+00, 1.99593194e+00, 1.24653142e+00, 3.63953174e-01, 1.20670807e+00, -1.72797444e+00, 1.14623773e+00, 7.29634814e-01, 1.30469585e+00, -2.08381639e+00, -2.43447976e+00, 2.70710670e+00, -5.76311983e-01, 8.60548537e-01, 2.76294937e+00, 2.02390457e+00, -2.21619757e+00, 5.84615982e-03, -1.90966590e+00, -2.69773939e+00, 2.37040542e+00, -1.40377827e+00, -2.67741849e+00, -3.91919585e-03, 1.68066674e+00, 3.41687874e-01, -2.18967901e+00, -6.68539573e-01, -1.45396104e+00, 1.63947625e-01, 2.41602503e+00, 2.11868255e+00, 2.02093959e+00, -1.70472896e+00, -2.19870107e+00, -2.27854787e+00, 2.24774629e+00, -2.51982957e+00, -6.63516277e-01, -1.90908765e+00, -5.33080226e-01, 2.00029937e+00, 2.87068895e+00, -2.97450387e+00, 3.59138519e-01, 1.51067887e+00, -6.59731115e-01, -1.14836880e+00, 1.78586722e+00, 1.33662466e+00, 1.80534568e+00, 2.83009647e+00, 2.26499936e+00, 6.41048319e-01, -1.35574472e+00, 1.12644441e-01, 4.13352887e-01, 2.71106637e+00, -3.33341733e-01, 2.67315433e+00, 4.36720777e-01, 2.50423523e+00, -6.96118478e-01, -2.71824102e+00, 2.16307105e+00};

  element_t top_raw[] = {0., 0., 0., 0., -10.77531046, 2.46662046, -8.15783683, -3.39263197, 1.37159808, -2.94898676, 8.88649318, 1.73765018, 0., 0., 0., 0., 0., 0., 0., 0., -2.02258181, 2.51361957, -5.4055992, -7.1166395, 2.7661521, -9.20120725, -5.21644148, -8.91871525, 0., 0., 0., 0., 0., 0., 0., 0., -3.44745653, -6.40158273, -3.71314271, 0.3923351, 3.02698958, 4.491947, 2.65839012, -1.9860927, 0., 0., 0., 0., 0., 0., 0., 0., 1.31699937, 14.63116656, 1.44270567, 0.73447695, 8.23517956, 0.60661888, -15.62188846, -3.58329566, 0., 0., 0., 0., 0., 0., 0., 0., 2.08497639, -4.07249358, 18.66651641, 6.14783777, 1.31717684, -4.4841956, -6.52985553, -0.29682908, 0., 0., 0., 0., 0., 0., 0., 0., 0.56237744, -2.9659237, 4.03724045, -6.57606811, -1.83133599, -6.22652985, 8.16616579, -1.71254919, 0., 0., 0., 0., 0., 0., 0., 0., 3.01241227, 10.37083895, -6.15325731, 0.39043997, 4.13404327, 3.69649448, 14.38453427, 5.79109786, 0., 0., 0., 0., 0., 0., 0., 0., 2.43877928, -1.85458057, -3.91390894, -14.46249078, -0.23694897, -2.71156414, -5.39709705, 4.75065548, 0., 0., 0., 0., 0., 0., 0., 0., -0.93115297, 1.27093017, 7.6771542, 0.30356486, 3.53618669, 2.93790454, -5.85610376, 0.64275865, 0., 0., 0., 0., 0., 0., 0., 0., 4.84311752, -4.43624068, -10.39836637, 7.86485313, -4.15228461, -1.52662407, -6.82905877, 1.85316356, 0., 0., 0., 0.};

  element_t correct_raw[] = {-3.617912,-3.407600,-2.460218,23.079067,-11.044569,-5.693382,6.344543,1.909699,0.303435,-7.634040,17.260712,-14.865572,-13.962346,7.020315,11.533913,-5.916656,-1.112938,37.896400,-14.949059,-12.475883,25.281918,5.525377,-13.717909,5.776771,2.849651,-11.068444,-1.096069,-4.283242,-9.902516,-6.213378,10.983770,-15.138124,11.900647,-4.998619,13.909553,-17.685486,-0.505247,5.129679,-14.639563,-9.769495,-25.315155,1.792485,6.408000,25.116821,-12.042031,19.032219,8.072210,14.437145,-3.262650,12.501974,-28.140926,35.851273,-4.354376,18.192699,-18.856987,0.991384,6.591564,-4.490582,-6.689666,-11.544814,-2.728448,9.251069,10.020450,9.803894,5.807632,8.175817,-4.446856,-24.114895,13.500004,-26.005768,25.251465,-6.338494,14.490816,-6.030446,5.619246,-4.969072,-0.549689,-10.456661,27.381641,-15.301664,-27.277569,2.511428,19.931938,23.818401,18.429794,-27.626476,12.330063,3.633706,29.957237,-2.096431,-3.795716,2.650906,-3.546445,14.108107,-7.867282,-2.028979,7.199407,-2.063554,17.716236,19.378412,6.206247,-4.033358,21.186861,-3.510131,16.615505,8.476550,-1.010591,12.622430,4.051821,3.334984,3.127090,14.975130,1.105577,19.350609,-7.246446,-3.140869,-11.517203,7.895390,10.755850,-22.735292,15.887868,-3.549326,28.714447,-0.553258,8.736219,-7.569448,-2.942073,-19.988230,-3.428524,9.872713,-9.492382,5.146695,-2.515320,17.075043,24.956928,7.898031,-21.361267,36.477940,-10.036271,-10.294403,6.239033,-9.306146,-2.502711,12.126623,-1.271643,5.157843,8.259333,-2.638108,3.690300,-5.004848,-30.781858,-6.626909,-11.548014,22.211309,-6.207658,3.082082,-2.060797,-11.361609,-21.014767,12.411083,-17.541971,17.683540,29.813686,-13.489524,17.463427,-21.589903,14.132015,-21.056469,7.103332,-9.139176,-8.981046,-5.982456,0.918907,23.153654,13.339333,26.807856,-20.118170,2.996098,-27.968529,-8.600372,-10.215634,-1.736458,-14.594658,-25.331749,5.789894,8.572942,-0.264628,17.813551,-30.684566,4.459126,9.289847,14.214278,20.550468,-5.013021,-35.088863,-1.040895,19.244253,-29.328423,-4.112191,20.662355,-19.921904,8.210845,8.124783,-6.651712,-7.190836,18.540003,14.647825,-21.863138,34.687943,-5.407118,11.068497,30.789106,-10.048485,9.734944,-21.415066,17.801357,8.472150,11.463011,6.760028,12.968663,22.913387,-4.623384,31.941267,-22.290356,16.950911};


  auto& ms = MinervaSystem::Instance();
  Scale bottom_size{7, 6, 3, 2};
  Scale weight_size{5, 3, 3, 5};
  Scale top_size{4, 4, 5, 2};

  shared_ptr<element_t> bottom_ptr(new element_t[bottom_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> top_ptr(new element_t[top_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(bottom_ptr.get(), bottom_raw, bottom_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));
  memcpy(top_ptr.get(), top_raw, top_size.Prod() * sizeof(element_t));

  ms.SetDevice(cpu_device);
  NArray bottom = NArray::MakeNArray(bottom_size, bottom_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  ImageBatch top = NArray::MakeNArray(top_size, top_ptr);
  ConvInfo conv_info(3, 2, 3, 2);
  ms.SetDevice(gpu_device);
  ImageBatch output = Convolution::ConvBackwardFilter(top, bottom, weight, conv_info);
  auto output_ptr = output.Get();
  for (int i = 0; i < weight_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
	//printf("%f,",output_ptr.get()[i]);
  }
}

#endif

/*
 * Backward Data
 */

TEST(ConvBackwardData, CpuWithoutPaddingSmall) {
  element_t top_diff_raw[] = {8,6,4,2};
  element_t weight_raw[] = {1,2,3,4};
  element_t correct_raw[] = {32,48,18,32,40,12,8,8,2};
  Scale top_size{2, 2, 1, 1};
  Scale weight_size{2, 2, 1, 1};
  Scale correct_size{3, 3, 1, 1};
  auto& ms = MinervaSystem::Instance();
  shared_ptr<element_t> input_ptr(new element_t[top_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), top_diff_raw, top_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));
  ms.SetDevice(cpu_device);
  ImageBatch input = NArray::MakeNArray(top_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  NArray bottom = NArray::Zeros(correct_size);
  ConvInfo conv_info(0, 0, 1, 1);
  ImageBatch output = Convolution::ConvBackwardData(input, bottom, weight, conv_info);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
  }
}


TEST(ConvBackwardData, CpuWithoutPaddingLargeTime) {
	Scale top_size { 246, 246, 2, 10 };
	Scale weight_size { 11, 11, 3, 2 };
	Scale correct_size { 256, 256, 3, 10 };
	auto& ms = MinervaSystem::Instance();
	ms.SetDevice(cpu_device);
	element_t top_diff_raw[top_size.Prod()];
	element_t weight_raw[weight_size.Prod()];
	//element_t correct_raw[correct_size.Prod()];
	shared_ptr<element_t> input_ptr(new element_t[top_size.Prod()], [](element_t* ptr) {delete[] ptr;});
	shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) {delete[] ptr;});
	shared_ptr<element_t> correct_ptr(new element_t[correct_size.Prod()], [](element_t* ptr) {delete[] ptr;});
	for (int i = 0; i < top_size.Prod(); i++) {
		top_diff_raw[i] = rand();
	}
	for (int i = 0; i < weight_size.Prod(); i++) {
		weight_raw[i] = rand();
	}
	for (int i = 0; i < correct_size.Prod(); i++) {
		correct_ptr.get()[i] = rand();
	}
	memcpy(input_ptr.get(), top_diff_raw, top_size.Prod() * sizeof(element_t));
	memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));
	//memcpy(correct_ptr.get(), correct_raw, correct_size.Prod() * sizeof(element_t));
	ImageBatch top = NArray::MakeNArray(top_size, input_ptr);
	Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
	NArray bottom = NArray::MakeNArray(correct_size, correct_ptr);
	ConvInfo conv_info(0, 0, 1, 1);

	double start = get_wall_time();
	ImageBatch output = Convolution::ConvBackwardData(top, bottom, weight, conv_info);
	ms.WaitForAll();
	std::cout << "ConvBackwardData Time: " << (get_wall_time() - start) << "\n";
}

TEST(ConvBackwardData, CpuWithoutPaddingSmallDepth2) {
  element_t input_raw[] = {1,2,3,4,5,6,7,8};
  element_t weight_raw[] = {11,12,13,14,15,16,17,18};
  element_t correct_raw[] = {14.000000,41.000000,26.000000,54.000000,130.000000,74.000000,36.000000,81.000000,44.000000,18.000000,53.000000,34.000000,70.000000,170.000000,98.000000,48.000000,109.000000,60.000000};
  auto& ms = MinervaSystem::Instance();
  Scale input_size{2, 2, 1, 1};
  Scale weight_size{2, 2, 2, 1};
  Scale correct_size{3, 3, 2, 1};
  shared_ptr<element_t> input_ptr(new element_t[input_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), input_raw, input_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));

  ms.SetDevice(cpu_device);
  ImageBatch top = NArray::MakeNArray(input_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  NArray bottom = NArray::Zeros(correct_size);
  ConvInfo conv_info(0, 0, 1, 1);
  ImageBatch output = Convolution::ConvBackwardData(top, bottom, weight, conv_info);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
	//printf("%f,",output_ptr.get()[i]);
  }
}


TEST(ConvBackwardData, CpuWithPaddingSmall) {
  element_t input_raw[] = {1,2,3,4,5,6,7,8,9};
  element_t weight_raw[] = {10,2,3,5};
  element_t correct_raw[] = {25.000000,15.000000,10.000000,50.000000};
  auto& ms = MinervaSystem::Instance();
  Scale input_size{3, 3, 1, 1};
  Scale weight_size{2, 2, 1, 1};
  Scale correct_size{2, 2, 1, 1};
  shared_ptr<element_t> input_ptr(new element_t[input_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), input_raw, input_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));

  ms.SetDevice(cpu_device);
  ImageBatch top = NArray::MakeNArray(input_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  NArray bottom = NArray::Zeros(correct_size);
  ConvInfo conv_info(2, 2, 2, 2);
  ImageBatch output = Convolution::ConvBackwardData(top, bottom, weight, conv_info);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
	//printf("%f,",output_ptr.get()[i]);
  }
}


TEST(ConvBackwardData, CpuWithoutPaddingFrac) {
  element_t input_raw[] = {8.59232186e-01, -3.67248891e-01, -6.32162377e-01, -5.90879443e-01, 1.35450058e-01, 1.91089406e-01, 9.29029039e-01, 3.06354194e-01, 4.97813275e-01, 3.07139742e-01, 4.95429619e-01, 9.22613472e-01, -9.83223404e-01, -7.87111247e-01, -4.02592572e-01, 3.12822366e-01, 6.19625105e-01, 7.44351827e-01, 9.29295195e-01, 4.47370694e-01, 2.84950656e-01, 4.34907242e-01, -6.48019856e-02, -3.48830645e-01, -1.20710788e-01, 4.59378165e-01, 9.88029172e-01, 3.53747424e-01, 5.81645036e-01, -6.58171484e-01, -9.46301448e-01, 6.00740488e-01, 8.07445076e-01, -9.50647579e-01, -1.65053631e-02, 5.25103347e-02, 1.92732021e-01, -8.96084910e-01, 7.90179056e-01, 4.56532361e-01, 6.36700023e-01, 4.45505669e-04, 6.20378818e-01, -8.08062949e-01, -5.62099913e-01, -4.82561877e-01, -6.37884921e-02, -8.12535948e-02, 4.19019560e-01, -6.43893988e-01, 6.28997687e-02, -6.64515542e-01, 5.37627837e-01, 8.56341098e-01, 2.18987316e-01, -6.99633011e-01, -2.07465926e-02, -2.45310092e-01, 6.97202824e-01, 8.22194457e-01, -2.32302558e-01, -3.69008193e-01, 1.36788306e-01, -6.24363930e-01, -7.48316912e-01, 3.75191610e-01, 5.99213436e-01, 1.47073130e-01, 9.46459963e-01, 2.68108754e-01, 7.76843450e-01, -9.17048249e-03, -2.96766940e-01, 4.28460737e-01, 7.85823290e-03, -5.48724787e-01, -5.10051120e-01, 5.85601400e-01, -9.65517098e-03, 8.30187347e-01, 8.90743668e-01, 6.64644593e-02, -4.95014811e-01, 4.41724116e-01, -2.65122472e-01, -2.70311418e-03, -5.46849905e-01, -2.92868707e-01, 3.01703573e-01, -3.74134209e-01, 5.37470894e-01, 5.63674207e-01, 7.04818966e-01, 8.99811480e-01, -7.85354176e-01, 8.21450712e-01, -3.27889676e-01, 6.52760854e-01, 7.96201270e-01, -9.14569391e-01, -6.08410002e-01, -4.10997356e-01, 2.53999761e-01, -8.27553790e-01, -7.14109960e-01, 3.16530385e-02, 3.78682659e-01, 7.13251622e-01, 2.94723367e-01, 1.63237351e-01, 4.22231910e-01, -4.95166286e-01, 8.00319367e-01, -1.15412614e-01, -9.58958351e-01, 9.19322028e-01, 3.04450845e-01, 2.64125002e-02, 3.64712766e-01, -2.09192187e-02, 8.52980343e-01, 3.17595443e-02, -8.55680237e-01, 1.35016596e-01, 2.30486367e-01, 8.83092589e-01, -1.69273291e-01, -4.71120051e-01, -8.05213669e-01, -2.83115562e-02, -7.06742743e-02, -9.40481366e-01, 3.88554924e-01, 4.33894225e-01, 4.59622847e-01, -1.71297966e-01, -9.69802310e-01, 8.17950315e-01, 5.78757436e-01, -6.69601662e-01, -3.74428077e-01, 2.21890612e-01, -2.71019427e-01, -6.87922822e-01, -6.45392373e-01, 7.35779342e-01, -4.19810663e-01, 1.70359243e-01, -9.20102482e-02, -1.77643736e-01, 7.65268890e-01, 3.85416030e-01, -4.41453290e-01, -8.71119538e-01, -6.02752772e-01, 8.63365489e-01, 7.08827136e-01, 9.09469469e-01, -8.95493304e-01, 1.58943361e-01, -3.90074667e-02, -9.56582042e-01, -2.52759073e-01, -1.71816398e-01, 2.07814468e-01, 3.43497455e-01, 6.77731401e-01, 5.59052417e-01, -1.98597912e-01, 5.89058463e-01, 7.86248621e-01, -4.75020618e-01, 9.78394015e-01, 7.06614198e-01, 4.62954312e-01, -2.88868751e-01, 7.66578981e-01, 7.35918182e-01, 9.11532892e-01, -9.99785487e-01, -9.66917916e-01, -3.71859885e-01, 9.90632349e-01, -7.02311554e-01, -6.65245763e-01, 5.17144074e-01, -8.60940668e-01, 4.10946877e-01, -6.16694364e-02, -9.79623568e-01, 5.49647726e-01, 5.88402017e-01, -7.00861097e-01, -9.52592736e-01, 5.24127542e-01, -5.52659640e-01, -4.75651204e-01, -8.62609944e-02, -5.00146163e-01, 1.36567123e-01, 6.93885994e-01, -2.43800926e-01, -1.35069767e-01, 6.65238353e-01, -2.57736129e-01, -9.18893456e-01, 1.09342972e-01, -9.75075144e-02, 4.50601953e-01, -2.43098955e-01, 6.81324991e-01, -6.13706128e-02, 1.25286858e-01, 3.22398678e-01, -7.55162650e-02, 2.47273891e-01, -5.56238738e-01, 4.65726234e-01, -2.36635823e-01, -6.10330916e-01, -4.57674450e-01, -5.01549896e-01, -6.95721875e-01, 5.42747408e-01, -4.89176535e-01, -7.44913190e-01, 3.30334307e-01, -1.74390103e-01, 3.35535533e-01, 3.19627034e-01, -3.89244656e-01, -5.97551518e-01, -5.55945747e-01, -7.60058273e-01, -9.25709118e-01, -9.31736833e-01, -5.39006904e-01, -5.43292587e-01, 2.49821244e-01, 7.85122371e-01, 5.59456032e-01, 4.42902537e-01, -3.79115682e-01, -2.73833167e-01, -6.07836432e-01, 8.70983596e-01, 1.23468000e-01, 6.34583074e-01, -3.02172038e-01, 5.99428526e-01, -7.91791075e-01, 4.24240330e-01, 8.34896992e-01, 6.07170737e-01, -3.45773707e-01, -4.89785641e-01, -9.99565129e-03, -1.72778091e-01, -1.50125809e-01, -8.51243390e-01, 2.06781303e-01, 4.94399467e-01, 5.95152453e-01, -2.36998955e-01, 5.94316306e-01, -5.64052608e-02, 4.42798342e-01, -6.21574621e-01, -1.30808581e-01, 6.46936218e-01, 6.52545256e-01, -6.20949033e-01, -9.59795660e-01, 4.06982772e-01, -3.05459761e-01, -1.60992368e-01, 5.36177806e-01, 9.25756133e-01, 7.85130614e-01, -7.30115467e-01, 5.95609430e-01, 3.64181215e-01, 6.01057742e-02, 7.31963310e-01, 5.06496191e-01, -8.13594826e-01, -3.41121136e-01, -1.75274609e-01};

  element_t weight_raw[] = {-2.99421235e+00, 5.85381379e-01, 1.09536925e+00, -8.02315431e-01, -6.21006855e-01, -1.47845127e-01, 4.86479403e-01, -2.17717723e+00, 2.99648504e+00, 4.39632527e-02, -4.15997727e-02, -1.87875147e+00, -1.22347191e+00, 1.79109036e+00, -1.23133024e+00, 1.18272956e+00, -1.36224463e+00, 2.47517071e+00, -1.20876460e+00, 2.33915863e+00, 2.68033376e+00, -1.98652306e+00, -8.44251566e-01, 1.09306382e+00, 2.52835182e+00, -2.13045394e+00, -2.40075369e+00, -5.30383341e-01, 2.85075222e+00, -2.75096075e+00, -1.87851423e+00, 6.52607928e-01, -2.47668771e+00, -1.10227108e+00, 6.60814659e-01, -1.79283172e+00, 1.15138630e+00, -1.53223817e+00, 1.08223018e+00, -8.43736265e-02, -1.43703113e+00, -1.30355808e+00, 2.43270972e+00, -1.34494388e+00, 2.04688826e+00, -1.82145375e+00, -1.01649942e+00, 2.67977931e+00, 3.64310972e-02, -5.79504850e-01, -2.83763077e+00, 7.30642137e-01, -9.15908959e-01, -1.33920463e+00, -2.61567136e+00, -9.93656887e-01, -2.59374035e+00, -2.97705451e+00, -2.75419318e+00, -9.06270806e-01, -2.44827413e+00, 1.21894359e-01, -1.70550112e+00, 2.94999927e+00, -1.39687703e+00, 1.08100832e+00, 1.57476715e-01, -3.60461582e-01, 9.69331474e-01, -2.19128895e+00, 1.72709403e+00, -2.17213379e+00, 7.97539786e-01, -1.71800785e+00, -2.85974811e+00, 7.61603840e-01, 8.52982359e-01, 8.52620021e-01, 2.18772540e+00, -9.76791579e-01, -5.34249680e-01, 6.61912103e-01, 2.64505914e+00, -2.08753638e+00, -1.89565196e+00, -2.07337027e+00, 1.27694596e+00, 2.56789897e+00, -4.63876920e-01, 2.71063582e-01, -1.06566621e+00, -2.03577190e+00, 1.21891215e+00, 1.38149044e+00, 2.76242723e+00, -7.77056575e-01, 1.30019035e+00, 2.91636731e+00, -2.33539465e+00, 1.54937129e+00, -2.05467527e+00, 1.89861153e+00, 3.24639277e-01, 4.90261325e-01, 2.61687350e+00, -3.93913469e-01, -6.52368818e-02, 9.96782801e-01, 7.80924006e-01, -2.21877150e+00, -8.76936173e-01, 8.10740308e-01, 2.51373517e+00, -2.45239968e+00, -2.57350725e+00, -5.17730183e-01, -1.70615298e+00, 1.18191789e-01, 3.51084133e-01, -1.57799016e-01, -1.70476727e+00, -1.56336669e+00, -1.69957048e+00, 9.34142269e-01, 2.07836070e+00, 2.58278636e+00, 1.80183310e+00, 1.08435507e+00, -1.75645825e+00, 1.44995835e+00, 1.18142751e+00, -7.09443154e-01, 2.10071475e+00, 1.68667087e-01, 2.35805441e+00, 1.92335625e+00, -1.62852828e+00, 1.92374382e+00, -2.16863145e+00, -1.05195029e-01, -2.10713666e+00, -3.10235670e-01, 9.95738834e-01, 1.73419455e+00, 9.72124549e-01, 1.26907457e+00, 2.32754197e+00, -2.14994825e+00, -2.11457926e+00, -1.04441494e+00, -2.80875702e+00, 1.12657737e+00, 1.58838027e+00, -8.99943488e-01, 6.96045664e-01, 2.75099915e+00, -1.25368430e+00, 1.12007078e+00, -2.74663062e+00, -2.62497821e+00, 1.88639217e+00, -3.80289825e-01, -6.47589408e-01, -1.01611392e+00, -2.54047030e-01, 2.01211291e+00, -1.99386743e-01, -4.72284073e-01, 4.25109318e-01, 1.43433574e+00, -2.66949955e+00, 7.45083894e-01, 7.26361966e-01, -2.99333681e+00, 6.17361038e-01, -2.75888753e+00, 5.14502201e-01, -3.09723452e-01, -8.77618394e-01, 2.60115141e+00, -1.39646441e+00, -1.31220372e+00, 2.94357819e-02, 8.80836712e-01, 2.82344057e+00, -2.78474712e+00, -4.60800803e-01, 5.29872532e-01, 1.39021370e+00, -1.94693356e+00, 6.32327077e-02, 1.70757504e-03, 2.35660579e+00, -7.03903755e-01, 9.77183021e-01, -2.71913064e+00, 1.50733970e+00, -7.87288246e-01, 2.68817182e+00, -9.16648691e-01, 1.10335919e+00, 1.94780929e+00, -8.24820346e-02, 2.90505523e+00, 6.22884229e-01, 1.55774899e+00, 1.10710017e+00, 2.59449736e+00, 2.69871283e+00, 2.94066677e+00, -2.24306770e+00, 2.85960370e+00, -1.62536606e+00, -1.88366146e+00, 5.52685321e-02, 1.82986096e-01, -1.30416455e+00, -1.13903079e+00, -1.14069374e+00, -1.40166668e+00, 5.60586905e-01, -1.69719377e+00, -5.85702494e-01, -1.26863256e+00, -1.95695511e+00};

  element_t correct_raw[] = {-0.861118,1.789599,-0.192098,-3.772066,-1.171446,3.868326,2.829584,3.519578,-0.401897,-5.756625,-1.167793,-0.123237,-0.333016,3.265663,-5.001259,-2.275627,2.801891,-0.380476,-0.281949,4.949083,6.634080,-4.571546,0.500780,-1.600668,-0.404496,5.583798,-5.585242,-4.355585,-1.292285,-7.720478,-3.375307,6.236872,7.582698,-1.215804,-3.438790,-0.206557,-1.589470,-0.288958,-2.960994,1.152735,2.488571,0.781154,-10.562472,-6.016970,8.332851,5.610995,-0.484588,-2.657443,-1.326799,-3.676986,2.932516,9.909317,-5.958278,1.501262,-10.012947,-0.660992,5.210555,-0.936115,1.438923,-0.467051,0.963350,2.352577,-2.595447,8.636878,-9.480071,0.267073,1.893265,4.650538,-2.989280,-0.938347,8.096261,-3.222964,0.069811,5.035134,-3.906377,-1.377284,-3.995087,1.627737,3.472075,5.245581,-5.183541,3.523603,-3.198893,-3.428192,-1.365123,1.956483,-2.648139,0.160610,5.591084,-0.673095,-1.655756,2.517139,5.317964,0.013097,0.232216,2.801119,-2.120084,3.965877,1.821071,-6.614838,-3.438645,4.562026,-0.998281,3.540547,1.997250,-2.849930,-5.619549,3.067973,-0.662032,0.050074,0.522035,-7.773035,13.852877,-2.032331,-4.413694,-6.226500,10.661108,-0.114805,-3.272382,5.556460,1.901664,0.176667,2.947251,-5.377202,-1.506144,-1.278448,10.884763,-7.307772,-5.229288,-5.934045,-3.221240,2.907982,2.758375,0.275452,1.592174,10.682644,-5.715372,1.198609,1.223449,-9.088083,5.399524,2.799407,2.480285,-2.518843,-1.693017,7.182967,-0.465039,8.277404,8.505639,4.144751,-8.093884,6.216247,6.655358,-5.677887,-5.782744,1.879567,-0.438828,5.258228,-0.172530,3.367729,9.702333,-3.334629,-5.368228,14.157303,5.123936,-4.809422,-0.065427,1.169573,4.672944,0.652245,4.008397,-11.696341,4.254375,-1.993380,0.772764,1.319159,1.332594,-1.101508,4.330271,1.487693,0.931754,-0.624353,5.998052,-3.184272,2.561398,2.162698,0.270218,-3.731274,-3.434558,1.781620,-1.208277,-2.355672,1.372223,-0.789950,0.649611,-2.953192,1.254964,-1.761536,4.236151,-1.784639,0.587066,-3.615817,-0.639442,-0.130348,-0.188041,0.387788,0.271775,6.524864,-2.877292,-4.810179,-9.713173,9.856152,5.190222,-0.340538,-1.207057,2.211226,2.282467,1.953119,1.046353,0.264842,-4.145903,-1.298680,-0.327268,-2.559111,-1.095952,-5.823745,-1.162175,2.726061,-0.692636,2.818845,-1.985480,-1.006485,-2.698162,-4.576430,0.639532,-2.779664,-2.504920,1.355231,-1.818899,-0.281408,4.168027,-2.839602,-3.896165,-6.237121,-3.230048,-4.478722,-0.479600,-4.557238,0.973666,-0.679591,1.946007,-0.320245,2.502236,-1.579053,-0.797051,0.614388,-3.737692,-2.902907,-3.467542,6.114590,-5.227870,-2.225209,0.308376,-1.234281,-2.658274,-3.788059,-0.411144,0.909863,-3.417280,-1.573502,4.443288,9.225067,-8.900447,0.296817,1.078235,0.837979,-2.986850,1.819401,-0.025384,-2.111081,-4.244297,0.309446,2.578097,-0.192216,0.128646,1.607225,1.603738,0.789715,-0.754840,-2.446655,3.198629,-1.275119,3.745399,-0.198952,1.012228,-9.062501,-6.847182,-6.631068,-1.483189,-2.420098,-4.444180,-6.471114,3.582602,2.950396,-2.459838,1.502661,1.438711,1.657287,2.918997,0.300620,-4.136347,-5.409235,-1.076149,-5.828786,-3.489184,-7.949127,-5.715112,5.500435,8.982519,2.711071,2.397807,3.291374,-0.682117,0.141506,0.033661,1.968719,-5.533283,-8.360313,-2.997298,-6.019006,-5.280542,4.562503,4.599768,10.330196,-0.459183,2.434101,-3.230419,1.217832,-2.136445,-6.687827,0.397670,1.276150,1.331867,-3.026968,-9.991388,-1.126211,-0.251184,-0.438882,-5.368198,-2.610491,1.660430,-0.768567,-5.618808,10.221746,7.674420,3.173374,-7.144212,4.364618,-6.513852,-3.489739,0.289451,-4.822148,2.654539,-3.901960,-3.065177,8.452254,-2.051857,6.003841,3.181066,6.028013,-4.086824,1.726675,1.147046,-3.829583,4.033304,1.746458,3.904646,-3.204093,-7.025935,-0.839962,0.550992,-1.446497,-0.046597,0.618169,-2.253153,-1.500938,1.324836,4.491065,2.739680,-0.658420,-4.968413,-2.742040,4.975129,1.480235,1.135472,-0.822700,-1.020366,0.607900,-3.481094,-7.163158,-4.878381,6.076893,4.077508,8.087923,-1.881206,-1.168522,0.356536,1.124289,-3.929127,0.373645,-2.309934,-15.655060,2.386410,-1.398612,-10.073902,1.774315,0.976454,3.380183,-1.519989,0.697923,-4.953779,-2.327959,-2.432772,-8.444665,5.078468,-1.868206,1.919565,-7.012532,3.071378,1.572557,-2.038942,0.609350,-3.625793,-0.926332,-3.209588,8.711662,-2.799956,-10.083397,7.346124,-9.100878,6.573493,-4.772502,-0.289014,0.017972,0.234143,1.716366,-5.708624,10.544999,-2.482754,-2.698241,-3.297389,-3.793433,3.759544,-2.163044,4.525909,2.778516,-1.008667,4.021857,-3.232802,3.224124,3.153430,11.552838,-7.959694,6.890323,-2.685184,2.293809,-1.808752,-3.241399,-0.974729,3.134702,-0.548421,-4.630121,1.525826,-0.038890,-5.427561,6.485326,0.995158,5.747540,-4.061276,3.321931,0.462585,-2.676033,0.692586,-4.428205,2.851727,3.579422,-5.693691,0.729099,-2.582628,-0.825910,0.447025,0.897885,0.640083,-1.283184,4.506027,-3.962641,7.628556,2.681618,-6.559796,-5.716064,-4.969007,7.426347,-1.102540,0.887424,1.105928,-2.940975,-2.665337,4.385749,-2.647065,0.559830,-1.729746,-7.954554,7.148817,-0.570385,-1.605864,-5.134223,-1.500844,1.896406,-4.136714,3.501003,2.793357,-4.793551,1.476191,-4.683261,-9.001178,-4.419949,9.630128,-2.325879,-1.769918,1.325857,-1.278566,1.538962,0.064186,2.870047,-0.965176,6.139172,-3.463282,-0.223263,2.689335,-2.884532,5.077912,1.404000,0.423740,-2.956308,-9.883310,-7.647298,-12.772137,10.669836,4.471886,-3.482169,-2.975618,-0.546047,-1.205117,-2.228755,-0.449468,-4.403217,3.962734,-2.994916,-2.372571,5.404981,6.218055,-2.892836,-7.338696,2.709865,1.370737,-0.543779,-1.181389,0.080095,-3.786092,-4.570521,1.758589,-7.591572,-1.925408,5.990691,0.319304,-0.671545,1.396614,-6.039306,2.723629,-3.564336,-3.683028,3.357243,-5.059089,3.105397,3.563374,-4.927155,-1.282873,-2.852456,-0.128050,2.579039,-3.203791,-1.633974,2.279120,2.540485,0.999827,-6.796712,-6.623774,-3.788263,3.813348,0.445892,-1.610440,-1.969648,-7.470009,8.979786,0.616404,7.188474,-2.532911,-0.269502,0.777244,0.460869,-5.537929,2.351184,1.680754,-6.363465,-0.281577,-1.248063,0.479298,0.924884,-12.434249,6.411742,-2.540554,-0.559595,-2.423559,2.458744,-5.743380,-1.139848,1.546543,-4.681086,4.481580,0.868453,-1.468513,2.693946,-0.424048,-2.166499,-1.582664,5.120764,1.363548,2.962844,2.332685,-12.982770,1.316206,-8.815780,6.926795,-1.996612,3.962878,0.706114,2.195045,-4.021688,-3.110470,-2.619936,-0.335381,-3.220358,-3.792652,-3.902319,3.092144,-5.546946,-0.545349,-1.140458,7.396077,-0.228004,-2.237571,-0.078275,-8.610713,1.325492,-3.892920,-0.678534,1.805630,4.158877,6.248294,-0.909855,-2.667446,-0.493430,-0.663760,2.317325,-3.282732,5.942960,-0.797827,-0.294271,0.677391,2.660363,1.896703,2.660187,-1.567300,-0.584433,-0.539476,3.216395,-0.329729,-3.129022,4.960201,1.944759,0.185053,4.696012,-3.133824,-2.115324,0.151550,-2.786795,1.387276,-0.429266,2.415838,-9.534157,1.231715,2.197715,14.833018,-3.656259,-3.150365,-5.877256,-1.249179,-1.445882,-3.559311,3.032200,2.149899,2.542215,7.641285,1.344760,-0.146722,-0.449808,-0.421924,-7.260665,0.207624,-0.040495,-0.054238,2.136933,-3.003693,3.953950,1.666373,-0.640226,2.979584,4.072708,-2.387727,-8.122070,-2.296925,2.226939,5.151889,3.076842,-1.198240,1.833760,-3.935266,-0.096859,4.766315,3.360656,-3.722329,-2.239634,-8.541346,3.749193,-0.790741,3.890601,0.763397,-4.146721,2.115535,4.469295,5.801566,-5.038229,-7.644842,6.513895,-1.125079,1.318954,2.475580,3.880140,1.922904,1.477416,3.806829,-5.331800,-0.318459,-2.795389,-1.227576,3.300580,-0.091793,-1.169827,0.577405,1.558482,1.410214,-2.293223,-2.817356,-2.196218,-0.894050,1.241790,-2.265645,0.723896,-1.552978,0.766894,2.168101,3.185398,7.244444,0.223601,3.850333,-3.544351,-3.879556,-7.993992,-0.913321,-0.246464,-1.968331,-1.076868,1.445627,-1.251424,10.992624,2.406884,3.083553,-3.976796,11.420601,-3.252425,3.770565,-9.027681,-0.820733,-4.536175,3.340143,2.997738,2.608858,-8.541022,-5.629584,-3.355803,0.963625,-5.206939,-10.688908,1.269209,-0.020354,-0.039742,-3.619257,-3.341744,-12.053204,-9.779691,-8.212052,6.107642,3.622704,9.697240,-4.916384,-2.549187,-5.653267,-0.404472,-3.854570,-1.802257,-2.284639,1.788811,-1.379691,-2.401009,-1.385132,13.066822,4.197006,-0.762217,-11.944082,1.003180,0.723836,-3.987071,7.109487,0.669772,8.847664,-6.473099,-5.048759,-1.923731,-5.661686,-0.898357,-2.515805,4.447938,-1.315907,-1.155657,-2.499074,1.253925,0.533754,4.925126,3.260244,0.244958,1.873359,3.839741,-2.589235,-1.933603,1.482819,-0.094911,2.247850,1.916307,-4.324421,5.398454,-2.683898,-3.803080,-2.539108,-3.321848,-0.840137,1.194703,1.077823,-4.391097,2.413430,-1.027599,-4.359714,-2.977153,-3.810991,3.056397,-5.345336,3.692720,-0.248154,0.121191,2.732118,2.065307,5.985812,-2.841371,4.367061,-11.579490,-4.312026,-9.014544,1.899171,0.534760,-0.869187,-0.670206,1.050324,0.597615,-3.133600,-1.037654,7.605500,-6.777506,2.997478,-9.650144,1.548298,-10.662847,6.504010,0.403664,-0.735089,-3.503188,-3.370574,2.038488,0.536245,-2.663870,-7.014248,2.834171,4.278159,0.257983,1.560945,-4.311639,0.876247,-3.126559,0.010525,12.060719,-6.738288,14.523293,-12.654755,-4.698486,-10.429930,-3.694757,-1.646406,5.424623,-0.989953,-0.467865,-0.315587,-8.657926,-2.971225,-6.292002,-6.728180,10.229908,5.584425,4.843599,-6.052397,1.157480,1.020668,-2.501064,2.888194,-1.489629,3.180426,-4.239866,1.106057,0.634659,-3.122109,2.654816,-1.808122,0.462653};

  auto& ms = MinervaSystem::Instance();
  Scale input_size{8, 6, 3, 2};
  Scale weight_size{5, 3, 5, 3};
  Scale correct_size{12, 8, 5, 2};
  shared_ptr<element_t> input_ptr(new element_t[input_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), input_raw, input_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));

  ms.SetDevice(cpu_device);
  ImageBatch top = NArray::MakeNArray(input_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  NArray bottom = NArray::Zeros(correct_size);
  ConvInfo conv_info(0, 0, 1, 1);
  ImageBatch output = Convolution::ConvBackwardData(top, bottom, weight, conv_info);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
	//printf("%f,",output_ptr.get()[i]);
  }
}


TEST(ConvBackwardData, CpuWithPaddingFrac) {
  element_t input_raw[] = {5.25103347e-02, 1.92732021e-01, -8.96084910e-01, 7.90179056e-01, 4.56532361e-01, 6.36700023e-01, 4.45505669e-04, -6.37884921e-02, -8.12535948e-02, 4.19019560e-01, -6.43893988e-01, 6.28997687e-02, -6.64515542e-01, 5.37627837e-01, -2.45310092e-01, 6.97202824e-01, 8.22194457e-01, -2.32302558e-01, -3.69008193e-01, 1.36788306e-01, -6.24363930e-01, 9.46459963e-01, 2.68108754e-01, 7.76843450e-01, -9.17048249e-03, -2.96766940e-01, 4.28460737e-01, 7.85823290e-03, 8.30187347e-01, 8.90743668e-01, 6.64644593e-02, -4.95014811e-01, 4.41724116e-01, -2.65122472e-01, -2.70311418e-03, 5.37470894e-01, 5.63674207e-01, 7.04818966e-01, 8.99811480e-01, -7.85354176e-01, 8.21450712e-01, -3.27889676e-01, 5.59052417e-01, -1.98597912e-01, 5.89058463e-01, 7.86248621e-01, -4.75020618e-01, 9.78394015e-01, 7.06614198e-01, 9.11532892e-01, -9.99785487e-01, -9.66917916e-01, -3.71859885e-01, 9.90632349e-01, -7.02311554e-01, -6.65245763e-01, -9.79623568e-01, 5.49647726e-01, 5.88402017e-01, -7.00861097e-01, -9.52592736e-01, 5.24127542e-01, -5.52659640e-01, 6.93885994e-01, -2.43800926e-01, -1.35069767e-01, 6.65238353e-01, -2.57736129e-01, -9.18893456e-01, 1.09342972e-01, -6.13706128e-02, 1.25286858e-01, 3.22398678e-01, -7.55162650e-02, 2.47273891e-01, -5.56238738e-01, 4.65726234e-01, -6.95721875e-01, 5.42747408e-01, -4.89176535e-01, -7.44913190e-01, 3.30334307e-01, -1.74390103e-01, 3.35535533e-01, -6.26250490e-01, -4.07823970e-01, 5.97030118e-01, -4.10443414e-01, 3.94243187e-01, -4.54081542e-01, 8.25056903e-01, -2.81417189e-01, 3.64354606e-01, 8.42783940e-01, -7.10151312e-01, -8.00251230e-01, -1.76794447e-01, 9.50250742e-01, -3.67423692e-01, 2.20271553e-01, -5.97610574e-01, 3.83795433e-01, -5.10746058e-01, 3.60743392e-01, -2.81245422e-02, 6.82296085e-01, -6.07151251e-01, -3.38833141e-01, 8.93259770e-01, 1.21436991e-02, -1.93168283e-01, -9.45876923e-01, -3.31218962e-01, -8.64580115e-01, -9.92351503e-01, -9.18064393e-01, -3.02090269e-01, -8.16091378e-01, 4.06314529e-02, 5.24922383e-02, -1.20153861e-01, 3.23110491e-01, -7.30429651e-01, 5.75698010e-01, -7.24044598e-01, 2.65846595e-01, 5.78064850e-01, 3.24041516e-01, 4.23024858e-01, 7.75847324e-01, -7.16649418e-01, -7.04859753e-01, -3.48138314e-01, 2.32015221e-01, 9.16999718e-01, -4.17894767e-01, 3.73356925e-01, -9.15543539e-01, -8.74992737e-01, 6.28797391e-01, 6.70704305e-01, -6.64622476e-02, -1.57428024e-01, 1.41703106e-01, 4.78111913e-01, -8.89833183e-01, 2.48361298e-01, 1.71500734e-01, -1.03241151e-01, -2.92539465e-01, 8.67050469e-01, -4.65488136e-01, -4.37401239e-01, 9.81192729e-03, 1.76624177e-01, 4.63404565e-01, -6.48977854e-01, 2.10775692e-02, 5.69191679e-04, 7.85535264e-01, -2.34634585e-01, 8.96057273e-01, -3.05549564e-01, 3.67786398e-01, 6.49269763e-01, -2.74940115e-02, 9.68351743e-01, 2.07628076e-01, 1.85028318e-01, -3.49798716e-01, 8.73610682e-01, -8.08034049e-01, 7.66591492e-01, 1.36035466e-01, -8.76153051e-01, -9.42090961e-01, 2.54198007e-01, 2.09278522e-01, -8.43584950e-01, 5.45907125e-01, -7.13366751e-01, -7.26307843e-02, 4.97412749e-01, 7.79227666e-01, -2.41219689e-01, -4.15127476e-01, 1.85804799e-02, 6.56272008e-02, -7.89156759e-01, 5.95946891e-01, -5.11510156e-01, 6.07075484e-01, -4.03649869e-01, -6.54580737e-02, 8.65639316e-01, 8.19513569e-01, 2.93617672e-01, -3.35847054e-01, -7.71555326e-01, 1.42208982e-01, -3.96017041e-01, -6.12988788e-01, 1.29411384e-01, -1.88205315e-01, 3.31118167e-01, -6.05975908e-01, -5.16439080e-01, 2.46344907e-01, 5.97476702e-01, 8.92727341e-02, 8.77082477e-01, 4.78201578e-01, -9.46106323e-01, -2.35208227e-01, -9.78947208e-01, -8.69535860e-01, 3.62785391e-01, 7.88573716e-01, 4.13573947e-01, -4.22013528e-02, -5.68775015e-01, -8.36467872e-01, 3.46404408e-01, 9.89558378e-01, 8.96711938e-02, 9.67284551e-01, 4.71404282e-01, -8.13833601e-01, -4.15551966e-01, -4.53903666e-01, -8.57667173e-01, -5.76563967e-01, -4.14422920e-01, -2.87165417e-01, 9.12734981e-01, 3.20487724e-01, 9.01024809e-01, -8.06264818e-01, -4.12511687e-01, 2.99419879e-01, -1.58010723e-01, -8.50696651e-01, 4.77613710e-01, 1.70740085e-01, -3.10658805e-01, -4.22856328e-01, -4.71636816e-01, -4.46162130e-01, 6.84712020e-01, -6.60755426e-01, -4.95826747e-01, 1.83750401e-01};

  element_t weight_raw[] = {4.69434058e-01, -1.38583424e+00, -1.19454332e+00, 7.51993600e-01, 1.67906442e+00, -4.73379739e-01, 9.41878306e-01, -4.58280482e-01, -8.89644787e-01, 7.47770021e-01, 1.86899005e+00, -3.76912984e-02, -2.68109599e+00, -1.01194085e-01, 2.78046317e-02, -3.78493153e-01, -7.43905667e-01, 1.66726823e+00, -2.39953374e+00, -2.90112339e+00, 1.69425602e+00, 2.11895221e+00, -1.65778947e+00, 7.61535409e-01, -2.61197826e+00, -1.56647519e+00, -2.41361783e-01, 9.76095418e-01, -1.69379028e+00, -1.80317946e-01, 2.86974591e+00, 7.83224328e-02, -1.79212071e-01, 9.96846111e-01, 1.27322826e-01, -1.45638535e+00, 1.94500748e+00, -2.22728921e+00, -1.96833731e+00, -1.95052845e+00, -7.08356663e-01, -2.39044050e+00, -6.61220349e-01, 1.85948655e+00, -8.77489231e-01, 2.25910682e+00, 2.75299436e+00, 2.03237053e+00, -2.30972770e+00, 3.74469986e-01, -2.34937194e+00, 2.25521054e+00, -8.99953121e-01, 2.38629051e+00, -2.25493565e+00, 8.27170971e-01, 2.23515090e+00, -2.99360661e+00, -1.17168090e+00, -2.82705197e+00, 2.98377018e-01, -1.94885169e+00, 5.40153173e-01, -2.96927632e+00, -1.30786336e+00, 1.55878752e+00, 2.23167008e+00, 3.25273789e-02, -9.75319840e-02, -2.71345071e+00, 1.50482951e+00, 1.98800589e+00, 2.19620308e+00, 1.96069188e+00, -2.51859384e-03, -2.94740383e+00, -9.52835533e-01, 1.44073713e+00, 2.46472884e+00, -1.23625174e+00, -1.87975626e+00, 2.30530176e+00, -6.95593244e-01, 7.01437086e-01, 5.81853703e-01, -1.06019632e+00, 8.40219457e-01, -3.08456307e-01, 1.19075977e+00, -2.02837369e+00, -1.82785135e+00, -1.03247982e-01, 3.75951276e-04, 1.60856600e+00, -1.84283918e+00, 2.95301614e+00, -1.04820246e+00, 2.07600281e+00, 1.90885268e+00, 2.43943187e+00, 1.43667562e+00, -1.10003648e+00, -2.83465135e+00, 3.78231860e-01, 2.74004219e+00, -2.06394886e+00, 1.54640811e+00, -2.75194253e+00, -1.83270810e+00, 1.21537604e-01, -2.10613421e-01, 1.73705801e+00, -2.23164924e+00, 2.35449197e+00, -1.94164743e+00, -3.90715826e-01, -2.10387976e+00, 1.13258744e+00, 1.88402160e+00, -1.84470203e+00, 4.68833930e-01, 1.32519944e+00, -1.49205079e-01, -1.42829315e+00, 1.40477660e+00, -9.04758285e-01, 1.02878655e+00, -2.66964987e+00, 2.38227291e+00, 1.29870916e-01, -1.34866170e+00, 2.06100418e+00, -3.45158807e-01, 1.01549933e+00, 2.95588019e+00, 2.11601428e+00, 2.60128869e+00, 2.17276736e+00, -2.59770354e+00, -1.24910999e+00, -1.82202496e+00, -5.33936144e-01, -4.84902078e-01, 2.74960541e+00, 2.54449228e+00, 2.90201444e+00, -7.12005966e-01, 2.78452402e+00, 5.41890668e-01, 6.39412589e-03, -1.30741768e+00, -2.02580336e+00, -3.07274893e-01, -9.16216399e-01, 1.43133925e-01, 2.62978313e-01, -2.93526489e+00, -1.22066322e+00, -1.99031596e+00, 2.75104991e+00, -1.58140965e+00, 1.99593194e+00, 1.24653142e+00, 3.63953174e-01, 1.20670807e+00, -1.72797444e+00, 1.14623773e+00, 7.29634814e-01, 1.30469585e+00, -2.08381639e+00, -2.43447976e+00, 2.70710670e+00, -5.76311983e-01, 8.60548537e-01, 2.76294937e+00, 2.02390457e+00, -2.21619757e+00, 5.84615982e-03, -1.90966590e+00, -2.69773939e+00, 2.37040542e+00, -1.40377827e+00, -2.67741849e+00, -3.91919585e-03, 1.68066674e+00, 3.41687874e-01, -2.18967901e+00, -6.68539573e-01, -1.45396104e+00, 1.63947625e-01, 2.41602503e+00, 2.11868255e+00, 2.02093959e+00, -1.70472896e+00, -2.19870107e+00, -2.27854787e+00, 2.24774629e+00, -2.51982957e+00, -6.63516277e-01, -1.90908765e+00, -5.33080226e-01, 2.00029937e+00, 2.87068895e+00, -2.97450387e+00, 3.59138519e-01, 1.51067887e+00, -6.59731115e-01, -1.14836880e+00, 1.78586722e+00, 1.33662466e+00, 1.80534568e+00, 2.83009647e+00, 2.26499936e+00, 6.41048319e-01, -1.35574472e+00, 1.12644441e-01, 4.13352887e-01, 2.71106637e+00, -3.33341733e-01, 2.67315433e+00, 4.36720777e-01, 2.50423523e+00, -6.96118478e-01, -2.71824102e+00, 2.16307105e+00};

  element_t correct_raw[] = {3.845909,-2.465496,0.589378,1.481120,0.884907,1.961015,0.500441,-0.189879,1.270812,-4.281405,-1.402695,-2.822614,-0.758731,3.904691,2.566453,-0.056369,-1.723649,3.227181,-3.111451,0.287927,-1.381549,-0.714783,-0.548202,-6.959681,3.566275,1.420603,-0.957330,3.048718,0.258934,3.299982,-1.651939,1.008864,0.903139,-1.247975,-1.435244,-3.382528,-3.219559,1.330083,0.363935,-5.283397,-0.940881,2.381196,1.769042,2.943218,3.363449,2.244520,-2.112667,-2.043218,-0.242464,6.034330,-1.592443,0.036246,1.187824,-0.970723,0.590348,-0.434619,-0.056603,4.359330,-2.701239,0.125489,-5.196329,2.204993,1.455175,0.355276,1.358964,-0.867613,-0.587587,-0.731334,4.218861,4.345639,-1.509081,-2.908677,2.392304,-2.414278,-1.048870,0.428391,0.082674,3.568560,-3.110015,0.115598,3.548621,2.857935,-0.625213,-4.325654,-1.892525,-1.123329,-0.774052,0.787844,1.042803,0.060229,0.151543,4.252497,-1.506037,-1.548902,-1.435487,-0.952175,0.300459,-1.655010,-0.013100,0.678614,-3.680426,3.425972,-4.706930,-0.451061,-3.989499,-0.989955,5.115177,-2.533099,-3.652122,2.997863,0.900992,-5.339652,-3.255920,-1.657704,2.184265,-1.052566,-1.911232,-2.566213,6.258489,-0.026860,0.651487,0.560002,1.172848,1.257571,0.956609,0.778904,1.316195,1.400032,1.697551,0.516576,-0.005685,-0.894202,0.716617,1.504589,1.244175,1.204695,-0.934321,4.979046,-2.446317,1.565354,3.064934,-0.646009,1.603688,0.742192,-2.328596,0.895660,6.717861,2.642765,0.848957,-4.231883,-3.285070,-0.015358,7.085264,-4.229325,-1.369987,2.780561,-5.006955,1.614884,2.096627,-1.488195,-0.969727,1.439702,4.590145,-1.538701,-1.702743,-3.201614,0.370406,2.071748,-7.276389,-2.335459,-3.072445,1.612026,-2.150838,0.737521,-4.778410,-3.187677,2.995512,-6.008431,0.704727,-2.855818,0.790036,2.413476,-3.537482,2.981315,-0.254485,-1.552113,-2.812091,3.686908,-5.254025,-0.746237,1.206459,-0.118121,0.444311,2.352103,-2.083818,0.170356,-1.826362,3.922848,1.858447,5.231286,-2.764146,-2.587276,-4.684639,2.891425,-0.359263,-0.644281,-0.141690,-0.865859,3.503142,0.202909,-0.534896,3.400967,-1.291067,-1.489728,-5.936470,-1.071498,0.751956,-0.779727,0.653423,0.921970,-0.653335,-5.214388,3.525232,2.272589,-0.594273,-6.174189,2.074171,-0.064981,-3.958682,-1.996992,1.180740,2.552533,-0.547262,-4.072735,3.163729,3.513303,7.331469,-1.608581,0.152660,1.207877,-0.600691,-4.114732,1.254578,-1.372975,4.985206,3.773743,0.881443,1.881385,-0.933229,-0.050082,-4.220223,-2.887437,-2.506598,-1.019054,-2.116590,4.059282,-6.502472,0.513171,2.942820,-2.190843,0.193118,0.174548,3.709597,0.362227,5.922655,-3.711564,-0.757563,2.130336,-1.346752,1.886258,4.952934,-1.158211,-3.482955,2.205141,-0.718302,-2.713345,3.795985,1.131021,-4.311320,2.169356,1.192950,-4.840281,1.721761,-0.044846,-3.060223,0.248066,-0.244913,-0.932547,0.816900,0.224600,-4.948787,-0.134674,-3.191582,-2.350055,1.463386,1.687222,-0.595048,1.490398,-0.069272,-2.746801,-1.183448,2.672037,1.374844,0.254229,0.243653,0.507790,-0.184270,-5.576647,1.261626,3.873958,-3.129664,-2.727933,5.139612,-1.593915,-2.636973,3.210758,3.229241,-0.367013,-3.478060,-2.554052,-2.304151,5.030469,-4.121919,4.234983,-2.919047,2.168560,-1.494267,-3.873347,0.661109,-0.848496,1.305753,2.738763,-2.520663,4.145588,-1.815840,6.226233,-0.662227,3.165576,-1.726515,-2.950878,2.039074,0.643704,2.397059,-3.560896,8.360213,-0.755646,-7.782828,0.575504,3.175547,5.201870,-4.757899,-2.461914,2.117193,-3.109161,3.757377,1.658546,-0.709510,-3.765276,0.039588,-2.926754,-1.015649,-0.419961,-2.744845,5.806698,-3.276499,1.824898,-0.024031,-0.156863,3.289195,-2.479400,1.003833,-1.715507,2.672881,-0.217725,-1.219872,1.914917,-3.907726,-1.334660,1.338179,-1.517946,-3.130345,-0.822755,3.507508,-1.437899,3.916223,3.983954,2.923595,-1.394103,-4.147160,2.491761,1.978367,1.403063,-1.510401,0.352827,0.118895,-1.901039,-1.202303,0.890955,-0.933127,-2.061333,0.263045,0.138107,1.228044,-0.134735,-2.235384,1.225482,-0.722543,1.120772,-2.495472,5.619652,0.054132,-2.686479,0.510590,-0.544603,1.561153,-1.595171,-5.834252,-1.057082,0.858847,0.107422,0.016260,0.531911,0.865193,-3.562785,1.715964,0.110950,-1.510552,-1.685534,2.924967,0.452031,-0.204090,3.823882,1.627610,1.884829,-0.474959,0.575115,-1.333717,3.413519,-0.399864,2.377424,-0.587248,1.267216,-1.830861,4.679131,1.809601,-3.313360,-1.335972,1.390717,2.501116,-1.190962,-0.160235,-2.605512,-7.383038,2.106052,2.963035,5.050900,1.559346,-3.657293,-5.097447,-0.267254,-0.059867,1.618894,-6.695870,3.967587,-5.301947,-0.000668,-3.751898,5.394303,0.989375,0.850588,0.394054,6.269826,-5.399649,4.726970,-3.585848,1.895974,0.415230,-4.184267,3.788150,-1.250752,-2.909195,4.623605,2.784648,-0.868919,-0.466413,-3.555778,7.118162,-4.998521,0.903996,-3.350409,1.965437,-3.532233,-0.837523,-4.107516,2.996232,-3.463896,-2.378033,-2.893377,-3.105941,4.901556,0.292115,1.032904,-5.590875,-1.154327,4.016511,-2.017132,6.309350,-1.804926,-4.462908,-2.278412,-3.717663,3.976454,-1.462486,0.586214,2.888615,-4.026318,1.834803,-5.511013,3.181872,0.047725,-0.655399,1.408986,-2.944674,2.503071,-0.486758,2.895322,-3.710724,-1.381399,-3.486042,0.758689,2.867280,-3.031202,1.199251,4.763492,7.372323,-2.562604,-0.352317,1.376232,1.642581,-8.715605,-3.080049,-1.452860,-0.846489,1.697400,3.358842,-1.350145,-1.333365,-2.751623,2.454216,-1.311218,1.363098,-2.616372,0.796570,3.090573,-2.414805,0.990002,-2.065000,0.331888,1.513003,-0.708691,3.020488,4.619943,-1.150711,0.394267,2.056544,-1.762712,3.282127,1.840623,-2.073154,0.193464,0.789731,-3.199113,-1.656071,-2.182090,-2.504062,3.417483,1.727930,1.277252,-1.156230,3.277410,-3.618040,-0.056106,2.133247,-3.769239,-0.726722,1.450797,-1.988385,-4.102895,4.262424,-1.924873,0.878807,-0.630764,-0.619184,-2.721413,2.543353,3.202764,2.077056,2.233450,2.498300,2.892667,0.275376,-5.527104,3.038436,-0.279186,2.487061,2.694406,3.197979,-3.717859,1.092427,0.033140,1.502709,1.334429,-0.570145,0.485120,-4.467134,0.858854,-4.443572,-0.210695,5.604330,-3.935902,-0.749726,-5.713008,1.766799,3.561099,-5.418397,-3.463311,-1.850701,-1.196525,-4.872187,-2.094872,-4.654514,1.469945,-0.841315,-1.244426,2.767333,0.702389,1.786901,-1.765896,-1.321167,2.578320,-2.647848,-1.175844,-3.604388,-0.160364,-1.792441,-1.974482,2.328102,2.167312,1.517444,-1.638734,6.621651,3.894485,1.868028,2.828482,-5.493174,-2.068624,-7.601443,-2.733574,1.624552,0.383270,-0.776599,-1.453350,-0.825454,-0.080702,2.731013,0.353324,-0.977805,1.847023,-1.878736,1.146624,-1.890144,1.372788,-2.773447,-1.454903,-0.934755,1.400794,2.410461,0.728298,0.387292,-2.150439,-3.226502,-0.386374,2.402369,-1.855253,-0.782380,1.934853,1.624400,1.711406,0.431427,3.851121,3.935659,-4.803809,-5.327802,-4.906329,0.546551,2.639792,5.612206,-0.947134,-0.206208,-1.519087,-2.879827,0.459535,-0.827835,5.771118,2.951143,2.098813,0.175488,-1.809531,0.148246,-4.536745,-2.495619,-0.064182,-0.904609,2.935551,1.661551,7.521520,1.146868,-5.891061,0.623886,1.093173,-9.421807,0.292302,2.805339,1.087620,5.032285,1.176152,-1.030974,3.026438,-3.765660,-4.720321,-5.311965,-2.660792,1.914408,-2.375712,-0.449142,2.273593,-2.844501,-1.737085,-0.448928,-2.468417,-2.820817,0.000078,-0.924522,-2.148602,-1.027556,-1.951380,0.668982,1.775566,-1.426799,-3.466037,1.627961,-1.873865,-0.091591,-1.550399,0.858698,3.116195,-2.100472,-0.567559,-8.164916,-1.114094,-0.848759,5.331138,-1.377731,-3.351110,-4.675035,-0.926645,-1.931528,-3.059429,-1.072201,4.962532,2.047294,3.908442,-4.517472,-3.468467,-6.120145,8.230668,3.504920,1.434048,-2.316000,4.302949,4.643143,-3.565472,-2.296573,0.407805,-1.101896,-0.071062,-0.200591,0.097454,-1.563670,0.001497,1.109972,-2.591698,4.121682,1.060892,2.735012,-1.224149,0.474362,-0.335191,-0.733630,0.419724,4.662849,0.287340,0.324344,-3.199001,1.897782,2.661641,-3.623981,-2.752945,-3.397589,6.643158,0.331597,0.368056,-2.144771,1.710681,2.233165,-1.665719,4.579946,-2.548426,-1.692296,-0.066699,-2.146310,-0.335489,-4.462538,1.854461,1.217237,0.790415,0.914001,0.275215,-0.163005,1.370544,0.916207,-1.987438,1.111030,-2.643503,-0.433071,0.822819,-5.347632,-3.084691,-0.065221,2.019889,-1.122666,-1.579674,4.524657,3.831008,1.251040,-1.557160,0.717001,3.325828,3.267263,-3.468916,1.712815,-0.795155,0.908987,-0.715514,2.159034,0.062320,4.891331,-3.949323,-1.230718,-2.297485,0.318681,-0.132351,1.125314,-0.369322,-1.501528,-2.795066,0.987646,1.234304,-1.547513,-1.251885,1.841461,3.378464,3.093324,0.240595,-3.017777,-3.058540,-3.520401,0.534534,1.079248,0.474376,-0.547142,-0.211391,-4.003759,0.744047,3.028892,-1.987803,-0.344247,-2.585548,0.841339,1.026980,-4.167926,3.490149,0.929835,3.928648,-1.729900,-0.307800,-1.613881,-0.598899,-0.142021,-2.129205,1.743139,-0.737894,1.799715,-1.000266,-1.037859,-2.526422,-1.643132,2.170768,4.925752,-0.286835,1.727989,0.023550,-1.543920,-1.383892,0.631848,-5.272579,-1.926543,4.492075,-2.087584,-5.156664,1.065979,-1.177350,-0.520421,-0.986071,-2.641171,-2.585831,3.874002,7.958843,3.671890,-4.354837,1.680861,2.413560,-0.639488,-1.371515,-0.515369,2.981484,-2.769229,-1.230824,4.281669,1.342370,1.151566,-5.823674,-1.802693,-2.042440,1.547603,-0.848870,3.133150,-3.274272,0.367319,-0.230035,0.745955,-3.240587,-4.532187,-2.574762,-0.437319,-4.208837,2.214460,-0.194591,2.188668,-1.135109,1.517471,5.862356,1.892405,-1.724983,5.147058,3.033638,-2.263613,-1.375627,2.190180,5.889580,4.656123,1.170402,2.786150,-0.341040,-0.511466,-2.435976,-3.511522,-0.627698,-3.819376,1.037428,-0.514548,1.098882,0.933592,1.872988,-8.126570,-2.264100,-3.390448,1.550356,1.942004,4.993554,-2.604221,-1.926685,-0.953312,-4.998725,1.638166,-4.298827,0.512733,0.227010,2.066640,2.783075,-4.690213,4.231190,3.602269,-3.945251,2.042390,-0.651908,0.647119,0.012408,1.910756,-2.761156,2.671400,-2.801385,6.672872,-2.148654,0.451089,5.693497,0.332481,2.002918,0.350823,0.499623,-0.007228,-3.447148,0.931386,-1.993840,3.500704,0.855663,0.188628,-0.810710,1.723905,0.596219,-2.351015,0.583639,-4.388320,1.867962,2.433845,2.751505,-3.456889,-2.252622,2.140037,-1.638006,1.520913,-3.038548,-0.434819,-3.052736,-3.437835,0.750551,-2.055249,2.182165,-1.098331,-1.366136,-2.756183,-2.673218,2.839476,-1.093923,1.178658,-2.138683,-0.248647,3.898692,0.030749,0.876516,0.018095,-3.955104,1.516175,0.083857,2.215161,-0.379718,3.082961,-4.157503,0.682712,0.683552,-1.436876,0.817879,7.906262,0.141579,-4.394066,1.549221,0.481245,5.265841,-0.389739,0.362608,-1.189218,0.664165,0.173081,1.558873,-12.055103,2.550744,3.567558,-2.026495,-5.126311,-1.677818,-2.886195,1.721386,0.128932,0.491950,0.459580,-1.344010,1.431260,1.094958,3.743199,1.380119,4.147727,0.471604,3.309261,-4.622769,-1.304540,-7.668621,4.168849,0.910127,-0.098865,2.816075,0.395532,3.652626,2.402667,1.568862,-2.662644,-0.717507,-0.233553,1.926129,-7.410192,0.937877,4.227310,0.483673,0.747444,-0.491815,-2.237600,-0.041031,-0.680294,0.573803,-1.361226,0.368102,1.154885,0.299771,-0.690162,-0.828546,3.405936,1.723751,2.138912,0.284385,0.027117,1.467832,-2.583982,-6.070893,0.797992,1.138187,-0.269456,-5.656669,0.640806,4.110087,0.411261,-0.007998,1.857130,-1.483325,-0.245687,4.284704,0.548963,3.017456,3.757858,-0.970869,1.648517,-0.837075,2.539185,-0.511228,0.356514,-3.784048,-1.640567,0.074247,-0.569734,0.968597,-2.400729,2.390262,-1.559955,-3.062568,3.845081,-1.386799,-2.786325,2.454053,1.909970,-3.490635,-1.613415,7.343758,0.964060,-3.060417,-3.838192,1.454522,-0.078194,2.886062,-1.144066,-5.584843,-0.790844,-1.962379,1.554136,-2.598253,-0.482817,2.400339,-0.811326,3.272938,-2.713212,2.583893,0.204418,2.996893,-1.979292,0.563200,-2.046627,-2.991953,-0.495785,0.244667,0.261625,-0.379248,-0.723829,-0.336582,-0.534737,2.750881,0.831466,-4.104002,-2.915404,2.252081,4.178073,1.410509,-1.227218,-3.684549,5.955318,0.123355,-7.035538,1.578054,-0.706451,1.404112,-3.802033,8.739538,-0.451384,4.340664,-4.984023,0.037622,2.116707,5.768828,3.840294,4.408830,-1.111681,1.143913,3.206058,-10.092641,3.985839,-0.754816,1.450521,-0.316634,4.111164,-2.977961,-0.303762,-1.967275,1.388052,0.283297,0.671391,1.793113,-3.034674,-1.171494,-2.714860,3.686311,-3.086224,0.900468,7.322951,-1.853812,-0.397175,5.190455,3.079471,-0.761012,-4.802870,-1.163616,2.971545,-1.201709,1.798075,-0.794905,-2.184322,2.944897,0.617656,-10.066653,-9.239977,2.802136,-3.253031,0.756321,3.079593,-3.417022,2.138905,-0.325971,2.106755,-1.355544,-2.960357,2.897754,-1.672802,2.118155,-1.535472,-0.677410,-3.817737,3.536949,2.148230,-2.728638,-1.727207,2.952166,-1.168653,-0.475837,-0.307470,-2.027559,-1.103787,1.063904,4.816449,3.064092,4.645157,7.486440,-0.698588,-1.232254,-0.609907,-0.135891,-0.866970,0.268786,-0.952668,2.528575,-2.181770,-2.289371,-1.316394,2.917477,4.522099,-4.378400,1.513688,0.946281,-0.679696,0.669249,1.501191,4.138062,-0.630634,2.002233,-0.704404,-1.113182,1.453661,2.429029,-6.343977,-2.888141,0.387189,3.393198,-0.363554,-2.157344,-6.250227,-2.618359,-5.624626,5.672784,-1.707563,-1.105783,-1.045594,1.339093,2.604943,-3.861166,2.190233,-2.907994,5.226472,-2.840702,-1.388996,-2.087420,2.427795,-1.240384,0.008698,1.419662,1.916767,-0.709483,2.184299,0.895472,1.579453,-2.638179,-0.341889,-1.185175,-3.911908,-0.770060,-0.386477,-3.275759,3.670346,-0.387191,-1.094651,-5.091290,-1.277973,6.066463,1.083110,5.202495,1.171572,2.931968,2.038907,-2.205145,-0.321943,-3.238070,1.692306,-3.002420,-4.857695,-3.754157,-0.847138,-1.005508,-2.379500,-6.203844,2.098895,-2.681978,0.610876,2.638650,1.027793,3.635301,1.643098,-0.229483,-5.741793,-3.203817,-1.120786,2.685856,3.924101,-2.562212,-1.195341,-4.507626,1.256577,-0.674392,-0.616030,0.552610,-3.464050,3.334847,3.140853,3.091267,-1.212179,1.851817,2.494154,-3.197718,-5.242874,-1.206107,0.188038,1.320299,4.161740,-2.693547,-6.056599,-1.145394,6.017052,1.975902,2.242362,0.908978,-2.219457,1.389856,-3.643971,-0.636760,-2.000452,-2.159404,1.028562,-1.120047,2.253449,1.083152,-1.291330,-7.183073,-3.465961,-4.383882,2.590384,2.485516,3.266732,3.486783,1.706422,2.686608,0.625926,-2.523892,1.246413,-5.327024,-2.070274,1.517101,-1.975741,-0.543594,1.475664,4.718972,-2.302999,-2.141681,-0.878854,1.442263,2.517845,-1.082412,-2.035593,-3.093157,2.698419,4.481010,1.948406,0.885463,4.926666,1.552248,2.008760,-1.162539,0.363607,0.673476,2.491370,-2.231702,-0.723514,-4.161361,-2.953119,-3.506404,-1.115868,2.693108,-1.059692,1.371176,-1.101700,1.755706,-0.267018,3.584848,7.465904,0.585300,-1.244709,-1.374579,0.989673,0.712619,-0.637506,-0.075358,-3.071044,1.048911,-2.374567,-0.113002,-1.570234,1.486891,-2.824701,-1.042766,0.785679,2.286445,2.842867,-1.501233,1.097603,0.778050,-1.896764,5.698798,-2.953891,1.280133,-5.356856,-2.095205,-0.286779,1.757654,1.307184,-3.128605,3.348935,3.614693,-1.420319,2.337458};

  element_t bias_raw[] = {1.324, 3.829, 2.112, 0.003, 0.28464628};

  auto& ms = MinervaSystem::Instance();
  Scale input_size{7, 6, 3, 2};
  Scale weight_size{5, 3, 5, 3};
  Scale correct_size{17, 9, 5, 2};
  Scale bias_size{5};
  shared_ptr<element_t> input_ptr(new element_t[input_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> bias_ptr(new element_t[bias_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), input_raw, input_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));
  memcpy(bias_ptr.get(), bias_raw, bias_size.Prod() * sizeof(element_t));

  ms.SetDevice(cpu_device);
  ImageBatch top = NArray::MakeNArray(input_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  NArray bottom = NArray::Zeros(correct_size);
  ConvInfo conv_info(2, 3, 2, 3);

  ImageBatch output = Convolution::ConvBackwardData(top, bottom, weight, conv_info);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
	EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
	//printf("%f,",output_ptr.get()[i]);
  }
}

/*
 *  Backward Bias
 */


TEST(ConvBackwardBias, CpuWithoutPaddingSmall) {
  element_t top_diff_raw[] = {8,6,4,2};
  element_t weight_raw[] = {1,2,3,4};
  element_t correct_raw[] = {20};
  Scale top_size{2, 2, 1, 1};
  Scale weight_size{2, 2, 1, 1};
  Scale correct_size{1, 1, 1, 1};
  auto& ms = MinervaSystem::Instance();
  shared_ptr<element_t> input_ptr(new element_t[top_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), top_diff_raw, top_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));
  ms.SetDevice(cpu_device);
  ImageBatch input = NArray::MakeNArray(top_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  ConvInfo conv_info(0, 0, 1, 1);
  NArray output = Convolution::ConvBackwardBias(input);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
  }
}


TEST(ConvBackwardBias, CpuWithoutPaddingSmallDepth2) {
  element_t input_raw[] = {1,2,3,4,5,6,7,8};
  element_t correct_raw[] = {10.000000,26.000000};
  auto& ms = MinervaSystem::Instance();
  Scale input_size{2, 2, 2, 1};
  Scale correct_size{2};
  shared_ptr<element_t> input_ptr(new element_t[input_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), input_raw, input_size.Prod() * sizeof(element_t));
  ms.SetDevice(cpu_device);
  ImageBatch input = NArray::MakeNArray(input_size, input_ptr);
  ConvInfo conv_info(0, 0, 1, 1);

  NArray output = Convolution::ConvBackwardBias(input);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
    //printf("%f,",output_ptr.get()[i]);
  }
}


TEST(ConvBackwardBias, CpuWithPaddingSmall) {
  element_t input_raw[] = {1,2,3,4};
  element_t correct_raw[] = {10.000000};
  auto& ms = MinervaSystem::Instance();
  Scale input_size{2, 2, 1, 1};
  Scale correct_size{1, 1, 1, 1};
  shared_ptr<element_t> input_ptr(new element_t[input_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), input_raw, input_size.Prod() * sizeof(element_t));
  ms.SetDevice(cpu_device);
  ImageBatch input = NArray::MakeNArray(input_size, input_ptr);

  NArray output = Convolution::ConvBackwardBias(input);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
    //printf("%f,",output_ptr.get()[i]);
  }
}


TEST(ConvBackwardBias, CpuWithoutPadding) {
  element_t input_raw[] = {8.59232186e-01, -3.67248891e-01, -6.32162377e-01, -5.90879443e-01, 1.35450058e-01, 1.91089406e-01, 9.29029039e-01, 3.06354194e-01, 4.97813275e-01, 3.07139742e-01, 4.95429619e-01, 9.22613472e-01, -9.83223404e-01, -7.87111247e-01, -4.02592572e-01, 3.12822366e-01, 6.19625105e-01, 7.44351827e-01, 9.29295195e-01, 4.47370694e-01, 2.84950656e-01, 4.34907242e-01, -6.48019856e-02, -3.48830645e-01, -1.20710788e-01, 4.59378165e-01, 9.88029172e-01, 3.53747424e-01, 5.81645036e-01, -6.58171484e-01, -9.46301448e-01, 6.00740488e-01, 8.07445076e-01, -9.50647579e-01, -1.65053631e-02, 5.25103347e-02, 1.92732021e-01, -8.96084910e-01, 7.90179056e-01, 4.56532361e-01, 6.36700023e-01, 4.45505669e-04, 6.20378818e-01, -8.08062949e-01, -5.62099913e-01, -4.82561877e-01, -6.37884921e-02, -8.12535948e-02, 4.19019560e-01, -6.43893988e-01, 6.28997687e-02, -6.64515542e-01, 5.37627837e-01, 8.56341098e-01, 2.18987316e-01, -6.99633011e-01, -2.07465926e-02, -2.45310092e-01, 6.97202824e-01, 8.22194457e-01, -2.32302558e-01, -3.69008193e-01, 1.36788306e-01, -6.24363930e-01, -7.48316912e-01, 3.75191610e-01, 5.99213436e-01, 1.47073130e-01, 9.46459963e-01, 2.68108754e-01, 7.76843450e-01, -9.17048249e-03, -2.96766940e-01, 4.28460737e-01, 7.85823290e-03, -5.48724787e-01, -5.10051120e-01, 5.85601400e-01, -9.65517098e-03, 8.30187347e-01, 8.90743668e-01, 6.64644593e-02, -4.95014811e-01, 4.41724116e-01, -2.65122472e-01, -2.70311418e-03, -5.46849905e-01, -2.92868707e-01, 3.01703573e-01, -3.74134209e-01, 5.37470894e-01, 5.63674207e-01, 7.04818966e-01, 8.99811480e-01, -7.85354176e-01, 8.21450712e-01, -3.27889676e-01, 6.52760854e-01, 7.96201270e-01, -9.14569391e-01, -6.08410002e-01, -4.10997356e-01, 2.53999761e-01, -8.27553790e-01, -7.14109960e-01, 3.16530385e-02, 3.78682659e-01, 7.13251622e-01, 2.94723367e-01, 1.63237351e-01, 4.22231910e-01, -4.95166286e-01, 8.00319367e-01, -1.15412614e-01, -9.58958351e-01, 9.19322028e-01, 3.04450845e-01, 2.64125002e-02, 3.64712766e-01, -2.09192187e-02, 8.52980343e-01, 3.17595443e-02, -8.55680237e-01, 1.35016596e-01, 2.30486367e-01, 8.83092589e-01, -1.69273291e-01, -4.71120051e-01, -8.05213669e-01, -2.83115562e-02, -7.06742743e-02, -9.40481366e-01, 3.88554924e-01, 4.33894225e-01, 4.59622847e-01, -1.71297966e-01, -9.69802310e-01, 8.17950315e-01, 5.78757436e-01, -6.69601662e-01, -3.74428077e-01, 2.21890612e-01, -2.71019427e-01, -6.87922822e-01, -6.45392373e-01, 7.35779342e-01, -4.19810663e-01, 1.70359243e-01, -9.20102482e-02, -1.77643736e-01, 7.65268890e-01, 3.85416030e-01, -4.41453290e-01, -8.71119538e-01, -6.02752772e-01, 8.63365489e-01, 7.08827136e-01, 9.09469469e-01, -8.95493304e-01, 1.58943361e-01, -3.90074667e-02, -9.56582042e-01, -2.52759073e-01, -1.71816398e-01, 2.07814468e-01, 3.43497455e-01, 6.77731401e-01, 5.59052417e-01, -1.98597912e-01, 5.89058463e-01, 7.86248621e-01, -4.75020618e-01, 9.78394015e-01, 7.06614198e-01, 4.62954312e-01, -2.88868751e-01, 7.66578981e-01, 7.35918182e-01, 9.11532892e-01, -9.99785487e-01, -9.66917916e-01, -3.71859885e-01, 9.90632349e-01, -7.02311554e-01, -6.65245763e-01, 5.17144074e-01, -8.60940668e-01, 4.10946877e-01, -6.16694364e-02, -9.79623568e-01, 5.49647726e-01, 5.88402017e-01, -7.00861097e-01, -9.52592736e-01, 5.24127542e-01, -5.52659640e-01, -4.75651204e-01, -8.62609944e-02, -5.00146163e-01, 1.36567123e-01, 6.93885994e-01, -2.43800926e-01, -1.35069767e-01, 6.65238353e-01, -2.57736129e-01, -9.18893456e-01, 1.09342972e-01, -9.75075144e-02, 4.50601953e-01, -2.43098955e-01, 6.81324991e-01, -6.13706128e-02, 1.25286858e-01, 3.22398678e-01, -7.55162650e-02, 2.47273891e-01, -5.56238738e-01, 4.65726234e-01, -2.36635823e-01, -6.10330916e-01, -4.57674450e-01, -5.01549896e-01, -6.95721875e-01, 5.42747408e-01, -4.89176535e-01, -7.44913190e-01, 3.30334307e-01, -1.74390103e-01, 3.35535533e-01, 3.19627034e-01, -3.89244656e-01, -5.97551518e-01, -5.55945747e-01, -7.60058273e-01, -9.25709118e-01, -9.31736833e-01, -5.39006904e-01, -5.43292587e-01, 2.49821244e-01, 7.85122371e-01, 5.59456032e-01, 4.42902537e-01, -3.79115682e-01, -2.73833167e-01, -6.07836432e-01, 8.70983596e-01, 1.23468000e-01, 6.34583074e-01, -3.02172038e-01, 5.99428526e-01, -7.91791075e-01, 4.24240330e-01, 8.34896992e-01, 6.07170737e-01, -3.45773707e-01, -4.89785641e-01, -9.99565129e-03, -1.72778091e-01, -1.50125809e-01, -8.51243390e-01, 2.06781303e-01, 4.94399467e-01, 5.95152453e-01, -2.36998955e-01, 5.94316306e-01, -5.64052608e-02, 4.42798342e-01, -6.21574621e-01, -1.30808581e-01, 6.46936218e-01, 6.52545256e-01, -6.20949033e-01, -9.59795660e-01, 4.06982772e-01, -3.05459761e-01, -1.60992368e-01, 5.36177806e-01, 9.25756133e-01, 7.85130614e-01, -7.30115467e-01, 5.95609430e-01, 3.64181215e-01, 6.01057742e-02, 7.31963310e-01, 5.06496191e-01, -8.13594826e-01, -3.41121136e-01, -1.75274609e-01};
  element_t correct_raw[] = {8.537814,-2.465966,3.392074};
  auto& ms = MinervaSystem::Instance();
  Scale input_size{8, 6, 3, 2};
  Scale correct_size{3};
  shared_ptr<element_t> input_ptr(new element_t[input_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), input_raw, input_size.Prod() * sizeof(element_t));
  ms.SetDevice(cpu_device);
  ImageBatch input = NArray::MakeNArray(input_size, input_ptr);
  ConvInfo conv_info(0, 0, 1, 1);

  NArray output = Convolution::ConvBackwardBias(input);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
    //printf("%f,",output_ptr.get()[i]);
  }
}

TEST(ConvBackwardBias, CpuWithPadding) {
  element_t input_raw[] = {5.25103347e-02, 1.92732021e-01, -8.96084910e-01, 7.90179056e-01, 4.56532361e-01, 6.36700023e-01, 4.45505669e-04, -6.37884921e-02, -8.12535948e-02, 4.19019560e-01, -6.43893988e-01, 6.28997687e-02, -6.64515542e-01, 5.37627837e-01, -2.45310092e-01, 6.97202824e-01, 8.22194457e-01, -2.32302558e-01, -3.69008193e-01, 1.36788306e-01, -6.24363930e-01, 9.46459963e-01, 2.68108754e-01, 7.76843450e-01, -9.17048249e-03, -2.96766940e-01, 4.28460737e-01, 7.85823290e-03, 8.30187347e-01, 8.90743668e-01, 6.64644593e-02, -4.95014811e-01, 4.41724116e-01, -2.65122472e-01, -2.70311418e-03, 5.37470894e-01, 5.63674207e-01, 7.04818966e-01, 8.99811480e-01, -7.85354176e-01, 8.21450712e-01, -3.27889676e-01, 5.59052417e-01, -1.98597912e-01, 5.89058463e-01, 7.86248621e-01, -4.75020618e-01, 9.78394015e-01, 7.06614198e-01, 9.11532892e-01, -9.99785487e-01, -9.66917916e-01, -3.71859885e-01, 9.90632349e-01, -7.02311554e-01, -6.65245763e-01, -9.79623568e-01, 5.49647726e-01, 5.88402017e-01, -7.00861097e-01, -9.52592736e-01, 5.24127542e-01, -5.52659640e-01, 6.93885994e-01, -2.43800926e-01, -1.35069767e-01, 6.65238353e-01, -2.57736129e-01, -9.18893456e-01, 1.09342972e-01, -6.13706128e-02, 1.25286858e-01, 3.22398678e-01, -7.55162650e-02, 2.47273891e-01, -5.56238738e-01, 4.65726234e-01, -6.95721875e-01, 5.42747408e-01, -4.89176535e-01, -7.44913190e-01, 3.30334307e-01, -1.74390103e-01, 3.35535533e-01, -6.26250490e-01, -4.07823970e-01, 5.97030118e-01, -4.10443414e-01, 3.94243187e-01, -4.54081542e-01, 8.25056903e-01, -2.81417189e-01, 3.64354606e-01, 8.42783940e-01, -7.10151312e-01, -8.00251230e-01, -1.76794447e-01, 9.50250742e-01, -3.67423692e-01, 2.20271553e-01, -5.97610574e-01, 3.83795433e-01, -5.10746058e-01, 3.60743392e-01, -2.81245422e-02, 6.82296085e-01, -6.07151251e-01, -3.38833141e-01, 8.93259770e-01, 1.21436991e-02, -1.93168283e-01, -9.45876923e-01, -3.31218962e-01, -8.64580115e-01, -9.92351503e-01, -9.18064393e-01, -3.02090269e-01, -8.16091378e-01, 4.06314529e-02, 5.24922383e-02, -1.20153861e-01, 3.23110491e-01, -7.30429651e-01, 5.75698010e-01, -7.24044598e-01, 2.65846595e-01, 5.78064850e-01, 3.24041516e-01, 4.23024858e-01, 7.75847324e-01, -7.16649418e-01, -7.04859753e-01, -3.48138314e-01, 2.32015221e-01, 9.16999718e-01, -4.17894767e-01, 3.73356925e-01, -9.15543539e-01, -8.74992737e-01, 6.28797391e-01, 6.70704305e-01, -6.64622476e-02, -1.57428024e-01, 1.41703106e-01, 4.78111913e-01, -8.89833183e-01, 2.48361298e-01, 1.71500734e-01, -1.03241151e-01, -2.92539465e-01, 8.67050469e-01, -4.65488136e-01, -4.37401239e-01, 9.81192729e-03, 1.76624177e-01, 4.63404565e-01, -6.48977854e-01, 2.10775692e-02, 5.69191679e-04, 7.85535264e-01, -2.34634585e-01, 8.96057273e-01, -3.05549564e-01, 3.67786398e-01, 6.49269763e-01, -2.74940115e-02, 9.68351743e-01, 2.07628076e-01, 1.85028318e-01, -3.49798716e-01, 8.73610682e-01, -8.08034049e-01, 7.66591492e-01, 1.36035466e-01, -8.76153051e-01, -9.42090961e-01, 2.54198007e-01, 2.09278522e-01, -8.43584950e-01, 5.45907125e-01, -7.13366751e-01, -7.26307843e-02, 4.97412749e-01, 7.79227666e-01, -2.41219689e-01, -4.15127476e-01, 1.85804799e-02, 6.56272008e-02, -7.89156759e-01, 5.95946891e-01, -5.11510156e-01, 6.07075484e-01, -4.03649869e-01, -6.54580737e-02, 8.65639316e-01, 8.19513569e-01, 2.93617672e-01, -3.35847054e-01, -7.71555326e-01, 1.42208982e-01, -3.96017041e-01, -6.12988788e-01, 1.29411384e-01, -1.88205315e-01, 3.31118167e-01, -6.05975908e-01, -5.16439080e-01, 2.46344907e-01, 5.97476702e-01, 8.92727341e-02, 8.77082477e-01, 4.78201578e-01, -9.46106323e-01, -2.35208227e-01, -9.78947208e-01, -8.69535860e-01, 3.62785391e-01, 7.88573716e-01, 4.13573947e-01, -4.22013528e-02, -5.68775015e-01, -8.36467872e-01, 3.46404408e-01, 9.89558378e-01, 8.96711938e-02, 9.67284551e-01, 4.71404282e-01, -8.13833601e-01, -4.15551966e-01, -4.53903666e-01, -8.57667173e-01, -5.76563967e-01, -4.14422920e-01, -2.87165417e-01, 9.12734981e-01, 3.20487724e-01, 9.01024809e-01, -8.06264818e-01, -4.12511687e-01, 2.99419879e-01, -1.58010723e-01, -8.50696651e-01, 4.77613710e-01, 1.70740085e-01, -3.10658805e-01, -4.22856328e-01, -4.71636816e-01, -4.46162130e-01, 6.84712020e-01, -6.60755426e-01, -4.95826747e-01, 1.83750401e-01};
  element_t correct_raw[] = {10.754934,-2.306509,-9.067871};
  auto& ms = MinervaSystem::Instance();
  Scale input_size{7, 6, 3, 2};
  Scale correct_size{3};
  shared_ptr<element_t> input_ptr(new element_t[input_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), input_raw, input_size.Prod() * sizeof(element_t));
  ms.SetDevice(cpu_device);
  ImageBatch input = NArray::MakeNArray(input_size, input_ptr);

  NArray output = Convolution::ConvBackwardBias(input);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i] , 0.001);
    //printf("%f,",output_ptr.get()[i]);
  }
}


/*
 * Backward Filter
 */



TEST(ConvBackwardFilter, CpuWithoutPaddingSmall) {
  element_t top_diff_raw[] = {8,6,4,2};
  element_t weight_raw[] = {1,2,3,4};
  element_t bottom_raw[] = {10,11,12,13,14,15,16,17,18};
  element_t correct_raw[] = {306,286,246,226};
  Scale top_size{2, 2, 1, 1};
  Scale weight_size{2, 2, 1, 1};
  Scale bottom_size{3, 3, 1, 1};
  Scale correct_size{2, 2, 1, 1};
  auto& ms = MinervaSystem::Instance();
  shared_ptr<element_t> input_ptr(new element_t[top_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> bottom_ptr(new element_t[bottom_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), top_diff_raw, top_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));
  memcpy(bottom_ptr.get(), bottom_raw, bottom_size.Prod() * sizeof(element_t));
  ms.SetDevice(cpu_device);
  ImageBatch input = NArray::MakeNArray(top_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  ImageBatch bottom = NArray::MakeNArray(bottom_size, bottom_ptr);

  ConvInfo conv_info(0, 0, 1, 1);
  ImageBatch output = Convolution::ConvBackwardFilter(input, bottom, weight, conv_info);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
  }
}

TEST(ConvBackwardFilter, CpuWithPaddingSmall) {
  element_t top_diff_raw[] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24};
  element_t weight_raw[] = {1,2,3,4,11,12,13,14};
  element_t bottom_raw[] = {10,11,12,13,14,15,16,17,18,19};
  element_t correct_raw[] = {217.000000,204.000000,191.000000,178.000000,601.000000,564.000000,527.000000,490.000000};
  Scale bottom_size{2, 5, 1, 1};
  Scale weight_size{2, 2, 1, 2};
  Scale top_size{3, 4, 2, 1};
  Scale correct_size{2, 2, 1, 2};
  auto& ms = MinervaSystem::Instance();
  shared_ptr<element_t> input_ptr(new element_t[top_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> bottom_ptr(new element_t[bottom_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), top_diff_raw, top_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));
  memcpy(bottom_ptr.get(), bottom_raw, bottom_size.Prod() * sizeof(element_t));
  ms.SetDevice(cpu_device);
  ImageBatch input = NArray::MakeNArray(top_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  ImageBatch bottom = NArray::MakeNArray(bottom_size, bottom_ptr);

  ConvInfo conv_info(3, 2, 3, 2);
  ms.SetDevice(gpu_device);
  ImageBatch output = Convolution::ConvBackwardFilter(input, bottom, weight, conv_info);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
	//printf("%f,",output_ptr.get()[i]);
  }
}

TEST(ConvBackwardFilter, CpuWithoutPadding) {
  element_t bottom_raw[] = {8.59232186e-01, -3.67248891e-01, -6.32162377e-01, -5.90879443e-01, 1.35450058e-01, 1.91089406e-01, 9.29029039e-01, 3.06354194e-01, 4.97813275e-01, 3.07139742e-01, 4.95429619e-01, 9.22613472e-01, -9.83223404e-01, -7.87111247e-01, -4.02592572e-01, 3.12822366e-01, 6.19625105e-01, 7.44351827e-01, 9.29295195e-01, 4.47370694e-01, 2.84950656e-01, 4.34907242e-01, -6.48019856e-02, -3.48830645e-01, -1.20710788e-01, 4.59378165e-01, 9.88029172e-01, 3.53747424e-01, 5.81645036e-01, -6.58171484e-01, -9.46301448e-01, 6.00740488e-01, 8.07445076e-01, -9.50647579e-01, -1.65053631e-02, 5.25103347e-02, 1.92732021e-01, -8.96084910e-01, 7.90179056e-01, 4.56532361e-01, 6.36700023e-01, 4.45505669e-04, 6.20378818e-01, -8.08062949e-01, -5.62099913e-01, -4.82561877e-01, -6.37884921e-02, -8.12535948e-02, 4.19019560e-01, -6.43893988e-01, 6.28997687e-02, -6.64515542e-01, 5.37627837e-01, 8.56341098e-01, 2.18987316e-01, -6.99633011e-01, -2.07465926e-02, -2.45310092e-01, 6.97202824e-01, 8.22194457e-01, -2.32302558e-01, -3.69008193e-01, 1.36788306e-01, -6.24363930e-01, -7.48316912e-01, 3.75191610e-01, 5.99213436e-01, 1.47073130e-01, 9.46459963e-01, 2.68108754e-01, 7.76843450e-01, -9.17048249e-03, -2.96766940e-01, 4.28460737e-01, 7.85823290e-03, -5.48724787e-01, -5.10051120e-01, 5.85601400e-01, -9.65517098e-03, 8.30187347e-01, 8.90743668e-01, 6.64644593e-02, -4.95014811e-01, 4.41724116e-01, -2.65122472e-01, -2.70311418e-03, -5.46849905e-01, -2.92868707e-01, 3.01703573e-01, -3.74134209e-01, 5.37470894e-01, 5.63674207e-01, 7.04818966e-01, 8.99811480e-01, -7.85354176e-01, 8.21450712e-01, -3.27889676e-01, 6.52760854e-01, 7.96201270e-01, -9.14569391e-01, -6.08410002e-01, -4.10997356e-01, 2.53999761e-01, -8.27553790e-01, -7.14109960e-01, 3.16530385e-02, 3.78682659e-01, 7.13251622e-01, 2.94723367e-01, 1.63237351e-01, 4.22231910e-01, -4.95166286e-01, 8.00319367e-01, -1.15412614e-01, -9.58958351e-01, 9.19322028e-01, 3.04450845e-01, 2.64125002e-02, 3.64712766e-01, -2.09192187e-02, 8.52980343e-01, 3.17595443e-02, -8.55680237e-01, 1.35016596e-01, 2.30486367e-01, 8.83092589e-01, -1.69273291e-01, -4.71120051e-01, -8.05213669e-01, -2.83115562e-02, -7.06742743e-02, -9.40481366e-01, 3.88554924e-01, 4.33894225e-01, 4.59622847e-01, -1.71297966e-01, -9.69802310e-01, 8.17950315e-01, 5.78757436e-01, -6.69601662e-01, -3.74428077e-01, 2.21890612e-01, -2.71019427e-01, -6.87922822e-01, -6.45392373e-01, 7.35779342e-01, -4.19810663e-01, 1.70359243e-01, -9.20102482e-02, -1.77643736e-01, 7.65268890e-01, 3.85416030e-01, -4.41453290e-01, -8.71119538e-01, -6.02752772e-01, 8.63365489e-01, 7.08827136e-01, 9.09469469e-01, -8.95493304e-01, 1.58943361e-01, -3.90074667e-02, -9.56582042e-01, -2.52759073e-01, -1.71816398e-01, 2.07814468e-01, 3.43497455e-01, 6.77731401e-01, 5.59052417e-01, -1.98597912e-01, 5.89058463e-01, 7.86248621e-01, -4.75020618e-01, 9.78394015e-01, 7.06614198e-01, 4.62954312e-01, -2.88868751e-01, 7.66578981e-01, 7.35918182e-01, 9.11532892e-01, -9.99785487e-01, -9.66917916e-01, -3.71859885e-01, 9.90632349e-01, -7.02311554e-01, -6.65245763e-01, 5.17144074e-01, -8.60940668e-01, 4.10946877e-01, -6.16694364e-02, -9.79623568e-01, 5.49647726e-01, 5.88402017e-01, -7.00861097e-01, -9.52592736e-01, 5.24127542e-01, -5.52659640e-01, -4.75651204e-01, -8.62609944e-02, -5.00146163e-01, 1.36567123e-01, 6.93885994e-01, -2.43800926e-01, -1.35069767e-01, 6.65238353e-01, -2.57736129e-01, -9.18893456e-01, 1.09342972e-01, -9.75075144e-02, 4.50601953e-01, -2.43098955e-01, 6.81324991e-01, -6.13706128e-02, 1.25286858e-01, 3.22398678e-01, -7.55162650e-02, 2.47273891e-01, -5.56238738e-01, 4.65726234e-01, -2.36635823e-01, -6.10330916e-01, -4.57674450e-01, -5.01549896e-01, -6.95721875e-01, 5.42747408e-01, -4.89176535e-01, -7.44913190e-01, 3.30334307e-01, -1.74390103e-01, 3.35535533e-01, 3.19627034e-01, -3.89244656e-01, -5.97551518e-01, -5.55945747e-01, -7.60058273e-01, -9.25709118e-01, -9.31736833e-01, -5.39006904e-01, -5.43292587e-01, 2.49821244e-01, 7.85122371e-01, 5.59456032e-01, 4.42902537e-01, -3.79115682e-01, -2.73833167e-01, -6.07836432e-01, 8.70983596e-01, 1.23468000e-01, 6.34583074e-01, -3.02172038e-01, 5.99428526e-01, -7.91791075e-01, 4.24240330e-01, 8.34896992e-01, 6.07170737e-01, -3.45773707e-01, -4.89785641e-01, -9.99565129e-03, -1.72778091e-01, -1.50125809e-01, -8.51243390e-01, 2.06781303e-01, 4.94399467e-01, 5.95152453e-01, -2.36998955e-01, 5.94316306e-01, -5.64052608e-02, 4.42798342e-01, -6.21574621e-01, -1.30808581e-01, 6.46936218e-01, 6.52545256e-01, -6.20949033e-01, -9.59795660e-01, 4.06982772e-01, -3.05459761e-01, -1.60992368e-01, 5.36177806e-01, 9.25756133e-01, 7.85130614e-01, -7.30115467e-01, 5.95609430e-01, 3.64181215e-01, 6.01057742e-02, 7.31963310e-01, 5.06496191e-01, -8.13594826e-01, -3.41121136e-01, -1.75274609e-01};

  element_t weight_raw[] = {-2.99421235e+00, 5.85381379e-01, 1.09536925e+00, -8.02315431e-01, -6.21006855e-01, -1.47845127e-01, 4.86479403e-01, -2.17717723e+00, 2.99648504e+00, 4.39632527e-02, -4.15997727e-02, -1.87875147e+00, -1.22347191e+00, 1.79109036e+00, -1.23133024e+00, 1.18272956e+00, -1.36224463e+00, 2.47517071e+00, -1.20876460e+00, 2.33915863e+00, 2.68033376e+00, -1.98652306e+00, -8.44251566e-01, 1.09306382e+00, 2.52835182e+00, -2.13045394e+00, -2.40075369e+00, -5.30383341e-01, 2.85075222e+00, -2.75096075e+00, -1.87851423e+00, 6.52607928e-01, -2.47668771e+00, -1.10227108e+00, 6.60814659e-01, -1.79283172e+00, 1.15138630e+00, -1.53223817e+00, 1.08223018e+00, -8.43736265e-02, -1.43703113e+00, -1.30355808e+00, 2.43270972e+00, -1.34494388e+00, 2.04688826e+00, -1.82145375e+00, -1.01649942e+00, 2.67977931e+00, 3.64310972e-02, -5.79504850e-01, -2.83763077e+00, 7.30642137e-01, -9.15908959e-01, -1.33920463e+00, -2.61567136e+00, -9.93656887e-01, -2.59374035e+00, -2.97705451e+00, -2.75419318e+00, -9.06270806e-01, -2.44827413e+00, 1.21894359e-01, -1.70550112e+00, 2.94999927e+00, -1.39687703e+00, 1.08100832e+00, 1.57476715e-01, -3.60461582e-01, 9.69331474e-01, -2.19128895e+00, 1.72709403e+00, -2.17213379e+00, 7.97539786e-01, -1.71800785e+00, -2.85974811e+00, 7.61603840e-01, 8.52982359e-01, 8.52620021e-01, 2.18772540e+00, -9.76791579e-01, -5.34249680e-01, 6.61912103e-01, 2.64505914e+00, -2.08753638e+00, -1.89565196e+00, -2.07337027e+00, 1.27694596e+00, 2.56789897e+00, -4.63876920e-01, 2.71063582e-01, -1.06566621e+00, -2.03577190e+00, 1.21891215e+00, 1.38149044e+00, 2.76242723e+00, -7.77056575e-01, 1.30019035e+00, 2.91636731e+00, -2.33539465e+00, 1.54937129e+00, -2.05467527e+00, 1.89861153e+00, 3.24639277e-01, 4.90261325e-01, 2.61687350e+00, -3.93913469e-01, -6.52368818e-02, 9.96782801e-01, 7.80924006e-01, -2.21877150e+00, -8.76936173e-01, 8.10740308e-01, 2.51373517e+00, -2.45239968e+00, -2.57350725e+00, -5.17730183e-01, -1.70615298e+00, 1.18191789e-01, 3.51084133e-01, -1.57799016e-01, -1.70476727e+00, -1.56336669e+00, -1.69957048e+00, 9.34142269e-01, 2.07836070e+00, 2.58278636e+00, 1.80183310e+00, 1.08435507e+00, -1.75645825e+00, 1.44995835e+00, 1.18142751e+00, -7.09443154e-01, 2.10071475e+00, 1.68667087e-01, 2.35805441e+00, 1.92335625e+00, -1.62852828e+00, 1.92374382e+00, -2.16863145e+00, -1.05195029e-01, -2.10713666e+00, -3.10235670e-01, 9.95738834e-01, 1.73419455e+00, 9.72124549e-01, 1.26907457e+00, 2.32754197e+00, -2.14994825e+00, -2.11457926e+00, -1.04441494e+00, -2.80875702e+00, 1.12657737e+00, 1.58838027e+00, -8.99943488e-01, 6.96045664e-01, 2.75099915e+00, -1.25368430e+00, 1.12007078e+00, -2.74663062e+00, -2.62497821e+00, 1.88639217e+00, -3.80289825e-01, -6.47589408e-01, -1.01611392e+00, -2.54047030e-01, 2.01211291e+00, -1.99386743e-01, -4.72284073e-01, 4.25109318e-01, 1.43433574e+00, -2.66949955e+00, 7.45083894e-01, 7.26361966e-01, -2.99333681e+00, 6.17361038e-01, -2.75888753e+00, 5.14502201e-01, -3.09723452e-01, -8.77618394e-01, 2.60115141e+00, -1.39646441e+00, -1.31220372e+00, 2.94357819e-02, 8.80836712e-01, 2.82344057e+00, -2.78474712e+00, -4.60800803e-01, 5.29872532e-01, 1.39021370e+00, -1.94693356e+00, 6.32327077e-02, 1.70757504e-03, 2.35660579e+00, -7.03903755e-01, 9.77183021e-01, -2.71913064e+00, 1.50733970e+00, -7.87288246e-01, 2.68817182e+00, -9.16648691e-01, 1.10335919e+00, 1.94780929e+00, -8.24820346e-02, 2.90505523e+00, 6.22884229e-01, 1.55774899e+00, 1.10710017e+00, 2.59449736e+00, 2.69871283e+00, 2.94066677e+00, -2.24306770e+00, 2.85960370e+00, -1.62536606e+00, -1.88366146e+00, 5.52685321e-02, 1.82986096e-01, -1.30416455e+00, -1.13903079e+00, -1.14069374e+00, -1.40166668e+00, 5.60586905e-01, -1.69719377e+00, -5.85702494e-01, -1.26863256e+00, -1.95695511e+00};

  element_t top_raw[] = {-1.53458012e-01, -7.65405332e+00, 4.98830497e+00, 2.04852002e+00, -3.82358333e+00, 7.36837003e+00, 8.39924023e+00, -4.62756444e+00, -5.50727587e+00, 1.20214505e+01, -1.53043815e+01, 1.11244327e+00, 7.04805004e-01, 2.29797806e-01, -7.32889433e+00, 1.47271564e+01, 1.01044780e+01, 2.41905064e+00, -5.31388064e+00, -3.27185811e+00, -5.79821618e+00, 3.00265788e-01, 1.47316324e+00, -4.31265309e+00, -1.16285290e+01, -5.65152968e+00, -1.26282823e+00, -7.59112465e+00, -8.72511524e+00, -5.25022006e+00, -7.82986638e-01, 6.10214152e+00, 1.61352078e+01, -4.04867987e-01, -1.31349268e+01, -2.44915779e-01, 1.39773955e+01, 3.66806225e+00, 5.80719452e+00, 6.22372275e+00, 1.61941934e+00, 1.61922030e+00, 4.08148270e+00, -5.31495425e+00, 3.31723523e+00, 1.48087048e+01, 5.12534403e+00, -8.85206695e+00, 3.47283117e+00, 8.13983753e+00, -6.09539078e-02, -2.29926111e+00, 5.15988338e+00, -1.18856035e+01, -7.12207532e+00, 6.25921427e-01, 2.04809803e+00, 2.17005161e+00, 3.07331189e+00, 1.32922857e+00, -9.02002841e+00, -3.46313153e+00, -1.68674612e+00, -5.82162868e+00, 6.27101890e+00, 3.68211379e+00, 7.06585228e-01, 1.61090449e+00, 5.32800254e+00, 5.92726186e+00, 7.48984518e+00, -3.15173559e+00, -4.97384231e-01, 6.95062311e+00, 1.38288414e+01, -3.14463537e+00, -2.77009473e+00, 5.24369450e+00, 7.55776522e+00, -1.11608027e+01, 6.57839023e+00, -4.40262046e+00, 1.09980762e+00, 1.40552491e+00, -1.92546614e+01, -1.08176358e+00, 1.14700068e+00, 2.91672461e+00, -3.09855249e+00, -8.76800761e-01, -1.50497319e+01, 3.63177760e+00, 5.45905926e+00, 1.92832976e-01, -1.20174465e+01, -1.99778930e+00, -4.32951502e+00, 1.49937736e+00, 2.32108850e+00, -3.67743356e+00, -3.04202120e+00, -1.11109333e+00, -2.60361444e-01, 3.16173660e-01, 2.45348885e+00, -9.83839821e+00, -1.07808297e+01, 9.32800709e+00, -2.67422968e+00, -5.28735861e+00, -5.76634320e+00, 5.89462610e+00, -9.91125411e-01, 1.34330406e+01, -1.49107008e+01, -5.03363614e+00, 1.12514116e+00, -3.32207401e+00, 6.11599114e+00, 1.11681283e+00, 4.11900416e+00, -4.21087862e+00, 4.36223246e+00, -7.76174330e+00, 1.45358128e+00, 4.93798049e+00, 1.13569034e+01, 4.94783663e+00, -4.44187478e+00, -3.27488160e+00, 6.61695509e+00, -8.27047693e-01, 3.13530944e+00, -2.92434481e+00, -4.27918564e-01, -1.18010988e+01, 1.06067542e+00, -6.99189526e+00, 7.01859887e+00, 7.34324150e+00, 2.28063152e+00, 1.16676194e+00, -6.16082444e+00, -4.55011217e+00, -1.55240377e+01, -6.96617531e+00, 7.84952584e-03, -6.58186876e+00, -1.15664570e+00, 1.61505289e+00, 1.23032964e+00, -2.69841882e+00, 2.99208490e+00, 3.77462452e+00, -2.27055021e+00, 1.14624322e+00, -1.64543438e+00, 2.79936201e+00, -1.79692494e+01, -8.04918516e+00};

  element_t correct_raw[] = {-87.839737,55.670185,-2.760406,-5.037184,-29.532505,-16.696562,35.585823,-35.409763,55.847198,-12.123655,-5.045956,-58.838722,-10.460643,64.943695,-13.401913,36.588478,-21.025944,19.812962,-14.492578,35.101135,39.885696,-5.493200,-13.266821,3.828527,28.689999,2.148367,-22.143036,15.647212,19.494331,-26.957058,-14.216600,18.461151,-23.361153,14.402693,-29.035461,-11.999926,-13.112941,9.915014,25.131447,-37.037628,-47.017479,-30.786623,50.230354,-9.698263,23.699821,-11.928401,35.875587,20.286373,1.065355,-32.647820,-34.974159,20.347515,5.448040,-1.460605,-49.710472,-18.918600,-46.167141,-37.300568,-14.192636,-3.354599,11.379536,-6.960431,4.541770,17.439545,-10.376041,3.371535,-0.848792,17.778641,1.724992,-16.552511,19.132044,-23.863392,-10.383378,-20.947819,-0.630253,-23.926777,15.440426,-15.611677,-17.771730,15.887785,-47.121540,5.100863,43.666832,3.889046,-38.619736,-42.933716,-36.388340,41.083237,34.993313,-35.070477,4.692018,-43.588646,26.656734,27.559555,16.748703,10.674379,19.890995,43.985317,-38.925514,20.244083,-58.822952,17.664349,24.420860,20.843430,80.021469,16.170225,6.770903,-19.752224,-10.814628,-69.303635,-18.710674,49.350380,55.770599,-11.051724,-15.561520,0.656210,-37.447792,-24.433018,8.804070,12.136912,12.660419,0.621016,-53.088398,5.070529,62.691254,52.780792,49.502029,-23.385761,-48.703609,18.834047,24.661079,-2.795620,29.689743,14.102832,-14.084435,34.291759,18.688787,2.298650,-30.957550,-6.305978,-46.689964,-26.865265,41.511147,28.068226,-5.760167,16.610649,30.802259,-30.006382,-33.024563,-10.600061,-43.476139,6.808041,12.825454,15.900805,9.544801,10.004972,-25.930882,-3.735494,-5.218906,-41.269180,16.214556,32.120453,5.388186,-10.956462,17.061073,6.588340,19.301245,5.965245,-12.849375,16.033880,-11.121034,1.802675,-6.669435,-3.816042,26.183525,-2.271964,-0.275114,-13.881083,-3.661838,-25.868546,-36.923176,-3.584579,35.971779,31.142235,49.301235,-54.468193,-22.957298,48.690342,72.248535,24.877382,-32.391319,-7.476780,-6.798456,11.218929,18.607216,-30.798222,30.793110,-6.350722,27.036694,2.408312,31.936998,5.557388,-4.325306,13.619703,-22.029459,28.251791,36.107342,19.902391,40.932384,48.550446,31.950968,54.364944,-20.795389,-36.436943,24.947496,-0.428848,-4.887825,-10.809711,-25.472151,-0.949390,10.155606,-0.352958,8.584686,21.947765,-47.293579};

  auto& ms = MinervaSystem::Instance();
  Scale bottom_size{8, 6, 3, 2};
  Scale weight_size{5, 3, 3, 5};
  Scale top_size{4, 4, 5, 2};
  shared_ptr<element_t> bottom_ptr(new element_t[bottom_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> top_ptr(new element_t[top_size.Prod()], [](element_t* ptr) { delete[] ptr; });

  memcpy(bottom_ptr.get(), bottom_raw, bottom_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));
  memcpy(top_ptr.get(), top_raw, top_size.Prod() * sizeof(element_t));

  ms.SetDevice(cpu_device);
  NArray bottom = NArray::MakeNArray(bottom_size, bottom_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  NArray top = NArray::MakeNArray(top_size, top_ptr);
  ConvInfo conv_info(0, 0, 1, 1);

  ImageBatch output = Convolution::ConvBackwardFilter(top, bottom, weight, conv_info);
  auto output_ptr = output.Get();
  for (int i = 0; i < weight_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
	//printf("%f,",output_ptr.get()[i]);
  }
}

TEST(ConvBackwardFilter, CpuWithPadding) {
  element_t bottom_raw[] = {5.25103347e-02, 1.92732021e-01, -8.96084910e-01, 7.90179056e-01, 4.56532361e-01, 6.36700023e-01, 4.45505669e-04, -6.37884921e-02, -8.12535948e-02, 4.19019560e-01, -6.43893988e-01, 6.28997687e-02, -6.64515542e-01, 5.37627837e-01, -2.45310092e-01, 6.97202824e-01, 8.22194457e-01, -2.32302558e-01, -3.69008193e-01, 1.36788306e-01, -6.24363930e-01, 9.46459963e-01, 2.68108754e-01, 7.76843450e-01, -9.17048249e-03, -2.96766940e-01, 4.28460737e-01, 7.85823290e-03, 8.30187347e-01, 8.90743668e-01, 6.64644593e-02, -4.95014811e-01, 4.41724116e-01, -2.65122472e-01, -2.70311418e-03, 5.37470894e-01, 5.63674207e-01, 7.04818966e-01, 8.99811480e-01, -7.85354176e-01, 8.21450712e-01, -3.27889676e-01, 5.59052417e-01, -1.98597912e-01, 5.89058463e-01, 7.86248621e-01, -4.75020618e-01, 9.78394015e-01, 7.06614198e-01, 9.11532892e-01, -9.99785487e-01, -9.66917916e-01, -3.71859885e-01, 9.90632349e-01, -7.02311554e-01, -6.65245763e-01, -9.79623568e-01, 5.49647726e-01, 5.88402017e-01, -7.00861097e-01, -9.52592736e-01, 5.24127542e-01, -5.52659640e-01, 6.93885994e-01, -2.43800926e-01, -1.35069767e-01, 6.65238353e-01, -2.57736129e-01, -9.18893456e-01, 1.09342972e-01, -6.13706128e-02, 1.25286858e-01, 3.22398678e-01, -7.55162650e-02, 2.47273891e-01, -5.56238738e-01, 4.65726234e-01, -6.95721875e-01, 5.42747408e-01, -4.89176535e-01, -7.44913190e-01, 3.30334307e-01, -1.74390103e-01, 3.35535533e-01, -6.26250490e-01, -4.07823970e-01, 5.97030118e-01, -4.10443414e-01, 3.94243187e-01, -4.54081542e-01, 8.25056903e-01, -2.81417189e-01, 3.64354606e-01, 8.42783940e-01, -7.10151312e-01, -8.00251230e-01, -1.76794447e-01, 9.50250742e-01, -3.67423692e-01, 2.20271553e-01, -5.97610574e-01, 3.83795433e-01, -5.10746058e-01, 3.60743392e-01, -2.81245422e-02, 6.82296085e-01, -6.07151251e-01, -3.38833141e-01, 8.93259770e-01, 1.21436991e-02, -1.93168283e-01, -9.45876923e-01, -3.31218962e-01, -8.64580115e-01, -9.92351503e-01, -9.18064393e-01, -3.02090269e-01, -8.16091378e-01, 4.06314529e-02, 5.24922383e-02, -1.20153861e-01, 3.23110491e-01, -7.30429651e-01, 5.75698010e-01, -7.24044598e-01, 2.65846595e-01, 5.78064850e-01, 3.24041516e-01, 4.23024858e-01, 7.75847324e-01, -7.16649418e-01, -7.04859753e-01, -3.48138314e-01, 2.32015221e-01, 9.16999718e-01, -4.17894767e-01, 3.73356925e-01, -9.15543539e-01, -8.74992737e-01, 6.28797391e-01, 6.70704305e-01, -6.64622476e-02, -1.57428024e-01, 1.41703106e-01, 4.78111913e-01, -8.89833183e-01, 2.48361298e-01, 1.71500734e-01, -1.03241151e-01, -2.92539465e-01, 8.67050469e-01, -4.65488136e-01, -4.37401239e-01, 9.81192729e-03, 1.76624177e-01, 4.63404565e-01, -6.48977854e-01, 2.10775692e-02, 5.69191679e-04, 7.85535264e-01, -2.34634585e-01, 8.96057273e-01, -3.05549564e-01, 3.67786398e-01, 6.49269763e-01, -2.74940115e-02, 9.68351743e-01, 2.07628076e-01, 1.85028318e-01, -3.49798716e-01, 8.73610682e-01, -8.08034049e-01, 7.66591492e-01, 1.36035466e-01, -8.76153051e-01, -9.42090961e-01, 2.54198007e-01, 2.09278522e-01, -8.43584950e-01, 5.45907125e-01, -7.13366751e-01, -7.26307843e-02, 4.97412749e-01, 7.79227666e-01, -2.41219689e-01, -4.15127476e-01, 1.85804799e-02, 6.56272008e-02, -7.89156759e-01, 5.95946891e-01, -5.11510156e-01, 6.07075484e-01, -4.03649869e-01, -6.54580737e-02, 8.65639316e-01, 8.19513569e-01, 2.93617672e-01, -3.35847054e-01, -7.71555326e-01, 1.42208982e-01, -3.96017041e-01, -6.12988788e-01, 1.29411384e-01, -1.88205315e-01, 3.31118167e-01, -6.05975908e-01, -5.16439080e-01, 2.46344907e-01, 5.97476702e-01, 8.92727341e-02, 8.77082477e-01, 4.78201578e-01, -9.46106323e-01, -2.35208227e-01, -9.78947208e-01, -8.69535860e-01, 3.62785391e-01, 7.88573716e-01, 4.13573947e-01, -4.22013528e-02, -5.68775015e-01, -8.36467872e-01, 3.46404408e-01, 9.89558378e-01, 8.96711938e-02, 9.67284551e-01, 4.71404282e-01, -8.13833601e-01, -4.15551966e-01, -4.53903666e-01, -8.57667173e-01, -5.76563967e-01, -4.14422920e-01, -2.87165417e-01, 9.12734981e-01, 3.20487724e-01, 9.01024809e-01, -8.06264818e-01, -4.12511687e-01, 2.99419879e-01, -1.58010723e-01, -8.50696651e-01, 4.77613710e-01, 1.70740085e-01, -3.10658805e-01, -4.22856328e-01, -4.71636816e-01, -4.46162130e-01, 6.84712020e-01, -6.60755426e-01, -4.95826747e-01, 1.83750401e-01};

  element_t weight_raw[] = {4.69434058e-01, -1.38583424e+00, -1.19454332e+00, 7.51993600e-01, 1.67906442e+00, -4.73379739e-01, 9.41878306e-01, -4.58280482e-01, -8.89644787e-01, 7.47770021e-01, 1.86899005e+00, -3.76912984e-02, -2.68109599e+00, -1.01194085e-01, 2.78046317e-02, -3.78493153e-01, -7.43905667e-01, 1.66726823e+00, -2.39953374e+00, -2.90112339e+00, 1.69425602e+00, 2.11895221e+00, -1.65778947e+00, 7.61535409e-01, -2.61197826e+00, -1.56647519e+00, -2.41361783e-01, 9.76095418e-01, -1.69379028e+00, -1.80317946e-01, 2.86974591e+00, 7.83224328e-02, -1.79212071e-01, 9.96846111e-01, 1.27322826e-01, -1.45638535e+00, 1.94500748e+00, -2.22728921e+00, -1.96833731e+00, -1.95052845e+00, -7.08356663e-01, -2.39044050e+00, -6.61220349e-01, 1.85948655e+00, -8.77489231e-01, 2.25910682e+00, 2.75299436e+00, 2.03237053e+00, -2.30972770e+00, 3.74469986e-01, -2.34937194e+00, 2.25521054e+00, -8.99953121e-01, 2.38629051e+00, -2.25493565e+00, 8.27170971e-01, 2.23515090e+00, -2.99360661e+00, -1.17168090e+00, -2.82705197e+00, 2.98377018e-01, -1.94885169e+00, 5.40153173e-01, -2.96927632e+00, -1.30786336e+00, 1.55878752e+00, 2.23167008e+00, 3.25273789e-02, -9.75319840e-02, -2.71345071e+00, 1.50482951e+00, 1.98800589e+00, 2.19620308e+00, 1.96069188e+00, -2.51859384e-03, -2.94740383e+00, -9.52835533e-01, 1.44073713e+00, 2.46472884e+00, -1.23625174e+00, -1.87975626e+00, 2.30530176e+00, -6.95593244e-01, 7.01437086e-01, 5.81853703e-01, -1.06019632e+00, 8.40219457e-01, -3.08456307e-01, 1.19075977e+00, -2.02837369e+00, -1.82785135e+00, -1.03247982e-01, 3.75951276e-04, 1.60856600e+00, -1.84283918e+00, 2.95301614e+00, -1.04820246e+00, 2.07600281e+00, 1.90885268e+00, 2.43943187e+00, 1.43667562e+00, -1.10003648e+00, -2.83465135e+00, 3.78231860e-01, 2.74004219e+00, -2.06394886e+00, 1.54640811e+00, -2.75194253e+00, -1.83270810e+00, 1.21537604e-01, -2.10613421e-01, 1.73705801e+00, -2.23164924e+00, 2.35449197e+00, -1.94164743e+00, -3.90715826e-01, -2.10387976e+00, 1.13258744e+00, 1.88402160e+00, -1.84470203e+00, 4.68833930e-01, 1.32519944e+00, -1.49205079e-01, -1.42829315e+00, 1.40477660e+00, -9.04758285e-01, 1.02878655e+00, -2.66964987e+00, 2.38227291e+00, 1.29870916e-01, -1.34866170e+00, 2.06100418e+00, -3.45158807e-01, 1.01549933e+00, 2.95588019e+00, 2.11601428e+00, 2.60128869e+00, 2.17276736e+00, -2.59770354e+00, -1.24910999e+00, -1.82202496e+00, -5.33936144e-01, -4.84902078e-01, 2.74960541e+00, 2.54449228e+00, 2.90201444e+00, -7.12005966e-01, 2.78452402e+00, 5.41890668e-01, 6.39412589e-03, -1.30741768e+00, -2.02580336e+00, -3.07274893e-01, -9.16216399e-01, 1.43133925e-01, 2.62978313e-01, -2.93526489e+00, -1.22066322e+00, -1.99031596e+00, 2.75104991e+00, -1.58140965e+00, 1.99593194e+00, 1.24653142e+00, 3.63953174e-01, 1.20670807e+00, -1.72797444e+00, 1.14623773e+00, 7.29634814e-01, 1.30469585e+00, -2.08381639e+00, -2.43447976e+00, 2.70710670e+00, -5.76311983e-01, 8.60548537e-01, 2.76294937e+00, 2.02390457e+00, -2.21619757e+00, 5.84615982e-03, -1.90966590e+00, -2.69773939e+00, 2.37040542e+00, -1.40377827e+00, -2.67741849e+00, -3.91919585e-03, 1.68066674e+00, 3.41687874e-01, -2.18967901e+00, -6.68539573e-01, -1.45396104e+00, 1.63947625e-01, 2.41602503e+00, 2.11868255e+00, 2.02093959e+00, -1.70472896e+00, -2.19870107e+00, -2.27854787e+00, 2.24774629e+00, -2.51982957e+00, -6.63516277e-01, -1.90908765e+00, -5.33080226e-01, 2.00029937e+00, 2.87068895e+00, -2.97450387e+00, 3.59138519e-01, 1.51067887e+00, -6.59731115e-01, -1.14836880e+00, 1.78586722e+00, 1.33662466e+00, 1.80534568e+00, 2.83009647e+00, 2.26499936e+00, 6.41048319e-01, -1.35574472e+00, 1.12644441e-01, 4.13352887e-01, 2.71106637e+00, -3.33341733e-01, 2.67315433e+00, 4.36720777e-01, 2.50423523e+00, -6.96118478e-01, -2.71824102e+00, 2.16307105e+00};

  element_t top_raw[] = {0., 0., 0., 0., -10.77531046, 2.46662046, -8.15783683, -3.39263197, 1.37159808, -2.94898676, 8.88649318, 1.73765018, 0., 0., 0., 0., 0., 0., 0., 0., -2.02258181, 2.51361957, -5.4055992, -7.1166395, 2.7661521, -9.20120725, -5.21644148, -8.91871525, 0., 0., 0., 0., 0., 0., 0., 0., -3.44745653, -6.40158273, -3.71314271, 0.3923351, 3.02698958, 4.491947, 2.65839012, -1.9860927, 0., 0., 0., 0., 0., 0., 0., 0., 1.31699937, 14.63116656, 1.44270567, 0.73447695, 8.23517956, 0.60661888, -15.62188846, -3.58329566, 0., 0., 0., 0., 0., 0., 0., 0., 2.08497639, -4.07249358, 18.66651641, 6.14783777, 1.31717684, -4.4841956, -6.52985553, -0.29682908, 0., 0., 0., 0., 0., 0., 0., 0., 0.56237744, -2.9659237, 4.03724045, -6.57606811, -1.83133599, -6.22652985, 8.16616579, -1.71254919, 0., 0., 0., 0., 0., 0., 0., 0., 3.01241227, 10.37083895, -6.15325731, 0.39043997, 4.13404327, 3.69649448, 14.38453427, 5.79109786, 0., 0., 0., 0., 0., 0., 0., 0., 2.43877928, -1.85458057, -3.91390894, -14.46249078, -0.23694897, -2.71156414, -5.39709705, 4.75065548, 0., 0., 0., 0., 0., 0., 0., 0., -0.93115297, 1.27093017, 7.6771542, 0.30356486, 3.53618669, 2.93790454, -5.85610376, 0.64275865, 0., 0., 0., 0., 0., 0., 0., 0., 4.84311752, -4.43624068, -10.39836637, 7.86485313, -4.15228461, -1.52662407, -6.82905877, 1.85316356, 0., 0., 0., 0.};

  element_t correct_raw[] = {-3.617912,-3.407600,-2.460218,23.079067,-11.044569,-5.693382,6.344543,1.909699,0.303435,-7.634040,17.260712,-14.865572,-13.962346,7.020315,11.533913,-5.916656,-1.112938,37.896400,-14.949059,-12.475883,25.281918,5.525377,-13.717909,5.776771,2.849651,-11.068444,-1.096069,-4.283242,-9.902516,-6.213378,10.983770,-15.138124,11.900647,-4.998619,13.909553,-17.685486,-0.505247,5.129679,-14.639563,-9.769495,-25.315155,1.792485,6.408000,25.116821,-12.042031,19.032219,8.072210,14.437145,-3.262650,12.501974,-28.140926,35.851273,-4.354376,18.192699,-18.856987,0.991384,6.591564,-4.490582,-6.689666,-11.544814,-2.728448,9.251069,10.020450,9.803894,5.807632,8.175817,-4.446856,-24.114895,13.500004,-26.005768,25.251465,-6.338494,14.490816,-6.030446,5.619246,-4.969072,-0.549689,-10.456661,27.381641,-15.301664,-27.277569,2.511428,19.931938,23.818401,18.429794,-27.626476,12.330063,3.633706,29.957237,-2.096431,-3.795716,2.650906,-3.546445,14.108107,-7.867282,-2.028979,7.199407,-2.063554,17.716236,19.378412,6.206247,-4.033358,21.186861,-3.510131,16.615505,8.476550,-1.010591,12.622430,4.051821,3.334984,3.127090,14.975130,1.105577,19.350609,-7.246446,-3.140869,-11.517203,7.895390,10.755850,-22.735292,15.887868,-3.549326,28.714447,-0.553258,8.736219,-7.569448,-2.942073,-19.988230,-3.428524,9.872713,-9.492382,5.146695,-2.515320,17.075043,24.956928,7.898031,-21.361267,36.477940,-10.036271,-10.294403,6.239033,-9.306146,-2.502711,12.126623,-1.271643,5.157843,8.259333,-2.638108,3.690300,-5.004848,-30.781858,-6.626909,-11.548014,22.211309,-6.207658,3.082082,-2.060797,-11.361609,-21.014767,12.411083,-17.541971,17.683540,29.813686,-13.489524,17.463427,-21.589903,14.132015,-21.056469,7.103332,-9.139176,-8.981046,-5.982456,0.918907,23.153654,13.339333,26.807856,-20.118170,2.996098,-27.968529,-8.600372,-10.215634,-1.736458,-14.594658,-25.331749,5.789894,8.572942,-0.264628,17.813551,-30.684566,4.459126,9.289847,14.214278,20.550468,-5.013021,-35.088863,-1.040895,19.244253,-29.328423,-4.112191,20.662355,-19.921904,8.210845,8.124783,-6.651712,-7.190836,18.540003,14.647825,-21.863138,34.687943,-5.407118,11.068497,30.789106,-10.048485,9.734944,-21.415066,17.801357,8.472150,11.463011,6.760028,12.968663,22.913387,-4.623384,31.941267,-22.290356,16.950911};


  auto& ms = MinervaSystem::Instance();
  Scale bottom_size{7, 6, 3, 2};
  Scale weight_size{5, 3, 3, 5};
  Scale top_size{4, 4, 5, 2};

  shared_ptr<element_t> bottom_ptr(new element_t[bottom_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> top_ptr(new element_t[top_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(bottom_ptr.get(), bottom_raw, bottom_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));
  memcpy(top_ptr.get(), top_raw, top_size.Prod() * sizeof(element_t));

  ms.SetDevice(cpu_device);
  NArray bottom = NArray::MakeNArray(bottom_size, bottom_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  ImageBatch top = NArray::MakeNArray(top_size, top_ptr);
  ConvInfo conv_info(3, 2, 3, 2);

  ImageBatch output = Convolution::ConvBackwardFilter(top, bottom, weight, conv_info);
  auto output_ptr = output.Get();
  for (int i = 0; i < weight_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
	//printf("%f,",output_ptr.get()[i]);
  }
}
