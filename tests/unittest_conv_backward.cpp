#include "unittest_main.h"
#include <common/fixedpoint.h>

#include <time.h>
#include <sys/time.h>
#include <stdlib.h>

double get_wall_time(){
    struct timeval time;
    if (gettimeofday(&time,NULL)){
        //  Handle error
        return 0;
    }
    return (double)time.tv_sec + (double)time.tv_usec * .000001;
}

using namespace std;
using namespace minerva;

#ifdef HAS_CUDA

/*
 * Backward Data
 */

TEST(ConvBackwardData, GpuWithoutPaddingSmall) {
  element_t top_diff_raw[] = {8,6,4,2};
  element_t weight_raw[] = {1,2,3,4};
  element_t correct_raw[] = {32,48,18,32,40,12,8,8,2};
  Scale top_size{2, 2, 1, 1};
  Scale weight_size{2, 2, 1, 1};
  Scale correct_size{3, 3, 1, 1};
  auto& ms = MinervaSystem::Instance();
  shared_ptr<element_t> input_ptr(new element_t[top_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), top_diff_raw, top_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));
  ms.SetDevice(cpu_device);
  ImageBatch input = NArray::MakeNArray(top_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  NArray bottom = NArray::Zeros(correct_size);
  ConvInfo conv_info(0, 0, 1, 1);
  ms.SetDevice(gpu_device);
  ImageBatch output = Convolution::ConvBackwardData(input, bottom, weight, conv_info);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
  }
}


TEST(ConvBackwardData, GpuWithoutPaddingLargeTime) {
  std::cout << "Entry\n";
  Scale top_size{246, 246, 2, 10};
  Scale weight_size{11, 11, 3, 2};
  Scale correct_size{256, 256, 3, 10};
  std::cout << "Scales done\n";
  auto& ms = MinervaSystem::Instance();
  ms.SetDevice(cpu_device);
  std::cout << "Device selected\n";
  element_t top_diff_raw[top_size.Prod()] ;
  element_t weight_raw[weight_size.Prod()];
  //element_t correct_raw[correct_size.Prod()];
  shared_ptr<element_t> input_ptr(new element_t[top_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> correct_ptr(new element_t[correct_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  for(int i  = 0; i <top_size.Prod(); i++){
	  top_diff_raw[i] = rand();
  }
  for(int i  = 0; i <weight_size.Prod(); i++){
	  weight_raw[i] = rand();
  }
  for(int i  = 0; i <correct_size.Prod(); i++){
	  correct_ptr.get()[i] = rand();
  }
  std::cout << "Array inits done\n";
  memcpy(input_ptr.get(), top_diff_raw, top_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));
  //memcpy(correct_ptr.get(), correct_raw, correct_size.Prod() * sizeof(element_t));
  std::cout << "Memcopies done\n";
  ImageBatch top = NArray::MakeNArray(top_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  NArray bottom = NArray::MakeNArray(correct_size, correct_ptr);
  ConvInfo conv_info(0, 0, 1, 1);

  std::cout << "Beginning computation\n";
  ms.SetDevice(gpu_device);
  double start = get_wall_time();
  ImageBatch output = Convolution::ConvBackwardData(top, bottom, weight, conv_info);
  ms.WaitForAll();
  std::cout << "ConvBackwardData Time: " << (get_wall_time() - start) << "\n";
}

TEST(ConvBackwardData, GpuWithoutPaddingSmallDepth2) {
  element_t input_raw[] = {1,2,3,4,5,6,7,8};
  element_t weight_raw[] = {11,12,13,14,15,16,17,18};
  element_t correct_raw[] = {14.000000,41.000000,26.000000,54.000000,130.000000,74.000000,36.000000,81.000000,44.000000,18.000000,53.000000,34.000000,70.000000,170.000000,98.000000,48.000000,109.000000,60.000000};
  auto& ms = MinervaSystem::Instance();
  Scale input_size{2, 2, 1, 1};
  Scale weight_size{2, 2, 2, 1};
  Scale correct_size{3, 3, 2, 1};
  shared_ptr<element_t> input_ptr(new element_t[input_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), input_raw, input_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));

  ms.SetDevice(cpu_device);
  ImageBatch top = NArray::MakeNArray(input_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  NArray bottom = NArray::Zeros(correct_size);
  ConvInfo conv_info(0, 0, 1, 1);
  ms.SetDevice(gpu_device);
  ImageBatch output = Convolution::ConvBackwardData(top, bottom, weight, conv_info);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
	//printf("%f,",output_ptr.get()[i]);
  }
}


TEST(ConvBackwardData, GpuWithPaddingSmall) {
  element_t input_raw[] = {1,2,3,4,5,6,7,8,9};
  element_t weight_raw[] = {10,2,3,5};
  element_t correct_raw[] = {25.000000,15.000000,10.000000,50.000000};
  auto& ms = MinervaSystem::Instance();
  Scale input_size{3, 3, 1, 1};
  Scale weight_size{2, 2, 1, 1};
  Scale correct_size{2, 2, 1, 1};
  shared_ptr<element_t> input_ptr(new element_t[input_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), input_raw, input_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));

  ms.SetDevice(cpu_device);
  ImageBatch top = NArray::MakeNArray(input_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  NArray bottom = NArray::Zeros(correct_size);
  ConvInfo conv_info(2, 2, 2, 2);
  ms.SetDevice(gpu_device);
  ImageBatch output = Convolution::ConvBackwardData(top, bottom, weight, conv_info);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
	//printf("%f,",output_ptr.get()[i]);
  }
}


TEST(ConvBackwardData, GpuWithoutPaddingFrac) {
  element_t input_raw[] = {8.59232186e-01, -3.67248891e-01, -6.32162377e-01, -5.90879443e-01, 1.35450058e-01, 1.91089406e-01, 9.29029039e-01, 3.06354194e-01, 4.97813275e-01, 3.07139742e-01, 4.95429619e-01, 9.22613472e-01, -9.83223404e-01, -7.87111247e-01, -4.02592572e-01, 3.12822366e-01, 6.19625105e-01, 7.44351827e-01, 9.29295195e-01, 4.47370694e-01, 2.84950656e-01, 4.34907242e-01, -6.48019856e-02, -3.48830645e-01, -1.20710788e-01, 4.59378165e-01, 9.88029172e-01, 3.53747424e-01, 5.81645036e-01, -6.58171484e-01, -9.46301448e-01, 6.00740488e-01, 8.07445076e-01, -9.50647579e-01, -1.65053631e-02, 5.25103347e-02, 1.92732021e-01, -8.96084910e-01, 7.90179056e-01, 4.56532361e-01, 6.36700023e-01, 4.45505669e-04, 6.20378818e-01, -8.08062949e-01, -5.62099913e-01, -4.82561877e-01, -6.37884921e-02, -8.12535948e-02, 4.19019560e-01, -6.43893988e-01, 6.28997687e-02, -6.64515542e-01, 5.37627837e-01, 8.56341098e-01, 2.18987316e-01, -6.99633011e-01, -2.07465926e-02, -2.45310092e-01, 6.97202824e-01, 8.22194457e-01, -2.32302558e-01, -3.69008193e-01, 1.36788306e-01, -6.24363930e-01, -7.48316912e-01, 3.75191610e-01, 5.99213436e-01, 1.47073130e-01, 9.46459963e-01, 2.68108754e-01, 7.76843450e-01, -9.17048249e-03, -2.96766940e-01, 4.28460737e-01, 7.85823290e-03, -5.48724787e-01, -5.10051120e-01, 5.85601400e-01, -9.65517098e-03, 8.30187347e-01, 8.90743668e-01, 6.64644593e-02, -4.95014811e-01, 4.41724116e-01, -2.65122472e-01, -2.70311418e-03, -5.46849905e-01, -2.92868707e-01, 3.01703573e-01, -3.74134209e-01, 5.37470894e-01, 5.63674207e-01, 7.04818966e-01, 8.99811480e-01, -7.85354176e-01, 8.21450712e-01, -3.27889676e-01, 6.52760854e-01, 7.96201270e-01, -9.14569391e-01, -6.08410002e-01, -4.10997356e-01, 2.53999761e-01, -8.27553790e-01, -7.14109960e-01, 3.16530385e-02, 3.78682659e-01, 7.13251622e-01, 2.94723367e-01, 1.63237351e-01, 4.22231910e-01, -4.95166286e-01, 8.00319367e-01, -1.15412614e-01, -9.58958351e-01, 9.19322028e-01, 3.04450845e-01, 2.64125002e-02, 3.64712766e-01, -2.09192187e-02, 8.52980343e-01, 3.17595443e-02, -8.55680237e-01, 1.35016596e-01, 2.30486367e-01, 8.83092589e-01, -1.69273291e-01, -4.71120051e-01, -8.05213669e-01, -2.83115562e-02, -7.06742743e-02, -9.40481366e-01, 3.88554924e-01, 4.33894225e-01, 4.59622847e-01, -1.71297966e-01, -9.69802310e-01, 8.17950315e-01, 5.78757436e-01, -6.69601662e-01, -3.74428077e-01, 2.21890612e-01, -2.71019427e-01, -6.87922822e-01, -6.45392373e-01, 7.35779342e-01, -4.19810663e-01, 1.70359243e-01, -9.20102482e-02, -1.77643736e-01, 7.65268890e-01, 3.85416030e-01, -4.41453290e-01, -8.71119538e-01, -6.02752772e-01, 8.63365489e-01, 7.08827136e-01, 9.09469469e-01, -8.95493304e-01, 1.58943361e-01, -3.90074667e-02, -9.56582042e-01, -2.52759073e-01, -1.71816398e-01, 2.07814468e-01, 3.43497455e-01, 6.77731401e-01, 5.59052417e-01, -1.98597912e-01, 5.89058463e-01, 7.86248621e-01, -4.75020618e-01, 9.78394015e-01, 7.06614198e-01, 4.62954312e-01, -2.88868751e-01, 7.66578981e-01, 7.35918182e-01, 9.11532892e-01, -9.99785487e-01, -9.66917916e-01, -3.71859885e-01, 9.90632349e-01, -7.02311554e-01, -6.65245763e-01, 5.17144074e-01, -8.60940668e-01, 4.10946877e-01, -6.16694364e-02, -9.79623568e-01, 5.49647726e-01, 5.88402017e-01, -7.00861097e-01, -9.52592736e-01, 5.24127542e-01, -5.52659640e-01, -4.75651204e-01, -8.62609944e-02, -5.00146163e-01, 1.36567123e-01, 6.93885994e-01, -2.43800926e-01, -1.35069767e-01, 6.65238353e-01, -2.57736129e-01, -9.18893456e-01, 1.09342972e-01, -9.75075144e-02, 4.50601953e-01, -2.43098955e-01, 6.81324991e-01, -6.13706128e-02, 1.25286858e-01, 3.22398678e-01, -7.55162650e-02, 2.47273891e-01, -5.56238738e-01, 4.65726234e-01, -2.36635823e-01, -6.10330916e-01, -4.57674450e-01, -5.01549896e-01, -6.95721875e-01, 5.42747408e-01, -4.89176535e-01, -7.44913190e-01, 3.30334307e-01, -1.74390103e-01, 3.35535533e-01, 3.19627034e-01, -3.89244656e-01, -5.97551518e-01, -5.55945747e-01, -7.60058273e-01, -9.25709118e-01, -9.31736833e-01, -5.39006904e-01, -5.43292587e-01, 2.49821244e-01, 7.85122371e-01, 5.59456032e-01, 4.42902537e-01, -3.79115682e-01, -2.73833167e-01, -6.07836432e-01, 8.70983596e-01, 1.23468000e-01, 6.34583074e-01, -3.02172038e-01, 5.99428526e-01, -7.91791075e-01, 4.24240330e-01, 8.34896992e-01, 6.07170737e-01, -3.45773707e-01, -4.89785641e-01, -9.99565129e-03, -1.72778091e-01, -1.50125809e-01, -8.51243390e-01, 2.06781303e-01, 4.94399467e-01, 5.95152453e-01, -2.36998955e-01, 5.94316306e-01, -5.64052608e-02, 4.42798342e-01, -6.21574621e-01, -1.30808581e-01, 6.46936218e-01, 6.52545256e-01, -6.20949033e-01, -9.59795660e-01, 4.06982772e-01, -3.05459761e-01, -1.60992368e-01, 5.36177806e-01, 9.25756133e-01, 7.85130614e-01, -7.30115467e-01, 5.95609430e-01, 3.64181215e-01, 6.01057742e-02, 7.31963310e-01, 5.06496191e-01, -8.13594826e-01, -3.41121136e-01, -1.75274609e-01};

  element_t weight_raw[] = {-2.99421235e+00, 5.85381379e-01, 1.09536925e+00, -8.02315431e-01, -6.21006855e-01, -1.47845127e-01, 4.86479403e-01, -2.17717723e+00, 2.99648504e+00, 4.39632527e-02, -4.15997727e-02, -1.87875147e+00, -1.22347191e+00, 1.79109036e+00, -1.23133024e+00, 1.18272956e+00, -1.36224463e+00, 2.47517071e+00, -1.20876460e+00, 2.33915863e+00, 2.68033376e+00, -1.98652306e+00, -8.44251566e-01, 1.09306382e+00, 2.52835182e+00, -2.13045394e+00, -2.40075369e+00, -5.30383341e-01, 2.85075222e+00, -2.75096075e+00, -1.87851423e+00, 6.52607928e-01, -2.47668771e+00, -1.10227108e+00, 6.60814659e-01, -1.79283172e+00, 1.15138630e+00, -1.53223817e+00, 1.08223018e+00, -8.43736265e-02, -1.43703113e+00, -1.30355808e+00, 2.43270972e+00, -1.34494388e+00, 2.04688826e+00, -1.82145375e+00, -1.01649942e+00, 2.67977931e+00, 3.64310972e-02, -5.79504850e-01, -2.83763077e+00, 7.30642137e-01, -9.15908959e-01, -1.33920463e+00, -2.61567136e+00, -9.93656887e-01, -2.59374035e+00, -2.97705451e+00, -2.75419318e+00, -9.06270806e-01, -2.44827413e+00, 1.21894359e-01, -1.70550112e+00, 2.94999927e+00, -1.39687703e+00, 1.08100832e+00, 1.57476715e-01, -3.60461582e-01, 9.69331474e-01, -2.19128895e+00, 1.72709403e+00, -2.17213379e+00, 7.97539786e-01, -1.71800785e+00, -2.85974811e+00, 7.61603840e-01, 8.52982359e-01, 8.52620021e-01, 2.18772540e+00, -9.76791579e-01, -5.34249680e-01, 6.61912103e-01, 2.64505914e+00, -2.08753638e+00, -1.89565196e+00, -2.07337027e+00, 1.27694596e+00, 2.56789897e+00, -4.63876920e-01, 2.71063582e-01, -1.06566621e+00, -2.03577190e+00, 1.21891215e+00, 1.38149044e+00, 2.76242723e+00, -7.77056575e-01, 1.30019035e+00, 2.91636731e+00, -2.33539465e+00, 1.54937129e+00, -2.05467527e+00, 1.89861153e+00, 3.24639277e-01, 4.90261325e-01, 2.61687350e+00, -3.93913469e-01, -6.52368818e-02, 9.96782801e-01, 7.80924006e-01, -2.21877150e+00, -8.76936173e-01, 8.10740308e-01, 2.51373517e+00, -2.45239968e+00, -2.57350725e+00, -5.17730183e-01, -1.70615298e+00, 1.18191789e-01, 3.51084133e-01, -1.57799016e-01, -1.70476727e+00, -1.56336669e+00, -1.69957048e+00, 9.34142269e-01, 2.07836070e+00, 2.58278636e+00, 1.80183310e+00, 1.08435507e+00, -1.75645825e+00, 1.44995835e+00, 1.18142751e+00, -7.09443154e-01, 2.10071475e+00, 1.68667087e-01, 2.35805441e+00, 1.92335625e+00, -1.62852828e+00, 1.92374382e+00, -2.16863145e+00, -1.05195029e-01, -2.10713666e+00, -3.10235670e-01, 9.95738834e-01, 1.73419455e+00, 9.72124549e-01, 1.26907457e+00, 2.32754197e+00, -2.14994825e+00, -2.11457926e+00, -1.04441494e+00, -2.80875702e+00, 1.12657737e+00, 1.58838027e+00, -8.99943488e-01, 6.96045664e-01, 2.75099915e+00, -1.25368430e+00, 1.12007078e+00, -2.74663062e+00, -2.62497821e+00, 1.88639217e+00, -3.80289825e-01, -6.47589408e-01, -1.01611392e+00, -2.54047030e-01, 2.01211291e+00, -1.99386743e-01, -4.72284073e-01, 4.25109318e-01, 1.43433574e+00, -2.66949955e+00, 7.45083894e-01, 7.26361966e-01, -2.99333681e+00, 6.17361038e-01, -2.75888753e+00, 5.14502201e-01, -3.09723452e-01, -8.77618394e-01, 2.60115141e+00, -1.39646441e+00, -1.31220372e+00, 2.94357819e-02, 8.80836712e-01, 2.82344057e+00, -2.78474712e+00, -4.60800803e-01, 5.29872532e-01, 1.39021370e+00, -1.94693356e+00, 6.32327077e-02, 1.70757504e-03, 2.35660579e+00, -7.03903755e-01, 9.77183021e-01, -2.71913064e+00, 1.50733970e+00, -7.87288246e-01, 2.68817182e+00, -9.16648691e-01, 1.10335919e+00, 1.94780929e+00, -8.24820346e-02, 2.90505523e+00, 6.22884229e-01, 1.55774899e+00, 1.10710017e+00, 2.59449736e+00, 2.69871283e+00, 2.94066677e+00, -2.24306770e+00, 2.85960370e+00, -1.62536606e+00, -1.88366146e+00, 5.52685321e-02, 1.82986096e-01, -1.30416455e+00, -1.13903079e+00, -1.14069374e+00, -1.40166668e+00, 5.60586905e-01, -1.69719377e+00, -5.85702494e-01, -1.26863256e+00, -1.95695511e+00};

  element_t correct_raw[] = {-0.861118,1.789599,-0.192098,-3.772066,-1.171446,3.868326,2.829584,3.519578,-0.401897,-5.756625,-1.167793,-0.123237,-0.333016,3.265663,-5.001259,-2.275627,2.801891,-0.380476,-0.281949,4.949083,6.634080,-4.571546,0.500780,-1.600668,-0.404496,5.583798,-5.585242,-4.355585,-1.292285,-7.720478,-3.375307,6.236872,7.582698,-1.215804,-3.438790,-0.206557,-1.589470,-0.288958,-2.960994,1.152735,2.488571,0.781154,-10.562472,-6.016970,8.332851,5.610995,-0.484588,-2.657443,-1.326799,-3.676986,2.932516,9.909317,-5.958278,1.501262,-10.012947,-0.660992,5.210555,-0.936115,1.438923,-0.467051,0.963350,2.352577,-2.595447,8.636878,-9.480071,0.267073,1.893265,4.650538,-2.989280,-0.938347,8.096261,-3.222964,0.069811,5.035134,-3.906377,-1.377284,-3.995087,1.627737,3.472075,5.245581,-5.183541,3.523603,-3.198893,-3.428192,-1.365123,1.956483,-2.648139,0.160610,5.591084,-0.673095,-1.655756,2.517139,5.317964,0.013097,0.232216,2.801119,-2.120084,3.965877,1.821071,-6.614838,-3.438645,4.562026,-0.998281,3.540547,1.997250,-2.849930,-5.619549,3.067973,-0.662032,0.050074,0.522035,-7.773035,13.852877,-2.032331,-4.413694,-6.226500,10.661108,-0.114805,-3.272382,5.556460,1.901664,0.176667,2.947251,-5.377202,-1.506144,-1.278448,10.884763,-7.307772,-5.229288,-5.934045,-3.221240,2.907982,2.758375,0.275452,1.592174,10.682644,-5.715372,1.198609,1.223449,-9.088083,5.399524,2.799407,2.480285,-2.518843,-1.693017,7.182967,-0.465039,8.277404,8.505639,4.144751,-8.093884,6.216247,6.655358,-5.677887,-5.782744,1.879567,-0.438828,5.258228,-0.172530,3.367729,9.702333,-3.334629,-5.368228,14.157303,5.123936,-4.809422,-0.065427,1.169573,4.672944,0.652245,4.008397,-11.696341,4.254375,-1.993380,0.772764,1.319159,1.332594,-1.101508,4.330271,1.487693,0.931754,-0.624353,5.998052,-3.184272,2.561398,2.162698,0.270218,-3.731274,-3.434558,1.781620,-1.208277,-2.355672,1.372223,-0.789950,0.649611,-2.953192,1.254964,-1.761536,4.236151,-1.784639,0.587066,-3.615817,-0.639442,-0.130348,-0.188041,0.387788,0.271775,6.524864,-2.877292,-4.810179,-9.713173,9.856152,5.190222,-0.340538,-1.207057,2.211226,2.282467,1.953119,1.046353,0.264842,-4.145903,-1.298680,-0.327268,-2.559111,-1.095952,-5.823745,-1.162175,2.726061,-0.692636,2.818845,-1.985480,-1.006485,-2.698162,-4.576430,0.639532,-2.779664,-2.504920,1.355231,-1.818899,-0.281408,4.168027,-2.839602,-3.896165,-6.237121,-3.230048,-4.478722,-0.479600,-4.557238,0.973666,-0.679591,1.946007,-0.320245,2.502236,-1.579053,-0.797051,0.614388,-3.737692,-2.902907,-3.467542,6.114590,-5.227870,-2.225209,0.308376,-1.234281,-2.658274,-3.788059,-0.411144,0.909863,-3.417280,-1.573502,4.443288,9.225067,-8.900447,0.296817,1.078235,0.837979,-2.986850,1.819401,-0.025384,-2.111081,-4.244297,0.309446,2.578097,-0.192216,0.128646,1.607225,1.603738,0.789715,-0.754840,-2.446655,3.198629,-1.275119,3.745399,-0.198952,1.012228,-9.062501,-6.847182,-6.631068,-1.483189,-2.420098,-4.444180,-6.471114,3.582602,2.950396,-2.459838,1.502661,1.438711,1.657287,2.918997,0.300620,-4.136347,-5.409235,-1.076149,-5.828786,-3.489184,-7.949127,-5.715112,5.500435,8.982519,2.711071,2.397807,3.291374,-0.682117,0.141506,0.033661,1.968719,-5.533283,-8.360313,-2.997298,-6.019006,-5.280542,4.562503,4.599768,10.330196,-0.459183,2.434101,-3.230419,1.217832,-2.136445,-6.687827,0.397670,1.276150,1.331867,-3.026968,-9.991388,-1.126211,-0.251184,-0.438882,-5.368198,-2.610491,1.660430,-0.768567,-5.618808,10.221746,7.674420,3.173374,-7.144212,4.364618,-6.513852,-3.489739,0.289451,-4.822148,2.654539,-3.901960,-3.065177,8.452254,-2.051857,6.003841,3.181066,6.028013,-4.086824,1.726675,1.147046,-3.829583,4.033304,1.746458,3.904646,-3.204093,-7.025935,-0.839962,0.550992,-1.446497,-0.046597,0.618169,-2.253153,-1.500938,1.324836,4.491065,2.739680,-0.658420,-4.968413,-2.742040,4.975129,1.480235,1.135472,-0.822700,-1.020366,0.607900,-3.481094,-7.163158,-4.878381,6.076893,4.077508,8.087923,-1.881206,-1.168522,0.356536,1.124289,-3.929127,0.373645,-2.309934,-15.655060,2.386410,-1.398612,-10.073902,1.774315,0.976454,3.380183,-1.519989,0.697923,-4.953779,-2.327959,-2.432772,-8.444665,5.078468,-1.868206,1.919565,-7.012532,3.071378,1.572557,-2.038942,0.609350,-3.625793,-0.926332,-3.209588,8.711662,-2.799956,-10.083397,7.346124,-9.100878,6.573493,-4.772502,-0.289014,0.017972,0.234143,1.716366,-5.708624,10.544999,-2.482754,-2.698241,-3.297389,-3.793433,3.759544,-2.163044,4.525909,2.778516,-1.008667,4.021857,-3.232802,3.224124,3.153430,11.552838,-7.959694,6.890323,-2.685184,2.293809,-1.808752,-3.241399,-0.974729,3.134702,-0.548421,-4.630121,1.525826,-0.038890,-5.427561,6.485326,0.995158,5.747540,-4.061276,3.321931,0.462585,-2.676033,0.692586,-4.428205,2.851727,3.579422,-5.693691,0.729099,-2.582628,-0.825910,0.447025,0.897885,0.640083,-1.283184,4.506027,-3.962641,7.628556,2.681618,-6.559796,-5.716064,-4.969007,7.426347,-1.102540,0.887424,1.105928,-2.940975,-2.665337,4.385749,-2.647065,0.559830,-1.729746,-7.954554,7.148817,-0.570385,-1.605864,-5.134223,-1.500844,1.896406,-4.136714,3.501003,2.793357,-4.793551,1.476191,-4.683261,-9.001178,-4.419949,9.630128,-2.325879,-1.769918,1.325857,-1.278566,1.538962,0.064186,2.870047,-0.965176,6.139172,-3.463282,-0.223263,2.689335,-2.884532,5.077912,1.404000,0.423740,-2.956308,-9.883310,-7.647298,-12.772137,10.669836,4.471886,-3.482169,-2.975618,-0.546047,-1.205117,-2.228755,-0.449468,-4.403217,3.962734,-2.994916,-2.372571,5.404981,6.218055,-2.892836,-7.338696,2.709865,1.370737,-0.543779,-1.181389,0.080095,-3.786092,-4.570521,1.758589,-7.591572,-1.925408,5.990691,0.319304,-0.671545,1.396614,-6.039306,2.723629,-3.564336,-3.683028,3.357243,-5.059089,3.105397,3.563374,-4.927155,-1.282873,-2.852456,-0.128050,2.579039,-3.203791,-1.633974,2.279120,2.540485,0.999827,-6.796712,-6.623774,-3.788263,3.813348,0.445892,-1.610440,-1.969648,-7.470009,8.979786,0.616404,7.188474,-2.532911,-0.269502,0.777244,0.460869,-5.537929,2.351184,1.680754,-6.363465,-0.281577,-1.248063,0.479298,0.924884,-12.434249,6.411742,-2.540554,-0.559595,-2.423559,2.458744,-5.743380,-1.139848,1.546543,-4.681086,4.481580,0.868453,-1.468513,2.693946,-0.424048,-2.166499,-1.582664,5.120764,1.363548,2.962844,2.332685,-12.982770,1.316206,-8.815780,6.926795,-1.996612,3.962878,0.706114,2.195045,-4.021688,-3.110470,-2.619936,-0.335381,-3.220358,-3.792652,-3.902319,3.092144,-5.546946,-0.545349,-1.140458,7.396077,-0.228004,-2.237571,-0.078275,-8.610713,1.325492,-3.892920,-0.678534,1.805630,4.158877,6.248294,-0.909855,-2.667446,-0.493430,-0.663760,2.317325,-3.282732,5.942960,-0.797827,-0.294271,0.677391,2.660363,1.896703,2.660187,-1.567300,-0.584433,-0.539476,3.216395,-0.329729,-3.129022,4.960201,1.944759,0.185053,4.696012,-3.133824,-2.115324,0.151550,-2.786795,1.387276,-0.429266,2.415838,-9.534157,1.231715,2.197715,14.833018,-3.656259,-3.150365,-5.877256,-1.249179,-1.445882,-3.559311,3.032200,2.149899,2.542215,7.641285,1.344760,-0.146722,-0.449808,-0.421924,-7.260665,0.207624,-0.040495,-0.054238,2.136933,-3.003693,3.953950,1.666373,-0.640226,2.979584,4.072708,-2.387727,-8.122070,-2.296925,2.226939,5.151889,3.076842,-1.198240,1.833760,-3.935266,-0.096859,4.766315,3.360656,-3.722329,-2.239634,-8.541346,3.749193,-0.790741,3.890601,0.763397,-4.146721,2.115535,4.469295,5.801566,-5.038229,-7.644842,6.513895,-1.125079,1.318954,2.475580,3.880140,1.922904,1.477416,3.806829,-5.331800,-0.318459,-2.795389,-1.227576,3.300580,-0.091793,-1.169827,0.577405,1.558482,1.410214,-2.293223,-2.817356,-2.196218,-0.894050,1.241790,-2.265645,0.723896,-1.552978,0.766894,2.168101,3.185398,7.244444,0.223601,3.850333,-3.544351,-3.879556,-7.993992,-0.913321,-0.246464,-1.968331,-1.076868,1.445627,-1.251424,10.992624,2.406884,3.083553,-3.976796,11.420601,-3.252425,3.770565,-9.027681,-0.820733,-4.536175,3.340143,2.997738,2.608858,-8.541022,-5.629584,-3.355803,0.963625,-5.206939,-10.688908,1.269209,-0.020354,-0.039742,-3.619257,-3.341744,-12.053204,-9.779691,-8.212052,6.107642,3.622704,9.697240,-4.916384,-2.549187,-5.653267,-0.404472,-3.854570,-1.802257,-2.284639,1.788811,-1.379691,-2.401009,-1.385132,13.066822,4.197006,-0.762217,-11.944082,1.003180,0.723836,-3.987071,7.109487,0.669772,8.847664,-6.473099,-5.048759,-1.923731,-5.661686,-0.898357,-2.515805,4.447938,-1.315907,-1.155657,-2.499074,1.253925,0.533754,4.925126,3.260244,0.244958,1.873359,3.839741,-2.589235,-1.933603,1.482819,-0.094911,2.247850,1.916307,-4.324421,5.398454,-2.683898,-3.803080,-2.539108,-3.321848,-0.840137,1.194703,1.077823,-4.391097,2.413430,-1.027599,-4.359714,-2.977153,-3.810991,3.056397,-5.345336,3.692720,-0.248154,0.121191,2.732118,2.065307,5.985812,-2.841371,4.367061,-11.579490,-4.312026,-9.014544,1.899171,0.534760,-0.869187,-0.670206,1.050324,0.597615,-3.133600,-1.037654,7.605500,-6.777506,2.997478,-9.650144,1.548298,-10.662847,6.504010,0.403664,-0.735089,-3.503188,-3.370574,2.038488,0.536245,-2.663870,-7.014248,2.834171,4.278159,0.257983,1.560945,-4.311639,0.876247,-3.126559,0.010525,12.060719,-6.738288,14.523293,-12.654755,-4.698486,-10.429930,-3.694757,-1.646406,5.424623,-0.989953,-0.467865,-0.315587,-8.657926,-2.971225,-6.292002,-6.728180,10.229908,5.584425,4.843599,-6.052397,1.157480,1.020668,-2.501064,2.888194,-1.489629,3.180426,-4.239866,1.106057,0.634659,-3.122109,2.654816,-1.808122,0.462653};

  auto& ms = MinervaSystem::Instance();
  Scale input_size{8, 6, 3, 2};
  Scale weight_size{5, 3, 5, 3};
  Scale correct_size{12, 8, 5, 2};
  shared_ptr<element_t> input_ptr(new element_t[input_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), input_raw, input_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));

  ms.SetDevice(cpu_device);
  ImageBatch top = NArray::MakeNArray(input_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  NArray bottom = NArray::Zeros(correct_size);
  ConvInfo conv_info(0, 0, 1, 1);
  ms.SetDevice(gpu_device);
  ImageBatch output = Convolution::ConvBackwardData(top, bottom, weight, conv_info);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
	//printf("%f,",output_ptr.get()[i]);
  }
}

TEST(ConvBackwardData, GpuWithPaddingFrac) {
  element_t input_raw[] = {5.25103347e-02, 1.92732021e-01, -8.96084910e-01, 7.90179056e-01, 4.56532361e-01, 6.36700023e-01, 4.45505669e-04, -6.37884921e-02, -8.12535948e-02, 4.19019560e-01, -6.43893988e-01, 6.28997687e-02, -6.64515542e-01, 5.37627837e-01, -2.45310092e-01, 6.97202824e-01, 8.22194457e-01, -2.32302558e-01, -3.69008193e-01, 1.36788306e-01, -6.24363930e-01, 9.46459963e-01, 2.68108754e-01, 7.76843450e-01, -9.17048249e-03, -2.96766940e-01, 4.28460737e-01, 7.85823290e-03, 8.30187347e-01, 8.90743668e-01, 6.64644593e-02, -4.95014811e-01, 4.41724116e-01, -2.65122472e-01, -2.70311418e-03, 5.37470894e-01, 5.63674207e-01, 7.04818966e-01, 8.99811480e-01, -7.85354176e-01, 8.21450712e-01, -3.27889676e-01, 5.59052417e-01, -1.98597912e-01, 5.89058463e-01, 7.86248621e-01, -4.75020618e-01, 9.78394015e-01, 7.06614198e-01, 9.11532892e-01, -9.99785487e-01, -9.66917916e-01, -3.71859885e-01, 9.90632349e-01, -7.02311554e-01, -6.65245763e-01, -9.79623568e-01, 5.49647726e-01, 5.88402017e-01, -7.00861097e-01, -9.52592736e-01, 5.24127542e-01, -5.52659640e-01, 6.93885994e-01, -2.43800926e-01, -1.35069767e-01, 6.65238353e-01, -2.57736129e-01, -9.18893456e-01, 1.09342972e-01, -6.13706128e-02, 1.25286858e-01, 3.22398678e-01, -7.55162650e-02, 2.47273891e-01, -5.56238738e-01, 4.65726234e-01, -6.95721875e-01, 5.42747408e-01, -4.89176535e-01, -7.44913190e-01, 3.30334307e-01, -1.74390103e-01, 3.35535533e-01, -6.26250490e-01, -4.07823970e-01, 5.97030118e-01, -4.10443414e-01, 3.94243187e-01, -4.54081542e-01, 8.25056903e-01, -2.81417189e-01, 3.64354606e-01, 8.42783940e-01, -7.10151312e-01, -8.00251230e-01, -1.76794447e-01, 9.50250742e-01, -3.67423692e-01, 2.20271553e-01, -5.97610574e-01, 3.83795433e-01, -5.10746058e-01, 3.60743392e-01, -2.81245422e-02, 6.82296085e-01, -6.07151251e-01, -3.38833141e-01, 8.93259770e-01, 1.21436991e-02, -1.93168283e-01, -9.45876923e-01, -3.31218962e-01, -8.64580115e-01, -9.92351503e-01, -9.18064393e-01, -3.02090269e-01, -8.16091378e-01, 4.06314529e-02, 5.24922383e-02, -1.20153861e-01, 3.23110491e-01, -7.30429651e-01, 5.75698010e-01, -7.24044598e-01, 2.65846595e-01, 5.78064850e-01, 3.24041516e-01, 4.23024858e-01, 7.75847324e-01, -7.16649418e-01, -7.04859753e-01, -3.48138314e-01, 2.32015221e-01, 9.16999718e-01, -4.17894767e-01, 3.73356925e-01, -9.15543539e-01, -8.74992737e-01, 6.28797391e-01, 6.70704305e-01, -6.64622476e-02, -1.57428024e-01, 1.41703106e-01, 4.78111913e-01, -8.89833183e-01, 2.48361298e-01, 1.71500734e-01, -1.03241151e-01, -2.92539465e-01, 8.67050469e-01, -4.65488136e-01, -4.37401239e-01, 9.81192729e-03, 1.76624177e-01, 4.63404565e-01, -6.48977854e-01, 2.10775692e-02, 5.69191679e-04, 7.85535264e-01, -2.34634585e-01, 8.96057273e-01, -3.05549564e-01, 3.67786398e-01, 6.49269763e-01, -2.74940115e-02, 9.68351743e-01, 2.07628076e-01, 1.85028318e-01, -3.49798716e-01, 8.73610682e-01, -8.08034049e-01, 7.66591492e-01, 1.36035466e-01, -8.76153051e-01, -9.42090961e-01, 2.54198007e-01, 2.09278522e-01, -8.43584950e-01, 5.45907125e-01, -7.13366751e-01, -7.26307843e-02, 4.97412749e-01, 7.79227666e-01, -2.41219689e-01, -4.15127476e-01, 1.85804799e-02, 6.56272008e-02, -7.89156759e-01, 5.95946891e-01, -5.11510156e-01, 6.07075484e-01, -4.03649869e-01, -6.54580737e-02, 8.65639316e-01, 8.19513569e-01, 2.93617672e-01, -3.35847054e-01, -7.71555326e-01, 1.42208982e-01, -3.96017041e-01, -6.12988788e-01, 1.29411384e-01, -1.88205315e-01, 3.31118167e-01, -6.05975908e-01, -5.16439080e-01, 2.46344907e-01, 5.97476702e-01, 8.92727341e-02, 8.77082477e-01, 4.78201578e-01, -9.46106323e-01, -2.35208227e-01, -9.78947208e-01, -8.69535860e-01, 3.62785391e-01, 7.88573716e-01, 4.13573947e-01, -4.22013528e-02, -5.68775015e-01, -8.36467872e-01, 3.46404408e-01, 9.89558378e-01, 8.96711938e-02, 9.67284551e-01, 4.71404282e-01, -8.13833601e-01, -4.15551966e-01, -4.53903666e-01, -8.57667173e-01, -5.76563967e-01, -4.14422920e-01, -2.87165417e-01, 9.12734981e-01, 3.20487724e-01, 9.01024809e-01, -8.06264818e-01, -4.12511687e-01, 2.99419879e-01, -1.58010723e-01, -8.50696651e-01, 4.77613710e-01, 1.70740085e-01, -3.10658805e-01, -4.22856328e-01, -4.71636816e-01, -4.46162130e-01, 6.84712020e-01, -6.60755426e-01, -4.95826747e-01, 1.83750401e-01};

  element_t weight_raw[] = {4.69434058e-01, -1.38583424e+00, -1.19454332e+00, 7.51993600e-01, 1.67906442e+00, -4.73379739e-01, 9.41878306e-01, -4.58280482e-01, -8.89644787e-01, 7.47770021e-01, 1.86899005e+00, -3.76912984e-02, -2.68109599e+00, -1.01194085e-01, 2.78046317e-02, -3.78493153e-01, -7.43905667e-01, 1.66726823e+00, -2.39953374e+00, -2.90112339e+00, 1.69425602e+00, 2.11895221e+00, -1.65778947e+00, 7.61535409e-01, -2.61197826e+00, -1.56647519e+00, -2.41361783e-01, 9.76095418e-01, -1.69379028e+00, -1.80317946e-01, 2.86974591e+00, 7.83224328e-02, -1.79212071e-01, 9.96846111e-01, 1.27322826e-01, -1.45638535e+00, 1.94500748e+00, -2.22728921e+00, -1.96833731e+00, -1.95052845e+00, -7.08356663e-01, -2.39044050e+00, -6.61220349e-01, 1.85948655e+00, -8.77489231e-01, 2.25910682e+00, 2.75299436e+00, 2.03237053e+00, -2.30972770e+00, 3.74469986e-01, -2.34937194e+00, 2.25521054e+00, -8.99953121e-01, 2.38629051e+00, -2.25493565e+00, 8.27170971e-01, 2.23515090e+00, -2.99360661e+00, -1.17168090e+00, -2.82705197e+00, 2.98377018e-01, -1.94885169e+00, 5.40153173e-01, -2.96927632e+00, -1.30786336e+00, 1.55878752e+00, 2.23167008e+00, 3.25273789e-02, -9.75319840e-02, -2.71345071e+00, 1.50482951e+00, 1.98800589e+00, 2.19620308e+00, 1.96069188e+00, -2.51859384e-03, -2.94740383e+00, -9.52835533e-01, 1.44073713e+00, 2.46472884e+00, -1.23625174e+00, -1.87975626e+00, 2.30530176e+00, -6.95593244e-01, 7.01437086e-01, 5.81853703e-01, -1.06019632e+00, 8.40219457e-01, -3.08456307e-01, 1.19075977e+00, -2.02837369e+00, -1.82785135e+00, -1.03247982e-01, 3.75951276e-04, 1.60856600e+00, -1.84283918e+00, 2.95301614e+00, -1.04820246e+00, 2.07600281e+00, 1.90885268e+00, 2.43943187e+00, 1.43667562e+00, -1.10003648e+00, -2.83465135e+00, 3.78231860e-01, 2.74004219e+00, -2.06394886e+00, 1.54640811e+00, -2.75194253e+00, -1.83270810e+00, 1.21537604e-01, -2.10613421e-01, 1.73705801e+00, -2.23164924e+00, 2.35449197e+00, -1.94164743e+00, -3.90715826e-01, -2.10387976e+00, 1.13258744e+00, 1.88402160e+00, -1.84470203e+00, 4.68833930e-01, 1.32519944e+00, -1.49205079e-01, -1.42829315e+00, 1.40477660e+00, -9.04758285e-01, 1.02878655e+00, -2.66964987e+00, 2.38227291e+00, 1.29870916e-01, -1.34866170e+00, 2.06100418e+00, -3.45158807e-01, 1.01549933e+00, 2.95588019e+00, 2.11601428e+00, 2.60128869e+00, 2.17276736e+00, -2.59770354e+00, -1.24910999e+00, -1.82202496e+00, -5.33936144e-01, -4.84902078e-01, 2.74960541e+00, 2.54449228e+00, 2.90201444e+00, -7.12005966e-01, 2.78452402e+00, 5.41890668e-01, 6.39412589e-03, -1.30741768e+00, -2.02580336e+00, -3.07274893e-01, -9.16216399e-01, 1.43133925e-01, 2.62978313e-01, -2.93526489e+00, -1.22066322e+00, -1.99031596e+00, 2.75104991e+00, -1.58140965e+00, 1.99593194e+00, 1.24653142e+00, 3.63953174e-01, 1.20670807e+00, -1.72797444e+00, 1.14623773e+00, 7.29634814e-01, 1.30469585e+00, -2.08381639e+00, -2.43447976e+00, 2.70710670e+00, -5.76311983e-01, 8.60548537e-01, 2.76294937e+00, 2.02390457e+00, -2.21619757e+00, 5.84615982e-03, -1.90966590e+00, -2.69773939e+00, 2.37040542e+00, -1.40377827e+00, -2.67741849e+00, -3.91919585e-03, 1.68066674e+00, 3.41687874e-01, -2.18967901e+00, -6.68539573e-01, -1.45396104e+00, 1.63947625e-01, 2.41602503e+00, 2.11868255e+00, 2.02093959e+00, -1.70472896e+00, -2.19870107e+00, -2.27854787e+00, 2.24774629e+00, -2.51982957e+00, -6.63516277e-01, -1.90908765e+00, -5.33080226e-01, 2.00029937e+00, 2.87068895e+00, -2.97450387e+00, 3.59138519e-01, 1.51067887e+00, -6.59731115e-01, -1.14836880e+00, 1.78586722e+00, 1.33662466e+00, 1.80534568e+00, 2.83009647e+00, 2.26499936e+00, 6.41048319e-01, -1.35574472e+00, 1.12644441e-01, 4.13352887e-01, 2.71106637e+00, -3.33341733e-01, 2.67315433e+00, 4.36720777e-01, 2.50423523e+00, -6.96118478e-01, -2.71824102e+00, 2.16307105e+00};

  element_t correct_raw[] = {2.004409,-0.843072,3.329746,-0.996785,0.436712,0.217823,-1.541995,-0.823602,0.034842,-1.600653,4.621693,-1.418625,-0.269516,0.098562,1.513131,0.599923,-6.179233,-1.186083,-2.582740,1.683358,2.852424,-0.315925,5.142332,1.535626,-4.562220,0.644670,2.627658,-3.069175,-1.784449,-2.513139,-0.443387,-2.116778,1.162747,5.907422,3.047386,-1.478664,-0.146597,-0.157746,0.096542,-0.327836,-0.883091,-2.494856,1.275135,-0.880550,-1.400759,4.480975,-1.096947,-0.275551,-1.064331,2.118928,0.550107,0.938888,2.689481,-2.084024,0.203350,2.147929,-0.887589,2.836179,-3.762223,-2.284390,4.383195,-1.516443,0.097575,0.502015,-0.250226,-0.482772,3.694916,3.711507,0.679919,-1.000190,-2.743196,-0.932207,-1.945176,0.313547,3.517897,3.413946,-3.225674,-1.994010,-2.131760,1.370746,-1.559478,-1.789551,-1.015474,0.299115,3.593001,2.069727,0.397941,-1.388975,-2.769671,-1.388621,0.846613,-3.360937,1.287237,-1.214936,1.361168,3.160860,0.111793,-2.090322,-1.037955,-1.456465,-1.550581,-1.225884,0.804531,2.548610,0.324135,-3.197999,-1.555014,1.652432,-0.090163,0.552849,1.722764,-3.300266,-1.325707,-1.133390,-1.429248,1.815138,3.600827,-3.892414,-0.999564,-3.213647,-1.637944,0.416153,-2.086247,0.703993,-1.737389,-0.894318,-1.344373,0.010547,-1.516603,1.299025,-1.572996,2.628896,-2.297453,5.807673,-2.867663,5.933298,0.144691,2.436155,-2.637842,3.342784,1.131970,1.111646,0.584168,0.238641,1.349733,-0.043226,2.151483,1.000053,1.893778,1.535746,3.836198,1.237599,-1.058424,-0.934904,3.659289,3.243708,-6.355524,-1.299967,-1.401764,-2.372956,3.596136,1.400858,4.943524,3.934669,-5.041850,1.866133,-3.437076,-1.652139,2.090209,0.940294,-3.509238,-0.006668,1.060803,-8.352139,2.371621,-3.451177,-1.646835,1.487280,-5.070269,4.324033,-1.193210,-5.589361,1.007581,-1.307111,-2.215683,-0.879918,6.574915,0.774505,-1.779837,0.101871,5.262385,-0.832201,-4.002839,-0.756159,3.430188,3.321402,0.557448,0.433192,-1.289912,-3.639426,-0.125824,-1.055666,1.216551,2.909121,1.546517,-4.500172,-0.506837,2.225830,-1.286929,1.282084,-4.919023,2.732526,2.428495,-1.676842,0.523264,-1.257512,-2.551074,0.249044,-1.336449,-0.837597,0.805238,-4.172040,-0.638953,1.617395,-2.129019,0.451572,-1.426617,3.428720,-0.628135,-2.396891,0.772950,6.143318,0.830124,-2.694867,-0.117534,-1.890719,2.248334,0.829206,-1.445244,-0.726678,-4.671627,-2.327226,1.145011,-0.376156,5.990921,3.169857,-2.690088,-3.494296,2.341530,-1.903895,-0.777778,3.954208,2.901969,2.803606,0.993884,-4.170205,-1.919776,-6.167260,0.748878,-0.758231,3.012752,-1.821299,-4.100361,-3.393620,-0.619484,1.305181,2.485685,1.275386,-2.389160,-2.496936,2.882249,-1.522330,1.174219,3.497456,0.790895,1.998766,3.467693,-1.460932,4.391640,-0.510993,2.159391,-0.737385,2.088003,1.532071,2.587631,-3.358090,-5.722562,1.100285,-0.815586,-0.772333,3.687131,-4.194665,3.288239,-2.906620,-1.790751,-2.106956,3.224548,-1.266068,0.842904,0.129038,-4.054751,2.505550,-2.602180,3.803048,-1.351664,-1.502579,-1.732590,5.922730,-2.023726,-2.069938,0.127871,2.552568,1.620340,-5.017340,-1.770195,0.590361,4.471902,2.130941,0.563479,4.164499,0.616162,-6.187449,-4.412267,0.817947,1.129438,0.455446,-0.648280,3.171599,-7.019291,2.976037,-1.285631,0.442778,3.028845,1.588399,3.506876,2.990698,-6.131496,0.707161,-1.263081,3.549543,0.411170,0.122560,1.702616,-2.603082,7.019444,-1.378286,-3.825585,3.285629,0.348790,0.861483,-1.686380,-3.799882,3.825439,-0.217435,1.299857,-0.608541,-6.876150,1.083326,1.232786,-2.381492,2.430978,2.261024,-2.819659,0.299954,0.587167,-1.772708,-5.332870,2.464445,-1.923880,2.178893,2.784969,-3.283590,2.680928,-0.813761,1.134323,0.355200,2.456441,4.249353,-1.331533,-2.608520,0.338948,1.752215,2.864618,-0.349895,-0.260794,6.432142,-1.610654,-2.930209,0.705404,1.873966,3.088369,-1.202493,-0.661035,0.353343,-6.096087,-2.577202,1.957746,-0.543242,3.577410,0.672180,0.496942,2.332850,-2.204092,-4.261812,1.333201,-2.247141,0.072983,-2.876205,2.303862,-2.198768,-0.858588,2.323280,-3.777531,1.333414,1.277412,-0.125638,-4.921857,0.905826,4.662777,1.519554,2.554040,-0.904212,-2.564436,-0.049451,1.066220,1.673074,1.102829,-1.305114,4.898430,-0.399599,0.809099,-2.029834,-1.801943,-1.860824,-2.437342,-4.363709,1.199325,0.592640,-2.365926,-4.189416,0.878127,-0.955188,-3.613106,2.032148,-3.913174,5.914388,-0.861508,4.993614,-0.010186,1.068252,0.552781,2.348922,0.686461,1.347887,-0.836057,-0.417511,1.096785,1.914232,0.956470,0.390858,1.545351,-0.493801,1.121543,-4.864651,1.599386,3.929014,-0.591720,-2.937208,-2.039028,1.652367,-4.453529,-2.450314,-0.284939,-2.503682,7.475988,-2.233951,-1.148784,2.459910,-2.274349,-2.424586,-2.340636,-2.999696,-3.428433,2.495554,-4.293416,6.673437,1.326003,-1.325872,1.635208,-1.427027,-3.172690,0.390537,-5.703178,6.310870,-1.687011,1.773704,-2.819943,-0.875609,-2.018051,4.256105,2.052196,-4.890880,1.087757,2.342449,-0.917620,-4.079614,-2.630198,1.442510,-2.190269,-3.350533,1.112779,-2.711905,3.690558,-2.974886,-3.664033,4.997577,-1.434913,-0.702823,1.268081,2.043397,0.359604,0.021934,-1.796177,7.719742,-5.708386,-2.101423,1.561392,-2.107903,2.273444,-2.331852,2.840340,-1.153547,0.968689,1.186145,-5.340970,2.878999,0.799972,2.615695,2.982906,1.659017,1.846145,-0.949902,-4.730191,-1.782164,4.132142,-1.382833,-6.146494,1.449442,-2.191751,-1.155142,0.929772,3.963059,-0.821704,0.868923,-2.777534,-2.982654,-1.586477,-2.396110,2.326822,-1.599824,6.078083,-6.439430,1.679200,-0.968986,-0.158889,-0.085614,1.092202,-1.221375,-1.502180,2.093714,2.727281,-3.086561,1.017774,5.190581,3.768042,-2.326261,3.553362,-0.323626,-0.401438,3.909665,-3.101070,-0.680262,2.638019,-0.019080,3.360378,-5.387175,-0.512840,-2.009141,1.296866,0.040171,0.331480,-0.238379,-1.462343,-4.740770,-0.015401,2.936950,-0.651924,-0.901293,-3.836921,6.142310,-5.800762,4.286687,-4.737684,-0.133793,-2.979663,-0.488732,0.028332,1.115997,-1.638471,-1.820407,0.436922,4.691136,-0.202982,8.943903,0.719333,8.089758,0.240024,4.970495,-4.699423,3.237545,2.813051,3.978397,-3.987284,0.822413,3.375929,-3.172055,1.026144,-0.530535,-6.760239,4.098371,-5.487445,0.041733,0.710183,-3.787225,1.377904,-3.153124,-4.448451,-2.556512,-3.607925,-1.666436,-2.477348,3.405989,1.076808,0.954736,1.452518,-3.510494,-2.526684,-2.568790,-3.379426,3.140135,2.169822,4.771016,-0.472033,0.396626,0.821737,1.475960,-3.398465,-4.995393,0.098816,3.873744,-2.775585,-0.291316,-1.006258,-2.532544,0.355802,-1.755105,5.101672,7.426868,-2.159488,-1.155032,1.146931,-4.539948,-1.762735,-2.096842,-0.645077,-1.006133,-0.433499,1.193619,-0.616858,3.090392,-1.895654,-0.758696,-1.272869,-2.398576,1.950146,0.781553,2.043969,-1.274795,-0.529684,-4.990262,-6.466860,-1.739740,-3.658476,2.796686,0.993404,1.997453,2.958587,-5.608055,-4.740724,0.526946,5.389292,0.199387,2.220256,5.140096,3.332762,1.557127,2.933118,-1.293568,1.864851,0.990505,0.504159,0.491164,-4.717780,3.668082,-1.126074,-1.426789,1.529608,-4.588542,0.143328,4.071307,3.197996,3.699596,-0.690205,-4.994602,-3.023643,-2.327384,1.982151,-0.296733,4.341313,1.339472,0.834438,-5.047997,-4.203319,-3.952478,3.491567,5.834850,3.174083,0.933241,-1.679123,-4.685725,-4.065874,0.011349,5.029166,1.688877,2.518958,1.075837,-1.098472,-0.709080,-1.408139,-1.264206,1.342673,-0.221770,-2.038078,-1.106976,-5.250548,2.294376,-3.019834,2.774353,-3.084767,-0.287336,-4.440958,-0.706351,-4.539454,-0.502658,-0.446409,0.635279,0.392518,-0.584445,-6.239496,-0.829296,-5.527858,-0.554856,-1.021847,-4.077414,-3.977540,0.274674,0.636443,-3.723866,-4.415616,-1.626958,0.660472,1.134047,-2.323102,1.280614,2.828732,-1.141936,-4.528105,-1.419848,5.575875,-1.811173,3.389588,0.335031,-1.856798,1.557775,-5.728590,0.459734,0.838324,-2.482091,0.420881,-1.764838,2.938708,2.203918,2.440001,2.811877,-6.065337,0.400695,-0.592121,-0.084188,0.031965,-2.110612,1.542572,-0.812109,-4.576295,2.862029,5.004783,-0.290475,0.253039,0.577756,0.079099,-2.255058,1.858279,2.781716,2.488127,-1.532005,-0.060707,-2.576159,-2.155994,-0.519218,-0.828830,3.903382,-2.094260,-2.506429,2.301920,0.195705,-1.882444,-2.072870,-3.888889,-0.885524,1.094288,1.980053,-1.101463,3.453992,-2.087271,1.578035,1.660535,-1.048563,-0.600730,-0.262280,-3.754733,-3.262230,-0.677930,0.223789,2.633906,0.297234,0.070017,3.279797,1.117666,-1.187812,-0.827763,-1.405989,-1.067552,-0.605080,3.188092,-0.288257,-1.292065,1.535725,1.592028,2.005179,-1.913491,3.223606,-4.444261,-1.304265,3.785626,-1.099586,1.197647,3.888191,-0.904271,-1.813395,-3.062665,3.111362,-2.327051,-2.807750,1.109664,-0.773551,1.230590,-0.596175,-2.691256,3.009394,5.398801,-0.770425,-4.103712,-3.471014,-0.908929,1.037325,-0.063859,0.722025,-2.518008,-0.022903,-0.921131,1.261850,-0.612603,1.215245,-1.081604,0.073777,-1.877030,3.421158,-0.126751,-2.682459,-0.139091,2.049950,1.193181,0.810286,-2.457183,-0.865981,-0.724137,-0.151968,3.729771,1.615817,-0.108366,-3.782972,-0.227065,-0.256588,1.222034,1.574930,-0.442502,-1.531056,-3.173690,0.265945,3.100419,3.176019,0.145388,2.086179,-1.667570,-1.929344,-0.423279,2.514441,2.317025,-3.014148,0.818641,-0.549945,-2.079981,0.098888,7.539721,5.452971,-8.125350,2.024957,-1.286334,-2.754030,1.872302,-3.427281,5.153339,-4.054055,2.841140,-2.155553,-3.034523,-0.617755,-0.239345,4.161613,-6.506575,2.781754,1.023212,-6.195849,-3.028739,-0.423325,3.016926,1.049978,-0.597156,-2.754029,3.448865,1.141074,3.378134,1.069952,-4.164712,0.787048,2.806892,-1.217176,-2.347672,-4.326883,-3.709643,4.746657,0.415743,3.250180,2.216841,-0.489127,3.183926,-2.513884,2.067221,3.043923,4.616095,3.411764,4.682537,1.486250,-4.309215,-0.189442,-5.106012,-1.425771,1.711121,-1.074296,-1.193946,-5.238382,-1.764526,-2.074961,2.227417,-0.803829,1.682501,-0.939418,-1.387228,-1.227144,-2.654926,6.011815,0.814634,1.209372,-2.849462,0.789177,-1.790209,1.353631,3.258237,2.779547,-7.144658,-3.325076,1.785083,-1.636388,-0.337745,-1.178285,2.827132,-1.010469,1.434238,-0.838004,-3.233742,4.253736,-0.115565,0.506693,-1.358368,1.136436,4.527576,4.249712,2.044518,-0.013408,1.482945,1.771357,1.971208,-1.965753,-0.304276,0.958403,-2.680417,-1.713190,2.411942,1.872683,-3.913672,4.337953,-0.188073,1.511566,-3.545266,-2.473865,-0.935143,-0.854442,0.703176,3.631100,2.998194,-3.172862,0.660956,-2.706394,-2.511431,4.137148,1.145942,-2.363304,-0.647916,-1.080744,-0.091066,0.041548,-3.428963,-1.438717,-1.890646,-2.751823,-1.647070,1.284301,-4.934223,2.570267,-0.058262,-1.355810,-1.896079,4.734112,0.143143,0.172971,-0.550402,1.076343,-1.020708,0.046265,-2.060264,2.421962,0.040500,-0.089719,-1.809656,4.577197,2.699755,-2.161446,3.157495,0.543772,-0.603988,0.429271,-0.453724,-4.293742,-3.708539,3.671850,3.237256,-1.155934,-4.719697,-2.354383,2.696196,0.060672,-2.251002,2.570077,4.809885,3.968291,0.538135,3.318631,-6.547014,-0.357053,1.282388,-2.099052,2.409607,-0.915609,1.688291,2.270594,0.590165,-2.386716,2.749757,2.380505,-2.810035,-0.901916,-2.779810,-3.204792,-2.764252,1.975159,-0.981973,5.293998,2.751327,-0.404024,0.442842,-1.381566,-2.819619,1.519053,1.464470,-3.283269,-3.888617,2.531320,-2.435809,-1.837230,1.233200,-1.830487,0.559262,1.043406,0.308238,4.438101,2.203910,-1.722738,2.908358,-0.017211,-0.802285,-2.868719,0.125252,-1.476465,-0.141848,3.824220,0.955764,-0.558052,-0.356001,0.037098,2.366206,0.658556,1.341730,-3.334512,-3.327693,1.534226,-2.450660,-1.890510,-0.085114,-0.824844,-0.564055,1.210988,4.472528,4.070055,1.440786,-0.199867,2.232676,0.421027,2.240824,-1.152562,-2.869785,-0.352908,-0.717200,-0.577159,-0.131809,-2.501262,1.762465,-0.549122,-0.898863,2.580535,-0.014892,-1.620415,0.523096,2.919502,-3.790113,-2.182886,6.454196,-2.613594,-6.411479,-1.449454,-1.004376,-1.063331,-2.195405,1.022027,-2.157810,1.351904,4.597154,-1.512766,-3.711179,-1.543393,1.858466,1.089844,0.110726,-0.230530,-0.975562,-0.381396,1.795193,-0.647166,2.314383,-0.726288,2.104208,0.522803,-0.102130,-4.970343,-0.094554,1.307433,-0.515113,0.786203,2.123240,-1.479419,-0.135657,3.985642,-1.258439,1.992693,2.140233,-2.126106,0.622995,2.503860,-1.595937,4.441868,-2.563199,-2.021016,1.089555,2.927484,-2.041567,-2.784764,2.218863,-0.395612,4.928267,0.550004,-0.959043,-2.697813,-2.232053,2.683768,2.695036,0.524616,2.783683,-4.064313,-0.238441,2.933219,0.440233,-0.840571,-7.994110,4.717312,-3.630261,4.985171,-1.464034,-1.592710,-0.712654,4.485281,0.514831,-0.248059,3.589013,0.521420,-0.081582,-0.867171,-4.206909,-4.580775,-4.305184,1.501605,5.061756,-0.799254,1.600653,-2.346902,-3.201022,-0.291255,-1.285387,0.590045,1.679733,-1.276099,-4.178267,-0.996449,-1.075646,1.024224,-0.824291,0.234117,0.408673,2.109702,-2.243677,0.685821,0.655739,-0.350790,-2.566509,-1.583379,1.694303,0.286069,1.105909,-2.442420,3.419236,-2.437058,1.112154,1.856264,-2.844431,4.621421,2.669517,1.982946,-2.260421,1.838464,-1.831016,0.853379,1.666287,-0.565168,-1.449975,0.990978,-3.448131,1.555184,8.688093,1.613880,1.480283,-0.407168,0.445553,-3.382911,-0.385646,0.269401,0.014275,-2.935271,-2.217107,4.364831,1.145834,0.777634,-2.137724,1.445976,6.080402,-4.747075,1.746429,1.209941,4.182820,-1.894449,-1.475128,-2.678073,-1.077587,4.859661,-2.721947,-1.471810,-2.406933,1.310058,-0.706007,-2.058953,0.922785,-3.145372,-0.159245,2.902838,-4.336012,0.595981,1.351569,-5.677433,-2.367984,-0.449378,0.231313,2.748907,-3.108034,-0.709639,2.184839,-1.618212,0.911191,0.346062,-0.414894,-3.870537,0.913479,0.455579,1.956341,2.154887,-2.408054,0.484738,-0.841195,0.688802,4.209517,1.233217,-2.851614,-0.770486,-1.418259,0.016471,-0.501814,0.672083,2.297254,1.384813,-1.768757,3.918304,0.304516,2.086453,0.755932,0.735508,-2.976584,0.692971,-1.296061,-7.347276,-2.169559,-1.860429,-2.745759,1.866363,1.818403,4.748431,2.711926,-3.896648,-3.228132,-0.520929,2.917679,0.977822,-4.672035,-0.505217,-2.019511,2.713295,-2.213034,-3.789110,1.826128,0.714749,3.028087,1.957546,-1.028016,-3.767533,-2.337667,5.510308,-3.939394,-0.214129,1.277994,4.893094,-1.133607,4.860960,0.014593,-0.525221,3.304368,-1.909206,0.616318,-0.935008,-0.578686,-2.724492,-0.561733,-2.401762,4.772506,3.094884,3.465178,-0.969593,-3.640854,-0.911648,-4.114129,0.344464,1.133689,1.303839,-5.601315,-4.116673,-3.492215,-0.551658,-0.966192,5.130723,6.290287,5.270452,1.149357,-2.460248,-5.393554,-1.250804,0.121218,-0.110687,1.383013,-4.469207,1.537999,-0.880330,-0.243376,-0.342885,1.396630,-2.732690,2.034975,2.477493,1.059920,-2.913940,-1.666718,3.425429,5.112140,-3.975711,-1.432026,-0.191445,1.664885,-1.297942,-2.594388,3.057192,2.286360,8.873343,1.251087,1.341882,1.455253,-4.740438,1.417383,0.953907,-1.820899,-3.194699,-3.217972,0.395746,2.593567,1.601017,-0.346152,1.271595,4.043174,2.979353,3.287579,2.136997,-0.978248,0.466757,0.649161,-5.449493,1.294271,-1.219633,-3.701447,-0.997626};

  element_t bias_raw[] = {1.324, 3.829, 2.112, 0.003, 0.28464628};

  auto& ms = MinervaSystem::Instance();
  Scale input_size{7, 6, 3, 2};
  Scale weight_size{5, 3, 5, 3};
  Scale correct_size{17, 9, 5, 2};
  Scale bias_size{5};
  shared_ptr<element_t> input_ptr(new element_t[input_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> bias_ptr(new element_t[bias_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), input_raw, input_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));
  memcpy(bias_ptr.get(), bias_raw, bias_size.Prod() * sizeof(element_t));

  ms.SetDevice(cpu_device);
  ImageBatch top = NArray::MakeNArray(input_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  NArray bottom = NArray::Zeros(correct_size);
  ConvInfo conv_info(3, 2, 3, 2);
  ms.SetDevice(gpu_device);
  ImageBatch output = Convolution::ConvBackwardData(top, bottom, weight, conv_info);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
	//printf("%f,",output_ptr.get()[i]);
  }
}


/*
 *  Backward Bias
 */

TEST(ConvBackwardBias, GpuWithoutPaddingSmall) {
  element_t top_diff_raw[] = {8,6,4,2};
  element_t weight_raw[] = {1,2,3,4};
  element_t correct_raw[] = {20};
  Scale top_size{2, 2, 1, 1};
  Scale weight_size{2, 2, 1, 1};
  Scale correct_size{1, 1, 1, 1};
  auto& ms = MinervaSystem::Instance();
  shared_ptr<element_t> input_ptr(new element_t[top_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), top_diff_raw, top_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));
  ms.SetDevice(cpu_device);
  ImageBatch input = NArray::MakeNArray(top_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  ConvInfo conv_info(0, 0, 1, 1);
  ms.SetDevice(gpu_device);
  NArray output = Convolution::ConvBackwardBias(input);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
  }
}

TEST(ConvBackwardFilter, GpuWithoutPaddingSmall) {
  element_t top_diff_raw[] = {8,6,4,2};
  element_t weight_raw[] = {1,2,3,4};
  element_t bottom_raw[] = {10,11,12,13,14,15,16,17,18};
  element_t correct_raw[] = {306,286,246,226};
  Scale top_size{2, 2, 1, 1};
  Scale weight_size{2, 2, 1, 1};
  Scale bottom_size{3, 3, 1, 1};
  Scale correct_size{2, 2, 1, 1};
  auto& ms = MinervaSystem::Instance();
  shared_ptr<element_t> input_ptr(new element_t[top_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> bottom_ptr(new element_t[bottom_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), top_diff_raw, top_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));
  memcpy(bottom_ptr.get(), bottom_raw, bottom_size.Prod() * sizeof(element_t));
  ms.SetDevice(cpu_device);
  ImageBatch input = NArray::MakeNArray(top_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  ImageBatch bottom = NArray::MakeNArray(bottom_size, bottom_ptr);

  ConvInfo conv_info(0, 0, 1, 1);
  ms.SetDevice(gpu_device);
  ImageBatch output = Convolution::ConvBackwardFilter(input, bottom, weight, conv_info);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
  }
}

TEST(ConvBackwardData, DISABLED_GpuWithoutPaddingSmallDepth2) {
  element_t input_raw[] = {1,2,3,4,5,6,7,8};
  element_t weight_raw[] = {11,12,13,14,15,16,17,18};
  element_t correct_raw[] = {544};
  auto& ms = MinervaSystem::Instance();
  Scale input_size{2, 2, 2, 1};
  Scale weight_size{2, 2, 2, 1};
  Scale correct_size{1, 1, 1, 1};
  shared_ptr<element_t> input_ptr(new element_t[input_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), input_raw, input_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));

  ms.SetDevice(cpu_device);
  ImageBatch input = NArray::MakeNArray(input_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  NArray bottom = NArray::Zeros(correct_size);
  ConvInfo conv_info(0, 0, 1, 1);
  ms.SetDevice(gpu_device);
  ImageBatch output = Convolution::ConvForward(input, weight, bottom, conv_info);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
  }
}


TEST(ConvBackwardData, DISABLED_GpuWithPaddingSmall) {
  element_t input_raw[] = {1,2,3,4};
  element_t weight_raw[] = {10,2,3,5};
  element_t correct_raw[] = {0,0,0,0,57,0,0,0,0};
  auto& ms = MinervaSystem::Instance();
  Scale input_size{2, 2, 1, 1};
  Scale weight_size{2, 2, 1, 1};
  Scale correct_size{3, 3, 1, 1};
  shared_ptr<element_t> input_ptr(new element_t[input_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), input_raw, input_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));

  ms.SetDevice(cpu_device);
  ImageBatch input = NArray::MakeNArray(input_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  NArray bias = NArray::Zeros({1});
  ConvInfo conv_info(2, 2, 2, 2);
  ms.SetDevice(gpu_device);
  ImageBatch output = Convolution::ConvForward(input, weight, bias, conv_info);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
  }
}


TEST(ConvBackwardData, DISABLED_GpuWithoutPadding) {
  element_t input_raw[] = {8.59232186e-01, -3.67248891e-01, -6.32162377e-01, -5.90879443e-01, 1.35450058e-01, 1.91089406e-01, 9.29029039e-01, 3.06354194e-01, 4.97813275e-01, 3.07139742e-01, 4.95429619e-01, 9.22613472e-01, -9.83223404e-01, -7.87111247e-01, -4.02592572e-01, 3.12822366e-01, 6.19625105e-01, 7.44351827e-01, 9.29295195e-01, 4.47370694e-01, 2.84950656e-01, 4.34907242e-01, -6.48019856e-02, -3.48830645e-01, -1.20710788e-01, 4.59378165e-01, 9.88029172e-01, 3.53747424e-01, 5.81645036e-01, -6.58171484e-01, -9.46301448e-01, 6.00740488e-01, 8.07445076e-01, -9.50647579e-01, -1.65053631e-02, 5.25103347e-02, 1.92732021e-01, -8.96084910e-01, 7.90179056e-01, 4.56532361e-01, 6.36700023e-01, 4.45505669e-04, 6.20378818e-01, -8.08062949e-01, -5.62099913e-01, -4.82561877e-01, -6.37884921e-02, -8.12535948e-02, 4.19019560e-01, -6.43893988e-01, 6.28997687e-02, -6.64515542e-01, 5.37627837e-01, 8.56341098e-01, 2.18987316e-01, -6.99633011e-01, -2.07465926e-02, -2.45310092e-01, 6.97202824e-01, 8.22194457e-01, -2.32302558e-01, -3.69008193e-01, 1.36788306e-01, -6.24363930e-01, -7.48316912e-01, 3.75191610e-01, 5.99213436e-01, 1.47073130e-01, 9.46459963e-01, 2.68108754e-01, 7.76843450e-01, -9.17048249e-03, -2.96766940e-01, 4.28460737e-01, 7.85823290e-03, -5.48724787e-01, -5.10051120e-01, 5.85601400e-01, -9.65517098e-03, 8.30187347e-01, 8.90743668e-01, 6.64644593e-02, -4.95014811e-01, 4.41724116e-01, -2.65122472e-01, -2.70311418e-03, -5.46849905e-01, -2.92868707e-01, 3.01703573e-01, -3.74134209e-01, 5.37470894e-01, 5.63674207e-01, 7.04818966e-01, 8.99811480e-01, -7.85354176e-01, 8.21450712e-01, -3.27889676e-01, 6.52760854e-01, 7.96201270e-01, -9.14569391e-01, -6.08410002e-01, -4.10997356e-01, 2.53999761e-01, -8.27553790e-01, -7.14109960e-01, 3.16530385e-02, 3.78682659e-01, 7.13251622e-01, 2.94723367e-01, 1.63237351e-01, 4.22231910e-01, -4.95166286e-01, 8.00319367e-01, -1.15412614e-01, -9.58958351e-01, 9.19322028e-01, 3.04450845e-01, 2.64125002e-02, 3.64712766e-01, -2.09192187e-02, 8.52980343e-01, 3.17595443e-02, -8.55680237e-01, 1.35016596e-01, 2.30486367e-01, 8.83092589e-01, -1.69273291e-01, -4.71120051e-01, -8.05213669e-01, -2.83115562e-02, -7.06742743e-02, -9.40481366e-01, 3.88554924e-01, 4.33894225e-01, 4.59622847e-01, -1.71297966e-01, -9.69802310e-01, 8.17950315e-01, 5.78757436e-01, -6.69601662e-01, -3.74428077e-01, 2.21890612e-01, -2.71019427e-01, -6.87922822e-01, -6.45392373e-01, 7.35779342e-01, -4.19810663e-01, 1.70359243e-01, -9.20102482e-02, -1.77643736e-01, 7.65268890e-01, 3.85416030e-01, -4.41453290e-01, -8.71119538e-01, -6.02752772e-01, 8.63365489e-01, 7.08827136e-01, 9.09469469e-01, -8.95493304e-01, 1.58943361e-01, -3.90074667e-02, -9.56582042e-01, -2.52759073e-01, -1.71816398e-01, 2.07814468e-01, 3.43497455e-01, 6.77731401e-01, 5.59052417e-01, -1.98597912e-01, 5.89058463e-01, 7.86248621e-01, -4.75020618e-01, 9.78394015e-01, 7.06614198e-01, 4.62954312e-01, -2.88868751e-01, 7.66578981e-01, 7.35918182e-01, 9.11532892e-01, -9.99785487e-01, -9.66917916e-01, -3.71859885e-01, 9.90632349e-01, -7.02311554e-01, -6.65245763e-01, 5.17144074e-01, -8.60940668e-01, 4.10946877e-01, -6.16694364e-02, -9.79623568e-01, 5.49647726e-01, 5.88402017e-01, -7.00861097e-01, -9.52592736e-01, 5.24127542e-01, -5.52659640e-01, -4.75651204e-01, -8.62609944e-02, -5.00146163e-01, 1.36567123e-01, 6.93885994e-01, -2.43800926e-01, -1.35069767e-01, 6.65238353e-01, -2.57736129e-01, -9.18893456e-01, 1.09342972e-01, -9.75075144e-02, 4.50601953e-01, -2.43098955e-01, 6.81324991e-01, -6.13706128e-02, 1.25286858e-01, 3.22398678e-01, -7.55162650e-02, 2.47273891e-01, -5.56238738e-01, 4.65726234e-01, -2.36635823e-01, -6.10330916e-01, -4.57674450e-01, -5.01549896e-01, -6.95721875e-01, 5.42747408e-01, -4.89176535e-01, -7.44913190e-01, 3.30334307e-01, -1.74390103e-01, 3.35535533e-01, 3.19627034e-01, -3.89244656e-01, -5.97551518e-01, -5.55945747e-01, -7.60058273e-01, -9.25709118e-01, -9.31736833e-01, -5.39006904e-01, -5.43292587e-01, 2.49821244e-01, 7.85122371e-01, 5.59456032e-01, 4.42902537e-01, -3.79115682e-01, -2.73833167e-01, -6.07836432e-01, 8.70983596e-01, 1.23468000e-01, 6.34583074e-01, -3.02172038e-01, 5.99428526e-01, -7.91791075e-01, 4.24240330e-01, 8.34896992e-01, 6.07170737e-01, -3.45773707e-01, -4.89785641e-01, -9.99565129e-03, -1.72778091e-01, -1.50125809e-01, -8.51243390e-01, 2.06781303e-01, 4.94399467e-01, 5.95152453e-01, -2.36998955e-01, 5.94316306e-01, -5.64052608e-02, 4.42798342e-01, -6.21574621e-01, -1.30808581e-01, 6.46936218e-01, 6.52545256e-01, -6.20949033e-01, -9.59795660e-01, 4.06982772e-01, -3.05459761e-01, -1.60992368e-01, 5.36177806e-01, 9.25756133e-01, 7.85130614e-01, -7.30115467e-01, 5.95609430e-01, 3.64181215e-01, 6.01057742e-02, 7.31963310e-01, 5.06496191e-01, -8.13594826e-01, -3.41121136e-01, -1.75274609e-01};

  element_t weight_raw[] = {-2.99421235e+00, 5.85381379e-01, 1.09536925e+00, -8.02315431e-01, -6.21006855e-01, -1.47845127e-01, 4.86479403e-01, -2.17717723e+00, 2.99648504e+00, 4.39632527e-02, -4.15997727e-02, -1.87875147e+00, -1.22347191e+00, 1.79109036e+00, -1.23133024e+00, 1.18272956e+00, -1.36224463e+00, 2.47517071e+00, -1.20876460e+00, 2.33915863e+00, 2.68033376e+00, -1.98652306e+00, -8.44251566e-01, 1.09306382e+00, 2.52835182e+00, -2.13045394e+00, -2.40075369e+00, -5.30383341e-01, 2.85075222e+00, -2.75096075e+00, -1.87851423e+00, 6.52607928e-01, -2.47668771e+00, -1.10227108e+00, 6.60814659e-01, -1.79283172e+00, 1.15138630e+00, -1.53223817e+00, 1.08223018e+00, -8.43736265e-02, -1.43703113e+00, -1.30355808e+00, 2.43270972e+00, -1.34494388e+00, 2.04688826e+00, -1.82145375e+00, -1.01649942e+00, 2.67977931e+00, 3.64310972e-02, -5.79504850e-01, -2.83763077e+00, 7.30642137e-01, -9.15908959e-01, -1.33920463e+00, -2.61567136e+00, -9.93656887e-01, -2.59374035e+00, -2.97705451e+00, -2.75419318e+00, -9.06270806e-01, -2.44827413e+00, 1.21894359e-01, -1.70550112e+00, 2.94999927e+00, -1.39687703e+00, 1.08100832e+00, 1.57476715e-01, -3.60461582e-01, 9.69331474e-01, -2.19128895e+00, 1.72709403e+00, -2.17213379e+00, 7.97539786e-01, -1.71800785e+00, -2.85974811e+00, 7.61603840e-01, 8.52982359e-01, 8.52620021e-01, 2.18772540e+00, -9.76791579e-01, -5.34249680e-01, 6.61912103e-01, 2.64505914e+00, -2.08753638e+00, -1.89565196e+00, -2.07337027e+00, 1.27694596e+00, 2.56789897e+00, -4.63876920e-01, 2.71063582e-01, -1.06566621e+00, -2.03577190e+00, 1.21891215e+00, 1.38149044e+00, 2.76242723e+00, -7.77056575e-01, 1.30019035e+00, 2.91636731e+00, -2.33539465e+00, 1.54937129e+00, -2.05467527e+00, 1.89861153e+00, 3.24639277e-01, 4.90261325e-01, 2.61687350e+00, -3.93913469e-01, -6.52368818e-02, 9.96782801e-01, 7.80924006e-01, -2.21877150e+00, -8.76936173e-01, 8.10740308e-01, 2.51373517e+00, -2.45239968e+00, -2.57350725e+00, -5.17730183e-01, -1.70615298e+00, 1.18191789e-01, 3.51084133e-01, -1.57799016e-01, -1.70476727e+00, -1.56336669e+00, -1.69957048e+00, 9.34142269e-01, 2.07836070e+00, 2.58278636e+00, 1.80183310e+00, 1.08435507e+00, -1.75645825e+00, 1.44995835e+00, 1.18142751e+00, -7.09443154e-01, 2.10071475e+00, 1.68667087e-01, 2.35805441e+00, 1.92335625e+00, -1.62852828e+00, 1.92374382e+00, -2.16863145e+00, -1.05195029e-01, -2.10713666e+00, -3.10235670e-01, 9.95738834e-01, 1.73419455e+00, 9.72124549e-01, 1.26907457e+00, 2.32754197e+00, -2.14994825e+00, -2.11457926e+00, -1.04441494e+00, -2.80875702e+00, 1.12657737e+00, 1.58838027e+00, -8.99943488e-01, 6.96045664e-01, 2.75099915e+00, -1.25368430e+00, 1.12007078e+00, -2.74663062e+00, -2.62497821e+00, 1.88639217e+00, -3.80289825e-01, -6.47589408e-01, -1.01611392e+00, -2.54047030e-01, 2.01211291e+00, -1.99386743e-01, -4.72284073e-01, 4.25109318e-01, 1.43433574e+00, -2.66949955e+00, 7.45083894e-01, 7.26361966e-01, -2.99333681e+00, 6.17361038e-01, -2.75888753e+00, 5.14502201e-01, -3.09723452e-01, -8.77618394e-01, 2.60115141e+00, -1.39646441e+00, -1.31220372e+00, 2.94357819e-02, 8.80836712e-01, 2.82344057e+00, -2.78474712e+00, -4.60800803e-01, 5.29872532e-01, 1.39021370e+00, -1.94693356e+00, 6.32327077e-02, 1.70757504e-03, 2.35660579e+00, -7.03903755e-01, 9.77183021e-01, -2.71913064e+00, 1.50733970e+00, -7.87288246e-01, 2.68817182e+00, -9.16648691e-01, 1.10335919e+00, 1.94780929e+00, -8.24820346e-02, 2.90505523e+00, 6.22884229e-01, 1.55774899e+00, 1.10710017e+00, 2.59449736e+00, 2.69871283e+00, 2.94066677e+00, -2.24306770e+00, 2.85960370e+00, -1.62536606e+00, -1.88366146e+00, 5.52685321e-02, 1.82986096e-01, -1.30416455e+00, -1.13903079e+00, -1.14069374e+00, -1.40166668e+00, 5.60586905e-01, -1.69719377e+00, -5.85702494e-01, -1.26863256e+00, -1.95695511e+00};

  element_t correct_raw[] = {-1.53458012e-01, -7.65405332e+00, 4.98830497e+00, 2.04852002e+00, -3.82358333e+00, 7.36837003e+00, 8.39924023e+00, -4.62756444e+00, -5.50727587e+00, 1.20214505e+01, -1.53043815e+01, 1.11244327e+00, 7.04805004e-01, 2.29797806e-01, -7.32889433e+00, 1.47271564e+01, 1.01044780e+01, 2.41905064e+00, -5.31388064e+00, -3.27185811e+00, -5.79821618e+00, 3.00265788e-01, 1.47316324e+00, -4.31265309e+00, -1.16285290e+01, -5.65152968e+00, -1.26282823e+00, -7.59112465e+00, -8.72511524e+00, -5.25022006e+00, -7.82986638e-01, 6.10214152e+00, 1.61352078e+01, -4.04867987e-01, -1.31349268e+01, -2.44915779e-01, 1.39773955e+01, 3.66806225e+00, 5.80719452e+00, 6.22372275e+00, 1.61941934e+00, 1.61922030e+00, 4.08148270e+00, -5.31495425e+00, 3.31723523e+00, 1.48087048e+01, 5.12534403e+00, -8.85206695e+00, 3.47283117e+00, 8.13983753e+00, -6.09539078e-02, -2.29926111e+00, 5.15988338e+00, -1.18856035e+01, -7.12207532e+00, 6.25921427e-01, 2.04809803e+00, 2.17005161e+00, 3.07331189e+00, 1.32922857e+00, -9.02002841e+00, -3.46313153e+00, -1.68674612e+00, -5.82162868e+00, 6.27101890e+00, 3.68211379e+00, 7.06585228e-01, 1.61090449e+00, 5.32800254e+00, 5.92726186e+00, 7.48984518e+00, -3.15173559e+00, -4.97384231e-01, 6.95062311e+00, 1.38288414e+01, -3.14463537e+00, -2.77009473e+00, 5.24369450e+00, 7.55776522e+00, -1.11608027e+01, 6.57839023e+00, -4.40262046e+00, 1.09980762e+00, 1.40552491e+00, -1.92546614e+01, -1.08176358e+00, 1.14700068e+00, 2.91672461e+00, -3.09855249e+00, -8.76800761e-01, -1.50497319e+01, 3.63177760e+00, 5.45905926e+00, 1.92832976e-01, -1.20174465e+01, -1.99778930e+00, -4.32951502e+00, 1.49937736e+00, 2.32108850e+00, -3.67743356e+00, -3.04202120e+00, -1.11109333e+00, -2.60361444e-01, 3.16173660e-01, 2.45348885e+00, -9.83839821e+00, -1.07808297e+01, 9.32800709e+00, -2.67422968e+00, -5.28735861e+00, -5.76634320e+00, 5.89462610e+00, -9.91125411e-01, 1.34330406e+01, -1.49107008e+01, -5.03363614e+00, 1.12514116e+00, -3.32207401e+00, 6.11599114e+00, 1.11681283e+00, 4.11900416e+00, -4.21087862e+00, 4.36223246e+00, -7.76174330e+00, 1.45358128e+00, 4.93798049e+00, 1.13569034e+01, 4.94783663e+00, -4.44187478e+00, -3.27488160e+00, 6.61695509e+00, -8.27047693e-01, 3.13530944e+00, -2.92434481e+00, -4.27918564e-01, -1.18010988e+01, 1.06067542e+00, -6.99189526e+00, 7.01859887e+00, 7.34324150e+00, 2.28063152e+00, 1.16676194e+00, -6.16082444e+00, -4.55011217e+00, -1.55240377e+01, -6.96617531e+00, 7.84952584e-03, -6.58186876e+00, -1.15664570e+00, 1.61505289e+00, 1.23032964e+00, -2.69841882e+00, 2.99208490e+00, 3.77462452e+00, -2.27055021e+00, 1.14624322e+00, -1.64543438e+00, 2.79936201e+00, -1.79692494e+01, -8.04918516e+00};

  auto& ms = MinervaSystem::Instance();
  Scale input_size{8, 6, 3, 2};
  Scale weight_size{5, 3, 3, 5};
  Scale correct_size{4, 4, 5, 2};
  shared_ptr<element_t> input_ptr(new element_t[input_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), input_raw, input_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));

  ms.SetDevice(cpu_device);
  ImageBatch input = NArray::MakeNArray(input_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  NArray bias = NArray::Zeros({5});
  ConvInfo conv_info(0, 0, 1, 1);
  ms.SetDevice(gpu_device);
  ImageBatch output = Convolution::ConvForward(input, weight, bias, conv_info);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
  }
}

TEST(ConvBackwardData, DISABLED_GpuWithPadding) {
  element_t input_raw[] = {5.25103347e-02, 1.92732021e-01, -8.96084910e-01, 7.90179056e-01, 4.56532361e-01, 6.36700023e-01, 4.45505669e-04, -6.37884921e-02, -8.12535948e-02, 4.19019560e-01, -6.43893988e-01, 6.28997687e-02, -6.64515542e-01, 5.37627837e-01, -2.45310092e-01, 6.97202824e-01, 8.22194457e-01, -2.32302558e-01, -3.69008193e-01, 1.36788306e-01, -6.24363930e-01, 9.46459963e-01, 2.68108754e-01, 7.76843450e-01, -9.17048249e-03, -2.96766940e-01, 4.28460737e-01, 7.85823290e-03, 8.30187347e-01, 8.90743668e-01, 6.64644593e-02, -4.95014811e-01, 4.41724116e-01, -2.65122472e-01, -2.70311418e-03, 5.37470894e-01, 5.63674207e-01, 7.04818966e-01, 8.99811480e-01, -7.85354176e-01, 8.21450712e-01, -3.27889676e-01, 5.59052417e-01, -1.98597912e-01, 5.89058463e-01, 7.86248621e-01, -4.75020618e-01, 9.78394015e-01, 7.06614198e-01, 9.11532892e-01, -9.99785487e-01, -9.66917916e-01, -3.71859885e-01, 9.90632349e-01, -7.02311554e-01, -6.65245763e-01, -9.79623568e-01, 5.49647726e-01, 5.88402017e-01, -7.00861097e-01, -9.52592736e-01, 5.24127542e-01, -5.52659640e-01, 6.93885994e-01, -2.43800926e-01, -1.35069767e-01, 6.65238353e-01, -2.57736129e-01, -9.18893456e-01, 1.09342972e-01, -6.13706128e-02, 1.25286858e-01, 3.22398678e-01, -7.55162650e-02, 2.47273891e-01, -5.56238738e-01, 4.65726234e-01, -6.95721875e-01, 5.42747408e-01, -4.89176535e-01, -7.44913190e-01, 3.30334307e-01, -1.74390103e-01, 3.35535533e-01, -6.26250490e-01, -4.07823970e-01, 5.97030118e-01, -4.10443414e-01, 3.94243187e-01, -4.54081542e-01, 8.25056903e-01, -2.81417189e-01, 3.64354606e-01, 8.42783940e-01, -7.10151312e-01, -8.00251230e-01, -1.76794447e-01, 9.50250742e-01, -3.67423692e-01, 2.20271553e-01, -5.97610574e-01, 3.83795433e-01, -5.10746058e-01, 3.60743392e-01, -2.81245422e-02, 6.82296085e-01, -6.07151251e-01, -3.38833141e-01, 8.93259770e-01, 1.21436991e-02, -1.93168283e-01, -9.45876923e-01, -3.31218962e-01, -8.64580115e-01, -9.92351503e-01, -9.18064393e-01, -3.02090269e-01, -8.16091378e-01, 4.06314529e-02, 5.24922383e-02, -1.20153861e-01, 3.23110491e-01, -7.30429651e-01, 5.75698010e-01, -7.24044598e-01, 2.65846595e-01, 5.78064850e-01, 3.24041516e-01, 4.23024858e-01, 7.75847324e-01, -7.16649418e-01, -7.04859753e-01, -3.48138314e-01, 2.32015221e-01, 9.16999718e-01, -4.17894767e-01, 3.73356925e-01, -9.15543539e-01, -8.74992737e-01, 6.28797391e-01, 6.70704305e-01, -6.64622476e-02, -1.57428024e-01, 1.41703106e-01, 4.78111913e-01, -8.89833183e-01, 2.48361298e-01, 1.71500734e-01, -1.03241151e-01, -2.92539465e-01, 8.67050469e-01, -4.65488136e-01, -4.37401239e-01, 9.81192729e-03, 1.76624177e-01, 4.63404565e-01, -6.48977854e-01, 2.10775692e-02, 5.69191679e-04, 7.85535264e-01, -2.34634585e-01, 8.96057273e-01, -3.05549564e-01, 3.67786398e-01, 6.49269763e-01, -2.74940115e-02, 9.68351743e-01, 2.07628076e-01, 1.85028318e-01, -3.49798716e-01, 8.73610682e-01, -8.08034049e-01, 7.66591492e-01, 1.36035466e-01, -8.76153051e-01, -9.42090961e-01, 2.54198007e-01, 2.09278522e-01, -8.43584950e-01, 5.45907125e-01, -7.13366751e-01, -7.26307843e-02, 4.97412749e-01, 7.79227666e-01, -2.41219689e-01, -4.15127476e-01, 1.85804799e-02, 6.56272008e-02, -7.89156759e-01, 5.95946891e-01, -5.11510156e-01, 6.07075484e-01, -4.03649869e-01, -6.54580737e-02, 8.65639316e-01, 8.19513569e-01, 2.93617672e-01, -3.35847054e-01, -7.71555326e-01, 1.42208982e-01, -3.96017041e-01, -6.12988788e-01, 1.29411384e-01, -1.88205315e-01, 3.31118167e-01, -6.05975908e-01, -5.16439080e-01, 2.46344907e-01, 5.97476702e-01, 8.92727341e-02, 8.77082477e-01, 4.78201578e-01, -9.46106323e-01, -2.35208227e-01, -9.78947208e-01, -8.69535860e-01, 3.62785391e-01, 7.88573716e-01, 4.13573947e-01, -4.22013528e-02, -5.68775015e-01, -8.36467872e-01, 3.46404408e-01, 9.89558378e-01, 8.96711938e-02, 9.67284551e-01, 4.71404282e-01, -8.13833601e-01, -4.15551966e-01, -4.53903666e-01, -8.57667173e-01, -5.76563967e-01, -4.14422920e-01, -2.87165417e-01, 9.12734981e-01, 3.20487724e-01, 9.01024809e-01, -8.06264818e-01, -4.12511687e-01, 2.99419879e-01, -1.58010723e-01, -8.50696651e-01, 4.77613710e-01, 1.70740085e-01, -3.10658805e-01, -4.22856328e-01, -4.71636816e-01, -4.46162130e-01, 6.84712020e-01, -6.60755426e-01, -4.95826747e-01, 1.83750401e-01};

  element_t weight_raw[] = {4.69434058e-01, -1.38583424e+00, -1.19454332e+00, 7.51993600e-01, 1.67906442e+00, -4.73379739e-01, 9.41878306e-01, -4.58280482e-01, -8.89644787e-01, 7.47770021e-01, 1.86899005e+00, -3.76912984e-02, -2.68109599e+00, -1.01194085e-01, 2.78046317e-02, -3.78493153e-01, -7.43905667e-01, 1.66726823e+00, -2.39953374e+00, -2.90112339e+00, 1.69425602e+00, 2.11895221e+00, -1.65778947e+00, 7.61535409e-01, -2.61197826e+00, -1.56647519e+00, -2.41361783e-01, 9.76095418e-01, -1.69379028e+00, -1.80317946e-01, 2.86974591e+00, 7.83224328e-02, -1.79212071e-01, 9.96846111e-01, 1.27322826e-01, -1.45638535e+00, 1.94500748e+00, -2.22728921e+00, -1.96833731e+00, -1.95052845e+00, -7.08356663e-01, -2.39044050e+00, -6.61220349e-01, 1.85948655e+00, -8.77489231e-01, 2.25910682e+00, 2.75299436e+00, 2.03237053e+00, -2.30972770e+00, 3.74469986e-01, -2.34937194e+00, 2.25521054e+00, -8.99953121e-01, 2.38629051e+00, -2.25493565e+00, 8.27170971e-01, 2.23515090e+00, -2.99360661e+00, -1.17168090e+00, -2.82705197e+00, 2.98377018e-01, -1.94885169e+00, 5.40153173e-01, -2.96927632e+00, -1.30786336e+00, 1.55878752e+00, 2.23167008e+00, 3.25273789e-02, -9.75319840e-02, -2.71345071e+00, 1.50482951e+00, 1.98800589e+00, 2.19620308e+00, 1.96069188e+00, -2.51859384e-03, -2.94740383e+00, -9.52835533e-01, 1.44073713e+00, 2.46472884e+00, -1.23625174e+00, -1.87975626e+00, 2.30530176e+00, -6.95593244e-01, 7.01437086e-01, 5.81853703e-01, -1.06019632e+00, 8.40219457e-01, -3.08456307e-01, 1.19075977e+00, -2.02837369e+00, -1.82785135e+00, -1.03247982e-01, 3.75951276e-04, 1.60856600e+00, -1.84283918e+00, 2.95301614e+00, -1.04820246e+00, 2.07600281e+00, 1.90885268e+00, 2.43943187e+00, 1.43667562e+00, -1.10003648e+00, -2.83465135e+00, 3.78231860e-01, 2.74004219e+00, -2.06394886e+00, 1.54640811e+00, -2.75194253e+00, -1.83270810e+00, 1.21537604e-01, -2.10613421e-01, 1.73705801e+00, -2.23164924e+00, 2.35449197e+00, -1.94164743e+00, -3.90715826e-01, -2.10387976e+00, 1.13258744e+00, 1.88402160e+00, -1.84470203e+00, 4.68833930e-01, 1.32519944e+00, -1.49205079e-01, -1.42829315e+00, 1.40477660e+00, -9.04758285e-01, 1.02878655e+00, -2.66964987e+00, 2.38227291e+00, 1.29870916e-01, -1.34866170e+00, 2.06100418e+00, -3.45158807e-01, 1.01549933e+00, 2.95588019e+00, 2.11601428e+00, 2.60128869e+00, 2.17276736e+00, -2.59770354e+00, -1.24910999e+00, -1.82202496e+00, -5.33936144e-01, -4.84902078e-01, 2.74960541e+00, 2.54449228e+00, 2.90201444e+00, -7.12005966e-01, 2.78452402e+00, 5.41890668e-01, 6.39412589e-03, -1.30741768e+00, -2.02580336e+00, -3.07274893e-01, -9.16216399e-01, 1.43133925e-01, 2.62978313e-01, -2.93526489e+00, -1.22066322e+00, -1.99031596e+00, 2.75104991e+00, -1.58140965e+00, 1.99593194e+00, 1.24653142e+00, 3.63953174e-01, 1.20670807e+00, -1.72797444e+00, 1.14623773e+00, 7.29634814e-01, 1.30469585e+00, -2.08381639e+00, -2.43447976e+00, 2.70710670e+00, -5.76311983e-01, 8.60548537e-01, 2.76294937e+00, 2.02390457e+00, -2.21619757e+00, 5.84615982e-03, -1.90966590e+00, -2.69773939e+00, 2.37040542e+00, -1.40377827e+00, -2.67741849e+00, -3.91919585e-03, 1.68066674e+00, 3.41687874e-01, -2.18967901e+00, -6.68539573e-01, -1.45396104e+00, 1.63947625e-01, 2.41602503e+00, 2.11868255e+00, 2.02093959e+00, -1.70472896e+00, -2.19870107e+00, -2.27854787e+00, 2.24774629e+00, -2.51982957e+00, -6.63516277e-01, -1.90908765e+00, -5.33080226e-01, 2.00029937e+00, 2.87068895e+00, -2.97450387e+00, 3.59138519e-01, 1.51067887e+00, -6.59731115e-01, -1.14836880e+00, 1.78586722e+00, 1.33662466e+00, 1.80534568e+00, 2.83009647e+00, 2.26499936e+00, 6.41048319e-01, -1.35574472e+00, 1.12644441e-01, 4.13352887e-01, 2.71106637e+00, -3.33341733e-01, 2.67315433e+00, 4.36720777e-01, 2.50423523e+00, -6.96118478e-01, -2.71824102e+00, 2.16307105e+00};

  element_t correct_raw[] = {0., 0., 0., 0., -10.77531046, 2.46662046, -8.15783683, -3.39263197, 1.37159808, -2.94898676, 8.88649318, 1.73765018, 0., 0., 0., 0., 0., 0., 0., 0., -2.02258181, 2.51361957, -5.4055992, -7.1166395, 2.7661521, -9.20120725, -5.21644148, -8.91871525, 0., 0., 0., 0., 0., 0., 0., 0., -3.44745653, -6.40158273, -3.71314271, 0.3923351, 3.02698958, 4.491947, 2.65839012, -1.9860927, 0., 0., 0., 0., 0., 0., 0., 0., 1.31699937, 14.63116656, 1.44270567, 0.73447695, 8.23517956, 0.60661888, -15.62188846, -3.58329566, 0., 0., 0., 0., 0., 0., 0., 0., 2.08497639, -4.07249358, 18.66651641, 6.14783777, 1.31717684, -4.4841956, -6.52985553, -0.29682908, 0., 0., 0., 0., 0., 0., 0., 0., 0.56237744, -2.9659237, 4.03724045, -6.57606811, -1.83133599, -6.22652985, 8.16616579, -1.71254919, 0., 0., 0., 0., 0., 0., 0., 0., 3.01241227, 10.37083895, -6.15325731, 0.39043997, 4.13404327, 3.69649448, 14.38453427, 5.79109786, 0., 0., 0., 0., 0., 0., 0., 0., 2.43877928, -1.85458057, -3.91390894, -14.46249078, -0.23694897, -2.71156414, -5.39709705, 4.75065548, 0., 0., 0., 0., 0., 0., 0., 0., -0.93115297, 1.27093017, 7.6771542, 0.30356486, 3.53618669, 2.93790454, -5.85610376, 0.64275865, 0., 0., 0., 0., 0., 0., 0., 0., 4.84311752, -4.43624068, -10.39836637, 7.86485313, -4.15228461, -1.52662407, -6.82905877, 1.85316356, 0., 0., 0., 0.};

  element_t bias_raw[] = {1.324, 3.829, 2.112, 0.003, 0.28464628};

  auto& ms = MinervaSystem::Instance();
  Scale input_size{7, 6, 3, 2};
  Scale weight_size{5, 3, 3, 5};
  Scale correct_size{4, 4, 5, 2};
  Scale bias_size{5};
  shared_ptr<element_t> input_ptr(new element_t[input_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> bias_ptr(new element_t[bias_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), input_raw, input_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));
  memcpy(bias_ptr.get(), bias_raw, bias_size.Prod() * sizeof(element_t));

  ms.SetDevice(cpu_device);
  ImageBatch input = NArray::MakeNArray(input_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  NArray bias = NArray::MakeNArray(bias_size, bias_ptr);
  ConvInfo conv_info(3, 2, 3, 2);
  ms.SetDevice(gpu_device);
  ImageBatch output = Convolution::ConvForward(input, weight, bias, conv_info);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i] + bias_raw[(i / 16) % 5], 0.001);
  }
}

TEST(ConvForward, DISABLED_GpuWithPadding) {
  element_t input_raw[] = {5.25103347e-02, 1.92732021e-01, -8.96084910e-01, 7.90179056e-01, 4.56532361e-01, 6.36700023e-01, 4.45505669e-04, -6.37884921e-02, -8.12535948e-02, 4.19019560e-01, -6.43893988e-01, 6.28997687e-02, -6.64515542e-01, 5.37627837e-01, -2.45310092e-01, 6.97202824e-01, 8.22194457e-01, -2.32302558e-01, -3.69008193e-01, 1.36788306e-01, -6.24363930e-01, 9.46459963e-01, 2.68108754e-01, 7.76843450e-01, -9.17048249e-03, -2.96766940e-01, 4.28460737e-01, 7.85823290e-03, 8.30187347e-01, 8.90743668e-01, 6.64644593e-02, -4.95014811e-01, 4.41724116e-01, -2.65122472e-01, -2.70311418e-03, 5.37470894e-01, 5.63674207e-01, 7.04818966e-01, 8.99811480e-01, -7.85354176e-01, 8.21450712e-01, -3.27889676e-01, 5.59052417e-01, -1.98597912e-01, 5.89058463e-01, 7.86248621e-01, -4.75020618e-01, 9.78394015e-01, 7.06614198e-01, 9.11532892e-01, -9.99785487e-01, -9.66917916e-01, -3.71859885e-01, 9.90632349e-01, -7.02311554e-01, -6.65245763e-01, -9.79623568e-01, 5.49647726e-01, 5.88402017e-01, -7.00861097e-01, -9.52592736e-01, 5.24127542e-01, -5.52659640e-01, 6.93885994e-01, -2.43800926e-01, -1.35069767e-01, 6.65238353e-01, -2.57736129e-01, -9.18893456e-01, 1.09342972e-01, -6.13706128e-02, 1.25286858e-01, 3.22398678e-01, -7.55162650e-02, 2.47273891e-01, -5.56238738e-01, 4.65726234e-01, -6.95721875e-01, 5.42747408e-01, -4.89176535e-01, -7.44913190e-01, 3.30334307e-01, -1.74390103e-01, 3.35535533e-01, -6.26250490e-01, -4.07823970e-01, 5.97030118e-01, -4.10443414e-01, 3.94243187e-01, -4.54081542e-01, 8.25056903e-01, -2.81417189e-01, 3.64354606e-01, 8.42783940e-01, -7.10151312e-01, -8.00251230e-01, -1.76794447e-01, 9.50250742e-01, -3.67423692e-01, 2.20271553e-01, -5.97610574e-01, 3.83795433e-01, -5.10746058e-01, 3.60743392e-01, -2.81245422e-02, 6.82296085e-01, -6.07151251e-01, -3.38833141e-01, 8.93259770e-01, 1.21436991e-02, -1.93168283e-01, -9.45876923e-01, -3.31218962e-01, -8.64580115e-01, -9.92351503e-01, -9.18064393e-01, -3.02090269e-01, -8.16091378e-01, 4.06314529e-02, 5.24922383e-02, -1.20153861e-01, 3.23110491e-01, -7.30429651e-01, 5.75698010e-01, -7.24044598e-01, 2.65846595e-01, 5.78064850e-01, 3.24041516e-01, 4.23024858e-01, 7.75847324e-01, -7.16649418e-01, -7.04859753e-01, -3.48138314e-01, 2.32015221e-01, 9.16999718e-01, -4.17894767e-01, 3.73356925e-01, -9.15543539e-01, -8.74992737e-01, 6.28797391e-01, 6.70704305e-01, -6.64622476e-02, -1.57428024e-01, 1.41703106e-01, 4.78111913e-01, -8.89833183e-01, 2.48361298e-01, 1.71500734e-01, -1.03241151e-01, -2.92539465e-01, 8.67050469e-01, -4.65488136e-01, -4.37401239e-01, 9.81192729e-03, 1.76624177e-01, 4.63404565e-01, -6.48977854e-01, 2.10775692e-02, 5.69191679e-04, 7.85535264e-01, -2.34634585e-01, 8.96057273e-01, -3.05549564e-01, 3.67786398e-01, 6.49269763e-01, -2.74940115e-02, 9.68351743e-01, 2.07628076e-01, 1.85028318e-01, -3.49798716e-01, 8.73610682e-01, -8.08034049e-01, 7.66591492e-01, 1.36035466e-01, -8.76153051e-01, -9.42090961e-01, 2.54198007e-01, 2.09278522e-01, -8.43584950e-01, 5.45907125e-01, -7.13366751e-01, -7.26307843e-02, 4.97412749e-01, 7.79227666e-01, -2.41219689e-01, -4.15127476e-01, 1.85804799e-02, 6.56272008e-02, -7.89156759e-01, 5.95946891e-01, -5.11510156e-01, 6.07075484e-01, -4.03649869e-01, -6.54580737e-02, 8.65639316e-01, 8.19513569e-01, 2.93617672e-01, -3.35847054e-01, -7.71555326e-01, 1.42208982e-01, -3.96017041e-01, -6.12988788e-01, 1.29411384e-01, -1.88205315e-01, 3.31118167e-01, -6.05975908e-01, -5.16439080e-01, 2.46344907e-01, 5.97476702e-01, 8.92727341e-02, 8.77082477e-01, 4.78201578e-01, -9.46106323e-01, -2.35208227e-01, -9.78947208e-01, -8.69535860e-01, 3.62785391e-01, 7.88573716e-01, 4.13573947e-01, -4.22013528e-02, -5.68775015e-01, -8.36467872e-01, 3.46404408e-01, 9.89558378e-01, 8.96711938e-02, 9.67284551e-01, 4.71404282e-01, -8.13833601e-01, -4.15551966e-01, -4.53903666e-01, -8.57667173e-01, -5.76563967e-01, -4.14422920e-01, -2.87165417e-01, 9.12734981e-01, 3.20487724e-01, 9.01024809e-01, -8.06264818e-01, -4.12511687e-01, 2.99419879e-01, -1.58010723e-01, -8.50696651e-01, 4.77613710e-01, 1.70740085e-01, -3.10658805e-01, -4.22856328e-01, -4.71636816e-01, -4.46162130e-01, 6.84712020e-01, -6.60755426e-01, -4.95826747e-01, 1.83750401e-01};

  element_t weight_raw[] = {4.69434058e-01, -1.38583424e+00, -1.19454332e+00, 7.51993600e-01, 1.67906442e+00, -4.73379739e-01, 9.41878306e-01, -4.58280482e-01, -8.89644787e-01, 7.47770021e-01, 1.86899005e+00, -3.76912984e-02, -2.68109599e+00, -1.01194085e-01, 2.78046317e-02, -3.78493153e-01, -7.43905667e-01, 1.66726823e+00, -2.39953374e+00, -2.90112339e+00, 1.69425602e+00, 2.11895221e+00, -1.65778947e+00, 7.61535409e-01, -2.61197826e+00, -1.56647519e+00, -2.41361783e-01, 9.76095418e-01, -1.69379028e+00, -1.80317946e-01, 2.86974591e+00, 7.83224328e-02, -1.79212071e-01, 9.96846111e-01, 1.27322826e-01, -1.45638535e+00, 1.94500748e+00, -2.22728921e+00, -1.96833731e+00, -1.95052845e+00, -7.08356663e-01, -2.39044050e+00, -6.61220349e-01, 1.85948655e+00, -8.77489231e-01, 2.25910682e+00, 2.75299436e+00, 2.03237053e+00, -2.30972770e+00, 3.74469986e-01, -2.34937194e+00, 2.25521054e+00, -8.99953121e-01, 2.38629051e+00, -2.25493565e+00, 8.27170971e-01, 2.23515090e+00, -2.99360661e+00, -1.17168090e+00, -2.82705197e+00, 2.98377018e-01, -1.94885169e+00, 5.40153173e-01, -2.96927632e+00, -1.30786336e+00, 1.55878752e+00, 2.23167008e+00, 3.25273789e-02, -9.75319840e-02, -2.71345071e+00, 1.50482951e+00, 1.98800589e+00, 2.19620308e+00, 1.96069188e+00, -2.51859384e-03, -2.94740383e+00, -9.52835533e-01, 1.44073713e+00, 2.46472884e+00, -1.23625174e+00, -1.87975626e+00, 2.30530176e+00, -6.95593244e-01, 7.01437086e-01, 5.81853703e-01, -1.06019632e+00, 8.40219457e-01, -3.08456307e-01, 1.19075977e+00, -2.02837369e+00, -1.82785135e+00, -1.03247982e-01, 3.75951276e-04, 1.60856600e+00, -1.84283918e+00, 2.95301614e+00, -1.04820246e+00, 2.07600281e+00, 1.90885268e+00, 2.43943187e+00, 1.43667562e+00, -1.10003648e+00, -2.83465135e+00, 3.78231860e-01, 2.74004219e+00, -2.06394886e+00, 1.54640811e+00, -2.75194253e+00, -1.83270810e+00, 1.21537604e-01, -2.10613421e-01, 1.73705801e+00, -2.23164924e+00, 2.35449197e+00, -1.94164743e+00, -3.90715826e-01, -2.10387976e+00, 1.13258744e+00, 1.88402160e+00, -1.84470203e+00, 4.68833930e-01, 1.32519944e+00, -1.49205079e-01, -1.42829315e+00, 1.40477660e+00, -9.04758285e-01, 1.02878655e+00, -2.66964987e+00, 2.38227291e+00, 1.29870916e-01, -1.34866170e+00, 2.06100418e+00, -3.45158807e-01, 1.01549933e+00, 2.95588019e+00, 2.11601428e+00, 2.60128869e+00, 2.17276736e+00, -2.59770354e+00, -1.24910999e+00, -1.82202496e+00, -5.33936144e-01, -4.84902078e-01, 2.74960541e+00, 2.54449228e+00, 2.90201444e+00, -7.12005966e-01, 2.78452402e+00, 5.41890668e-01, 6.39412589e-03, -1.30741768e+00, -2.02580336e+00, -3.07274893e-01, -9.16216399e-01, 1.43133925e-01, 2.62978313e-01, -2.93526489e+00, -1.22066322e+00, -1.99031596e+00, 2.75104991e+00, -1.58140965e+00, 1.99593194e+00, 1.24653142e+00, 3.63953174e-01, 1.20670807e+00, -1.72797444e+00, 1.14623773e+00, 7.29634814e-01, 1.30469585e+00, -2.08381639e+00, -2.43447976e+00, 2.70710670e+00, -5.76311983e-01, 8.60548537e-01, 2.76294937e+00, 2.02390457e+00, -2.21619757e+00, 5.84615982e-03, -1.90966590e+00, -2.69773939e+00, 2.37040542e+00, -1.40377827e+00, -2.67741849e+00, -3.91919585e-03, 1.68066674e+00, 3.41687874e-01, -2.18967901e+00, -6.68539573e-01, -1.45396104e+00, 1.63947625e-01, 2.41602503e+00, 2.11868255e+00, 2.02093959e+00, -1.70472896e+00, -2.19870107e+00, -2.27854787e+00, 2.24774629e+00, -2.51982957e+00, -6.63516277e-01, -1.90908765e+00, -5.33080226e-01, 2.00029937e+00, 2.87068895e+00, -2.97450387e+00, 3.59138519e-01, 1.51067887e+00, -6.59731115e-01, -1.14836880e+00, 1.78586722e+00, 1.33662466e+00, 1.80534568e+00, 2.83009647e+00, 2.26499936e+00, 6.41048319e-01, -1.35574472e+00, 1.12644441e-01, 4.13352887e-01, 2.71106637e+00, -3.33341733e-01, 2.67315433e+00, 4.36720777e-01, 2.50423523e+00, -6.96118478e-01, -2.71824102e+00, 2.16307105e+00};

  element_t correct_raw[] = {0., 0., 0., 0., -10.77531046, 2.46662046, -8.15783683, -3.39263197, 1.37159808, -2.94898676, 8.88649318, 1.73765018, 0., 0., 0., 0., 0., 0., 0., 0., -2.02258181, 2.51361957, -5.4055992, -7.1166395, 2.7661521, -9.20120725, -5.21644148, -8.91871525, 0., 0., 0., 0., 0., 0., 0., 0., -3.44745653, -6.40158273, -3.71314271, 0.3923351, 3.02698958, 4.491947, 2.65839012, -1.9860927, 0., 0., 0., 0., 0., 0., 0., 0., 1.31699937, 14.63116656, 1.44270567, 0.73447695, 8.23517956, 0.60661888, -15.62188846, -3.58329566, 0., 0., 0., 0., 0., 0., 0., 0., 2.08497639, -4.07249358, 18.66651641, 6.14783777, 1.31717684, -4.4841956, -6.52985553, -0.29682908, 0., 0., 0., 0., 0., 0., 0., 0., 0.56237744, -2.9659237, 4.03724045, -6.57606811, -1.83133599, -6.22652985, 8.16616579, -1.71254919, 0., 0., 0., 0., 0., 0., 0., 0., 3.01241227, 10.37083895, -6.15325731, 0.39043997, 4.13404327, 3.69649448, 14.38453427, 5.79109786, 0., 0., 0., 0., 0., 0., 0., 0., 2.43877928, -1.85458057, -3.91390894, -14.46249078, -0.23694897, -2.71156414, -5.39709705, 4.75065548, 0., 0., 0., 0., 0., 0., 0., 0., -0.93115297, 1.27093017, 7.6771542, 0.30356486, 3.53618669, 2.93790454, -5.85610376, 0.64275865, 0., 0., 0., 0., 0., 0., 0., 0., 4.84311752, -4.43624068, -10.39836637, 7.86485313, -4.15228461, -1.52662407, -6.82905877, 1.85316356, 0., 0., 0., 0.};

  element_t bias_raw[] = {1.324, 3.829, 2.112, 0.003, 0.28464628};

  auto& ms = MinervaSystem::Instance();
  Scale input_size{7, 6, 3, 2};
  Scale weight_size{5, 3, 3, 5};
  Scale correct_size{4, 4, 5, 2};
  Scale bias_size{5};
  shared_ptr<element_t> input_ptr(new element_t[input_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> bias_ptr(new element_t[bias_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), input_raw, input_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));
  memcpy(bias_ptr.get(), bias_raw, bias_size.Prod() * sizeof(element_t));

  ms.SetDevice(cpu_device);
  ImageBatch input = NArray::MakeNArray(input_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  NArray bias = NArray::MakeNArray(bias_size, bias_ptr);
  ConvInfo conv_info(3, 2, 3, 2);
  ms.SetDevice(gpu_device);
  ImageBatch output = Convolution::ConvForward(input, weight, bias, conv_info);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i] + bias_raw[(i / 16) % 5], 0.001);
  }
}
#endif

TEST(ConvBackwardData, CpuWithoutPaddingSmall) {
  element_t top_diff_raw[] = {8,6,4,2};
  element_t weight_raw[] = {1,2,3,4};
  element_t correct_raw[] = {32,48,18,32,40,12,8,8,2};
  Scale top_size{2, 2, 1, 1};
  Scale weight_size{2, 2, 1, 1};
  Scale correct_size{3, 3, 1, 1};
  auto& ms = MinervaSystem::Instance();
  shared_ptr<element_t> input_ptr(new element_t[top_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), top_diff_raw, top_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));
  ms.SetDevice(cpu_device);
  ImageBatch input = NArray::MakeNArray(top_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  NArray bottom = NArray::Zeros(correct_size);
  ConvInfo conv_info(0, 0, 1, 1);
  ImageBatch output = Convolution::ConvBackwardData(input, bottom, weight, conv_info);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
  }
}


TEST(ConvBackwardData, CpuWithoutPaddingLargeTime) {
  std::cout << "Entry\n";
  Scale top_size{246, 246, 2, 10};
  Scale weight_size{11, 11, 3, 2};
  Scale correct_size{256, 256, 3, 10};
  std::cout << "Scales done\n";
  auto& ms = MinervaSystem::Instance();
  ms.SetDevice(cpu_device);
  std::cout << "Device selected\n";
  element_t top_diff_raw[top_size.Prod()] ;
  element_t weight_raw[weight_size.Prod()];
  //element_t correct_raw[correct_size.Prod()];
  shared_ptr<element_t> input_ptr(new element_t[top_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> correct_ptr(new element_t[correct_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  for(int i  = 0; i <top_size.Prod(); i++){
	  top_diff_raw[i] = rand();
  }
  for(int i  = 0; i <weight_size.Prod(); i++){
	  weight_raw[i] = rand();
  }
  for(int i  = 0; i <correct_size.Prod(); i++){
	  correct_ptr.get()[i] = rand();
  }
  std::cout << "Array inits done\n";
  memcpy(input_ptr.get(), top_diff_raw, top_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));
  //memcpy(correct_ptr.get(), correct_raw, correct_size.Prod() * sizeof(element_t));
  std::cout << "Memcopies done\n";
  ImageBatch top = NArray::MakeNArray(top_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  NArray bottom = NArray::MakeNArray(correct_size, correct_ptr);
  ConvInfo conv_info(0, 0, 1, 1);

  std::cout << "Beginning computation\n";
  double start = get_wall_time();
  ImageBatch output = Convolution::ConvBackwardData(top, bottom, weight, conv_info);
  ms.WaitForAll();
  std::cout << "ConvBackwardData Time: " << (get_wall_time() - start) << "\n";
}

TEST(ConvBackwardBias, CpuWithoutPaddingSmall) {
  element_t top_diff_raw[] = {8,6,4,2};
  element_t weight_raw[] = {1,2,3,4};
  element_t correct_raw[] = {20};
  Scale top_size{2, 2, 1, 1};
  Scale weight_size{2, 2, 1, 1};
  Scale correct_size{1, 1, 1, 1};
  auto& ms = MinervaSystem::Instance();
  shared_ptr<element_t> input_ptr(new element_t[top_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), top_diff_raw, top_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));
  ms.SetDevice(cpu_device);
  ImageBatch input = NArray::MakeNArray(top_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  ConvInfo conv_info(0, 0, 1, 1);
  NArray output = Convolution::ConvBackwardBias(input);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
  }
}

TEST(ConvBackwardFilter, CpuWithoutPaddingSmall) {
  element_t top_diff_raw[] = {8,6,4,2};
  element_t weight_raw[] = {1,2,3,4};
  element_t bottom_raw[] = {10,11,12,13,14,15,16,17,18};
  element_t correct_raw[] = {306,286,246,226};
  Scale top_size{2, 2, 1, 1};
  Scale weight_size{2, 2, 1, 1};
  Scale bottom_size{3, 3, 1, 1};
  Scale correct_size{2, 2, 1, 1};
  auto& ms = MinervaSystem::Instance();
  shared_ptr<element_t> input_ptr(new element_t[top_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> bottom_ptr(new element_t[bottom_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), top_diff_raw, top_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));
  memcpy(bottom_ptr.get(), bottom_raw, bottom_size.Prod() * sizeof(element_t));
  ms.SetDevice(cpu_device);
  ImageBatch input = NArray::MakeNArray(top_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  ImageBatch bottom = NArray::MakeNArray(bottom_size, bottom_ptr);

  ConvInfo conv_info(0, 0, 1, 1);
  ImageBatch output = Convolution::ConvBackwardFilter(input, bottom, weight, conv_info);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
  }
}

TEST(ConvBackwardData, CpuWithoutPaddingSmallDepth2) {
  element_t input_raw[] = {1,2,3,4,5,6,7,8};
  element_t weight_raw[] = {11,12,13,14,15,16,17,18};
  element_t correct_raw[] = {14.000000,41.000000,26.000000,54.000000,130.000000,74.000000,36.000000,81.000000,44.000000,18.000000,53.000000,34.000000,70.000000,170.000000,98.000000,48.000000,109.000000,60.000000};
  auto& ms = MinervaSystem::Instance();
  Scale input_size{2, 2, 1, 1};
  Scale weight_size{2, 2, 2, 1};
  Scale correct_size{3, 3, 2, 1};
  shared_ptr<element_t> input_ptr(new element_t[input_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), input_raw, input_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));

  ms.SetDevice(cpu_device);
  ImageBatch top = NArray::MakeNArray(input_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  NArray bottom = NArray::Zeros(correct_size);
  ConvInfo conv_info(0, 0, 1, 1);
  ImageBatch output = Convolution::ConvBackwardData(top, bottom, weight, conv_info);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
	//printf("%f,",output_ptr.get()[i]);
  }
}


TEST(ConvBackwardData, CpuWithPaddingSmall) {
  element_t input_raw[] = {1,2,3,4,5,6,7,8,9};
  element_t weight_raw[] = {10,2,3,5};
  element_t correct_raw[] = {25.000000,15.000000,10.000000,50.000000};
  auto& ms = MinervaSystem::Instance();
  Scale input_size{3, 3, 1, 1};
  Scale weight_size{2, 2, 1, 1};
  Scale correct_size{2, 2, 1, 1};
  shared_ptr<element_t> input_ptr(new element_t[input_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), input_raw, input_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));

  ms.SetDevice(cpu_device);
  ImageBatch top = NArray::MakeNArray(input_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  NArray bottom = NArray::Zeros(correct_size);
  ConvInfo conv_info(2, 2, 2, 2);
  ImageBatch output = Convolution::ConvBackwardData(top, bottom, weight, conv_info);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
	//printf("%f,",output_ptr.get()[i]);
  }
}


TEST(ConvBackwardData, CpuWithoutPaddingFrac) {
  element_t input_raw[] = {8.59232186e-01, -3.67248891e-01, -6.32162377e-01, -5.90879443e-01, 1.35450058e-01, 1.91089406e-01, 9.29029039e-01, 3.06354194e-01, 4.97813275e-01, 3.07139742e-01, 4.95429619e-01, 9.22613472e-01, -9.83223404e-01, -7.87111247e-01, -4.02592572e-01, 3.12822366e-01, 6.19625105e-01, 7.44351827e-01, 9.29295195e-01, 4.47370694e-01, 2.84950656e-01, 4.34907242e-01, -6.48019856e-02, -3.48830645e-01, -1.20710788e-01, 4.59378165e-01, 9.88029172e-01, 3.53747424e-01, 5.81645036e-01, -6.58171484e-01, -9.46301448e-01, 6.00740488e-01, 8.07445076e-01, -9.50647579e-01, -1.65053631e-02, 5.25103347e-02, 1.92732021e-01, -8.96084910e-01, 7.90179056e-01, 4.56532361e-01, 6.36700023e-01, 4.45505669e-04, 6.20378818e-01, -8.08062949e-01, -5.62099913e-01, -4.82561877e-01, -6.37884921e-02, -8.12535948e-02, 4.19019560e-01, -6.43893988e-01, 6.28997687e-02, -6.64515542e-01, 5.37627837e-01, 8.56341098e-01, 2.18987316e-01, -6.99633011e-01, -2.07465926e-02, -2.45310092e-01, 6.97202824e-01, 8.22194457e-01, -2.32302558e-01, -3.69008193e-01, 1.36788306e-01, -6.24363930e-01, -7.48316912e-01, 3.75191610e-01, 5.99213436e-01, 1.47073130e-01, 9.46459963e-01, 2.68108754e-01, 7.76843450e-01, -9.17048249e-03, -2.96766940e-01, 4.28460737e-01, 7.85823290e-03, -5.48724787e-01, -5.10051120e-01, 5.85601400e-01, -9.65517098e-03, 8.30187347e-01, 8.90743668e-01, 6.64644593e-02, -4.95014811e-01, 4.41724116e-01, -2.65122472e-01, -2.70311418e-03, -5.46849905e-01, -2.92868707e-01, 3.01703573e-01, -3.74134209e-01, 5.37470894e-01, 5.63674207e-01, 7.04818966e-01, 8.99811480e-01, -7.85354176e-01, 8.21450712e-01, -3.27889676e-01, 6.52760854e-01, 7.96201270e-01, -9.14569391e-01, -6.08410002e-01, -4.10997356e-01, 2.53999761e-01, -8.27553790e-01, -7.14109960e-01, 3.16530385e-02, 3.78682659e-01, 7.13251622e-01, 2.94723367e-01, 1.63237351e-01, 4.22231910e-01, -4.95166286e-01, 8.00319367e-01, -1.15412614e-01, -9.58958351e-01, 9.19322028e-01, 3.04450845e-01, 2.64125002e-02, 3.64712766e-01, -2.09192187e-02, 8.52980343e-01, 3.17595443e-02, -8.55680237e-01, 1.35016596e-01, 2.30486367e-01, 8.83092589e-01, -1.69273291e-01, -4.71120051e-01, -8.05213669e-01, -2.83115562e-02, -7.06742743e-02, -9.40481366e-01, 3.88554924e-01, 4.33894225e-01, 4.59622847e-01, -1.71297966e-01, -9.69802310e-01, 8.17950315e-01, 5.78757436e-01, -6.69601662e-01, -3.74428077e-01, 2.21890612e-01, -2.71019427e-01, -6.87922822e-01, -6.45392373e-01, 7.35779342e-01, -4.19810663e-01, 1.70359243e-01, -9.20102482e-02, -1.77643736e-01, 7.65268890e-01, 3.85416030e-01, -4.41453290e-01, -8.71119538e-01, -6.02752772e-01, 8.63365489e-01, 7.08827136e-01, 9.09469469e-01, -8.95493304e-01, 1.58943361e-01, -3.90074667e-02, -9.56582042e-01, -2.52759073e-01, -1.71816398e-01, 2.07814468e-01, 3.43497455e-01, 6.77731401e-01, 5.59052417e-01, -1.98597912e-01, 5.89058463e-01, 7.86248621e-01, -4.75020618e-01, 9.78394015e-01, 7.06614198e-01, 4.62954312e-01, -2.88868751e-01, 7.66578981e-01, 7.35918182e-01, 9.11532892e-01, -9.99785487e-01, -9.66917916e-01, -3.71859885e-01, 9.90632349e-01, -7.02311554e-01, -6.65245763e-01, 5.17144074e-01, -8.60940668e-01, 4.10946877e-01, -6.16694364e-02, -9.79623568e-01, 5.49647726e-01, 5.88402017e-01, -7.00861097e-01, -9.52592736e-01, 5.24127542e-01, -5.52659640e-01, -4.75651204e-01, -8.62609944e-02, -5.00146163e-01, 1.36567123e-01, 6.93885994e-01, -2.43800926e-01, -1.35069767e-01, 6.65238353e-01, -2.57736129e-01, -9.18893456e-01, 1.09342972e-01, -9.75075144e-02, 4.50601953e-01, -2.43098955e-01, 6.81324991e-01, -6.13706128e-02, 1.25286858e-01, 3.22398678e-01, -7.55162650e-02, 2.47273891e-01, -5.56238738e-01, 4.65726234e-01, -2.36635823e-01, -6.10330916e-01, -4.57674450e-01, -5.01549896e-01, -6.95721875e-01, 5.42747408e-01, -4.89176535e-01, -7.44913190e-01, 3.30334307e-01, -1.74390103e-01, 3.35535533e-01, 3.19627034e-01, -3.89244656e-01, -5.97551518e-01, -5.55945747e-01, -7.60058273e-01, -9.25709118e-01, -9.31736833e-01, -5.39006904e-01, -5.43292587e-01, 2.49821244e-01, 7.85122371e-01, 5.59456032e-01, 4.42902537e-01, -3.79115682e-01, -2.73833167e-01, -6.07836432e-01, 8.70983596e-01, 1.23468000e-01, 6.34583074e-01, -3.02172038e-01, 5.99428526e-01, -7.91791075e-01, 4.24240330e-01, 8.34896992e-01, 6.07170737e-01, -3.45773707e-01, -4.89785641e-01, -9.99565129e-03, -1.72778091e-01, -1.50125809e-01, -8.51243390e-01, 2.06781303e-01, 4.94399467e-01, 5.95152453e-01, -2.36998955e-01, 5.94316306e-01, -5.64052608e-02, 4.42798342e-01, -6.21574621e-01, -1.30808581e-01, 6.46936218e-01, 6.52545256e-01, -6.20949033e-01, -9.59795660e-01, 4.06982772e-01, -3.05459761e-01, -1.60992368e-01, 5.36177806e-01, 9.25756133e-01, 7.85130614e-01, -7.30115467e-01, 5.95609430e-01, 3.64181215e-01, 6.01057742e-02, 7.31963310e-01, 5.06496191e-01, -8.13594826e-01, -3.41121136e-01, -1.75274609e-01};

  element_t weight_raw[] = {-2.99421235e+00, 5.85381379e-01, 1.09536925e+00, -8.02315431e-01, -6.21006855e-01, -1.47845127e-01, 4.86479403e-01, -2.17717723e+00, 2.99648504e+00, 4.39632527e-02, -4.15997727e-02, -1.87875147e+00, -1.22347191e+00, 1.79109036e+00, -1.23133024e+00, 1.18272956e+00, -1.36224463e+00, 2.47517071e+00, -1.20876460e+00, 2.33915863e+00, 2.68033376e+00, -1.98652306e+00, -8.44251566e-01, 1.09306382e+00, 2.52835182e+00, -2.13045394e+00, -2.40075369e+00, -5.30383341e-01, 2.85075222e+00, -2.75096075e+00, -1.87851423e+00, 6.52607928e-01, -2.47668771e+00, -1.10227108e+00, 6.60814659e-01, -1.79283172e+00, 1.15138630e+00, -1.53223817e+00, 1.08223018e+00, -8.43736265e-02, -1.43703113e+00, -1.30355808e+00, 2.43270972e+00, -1.34494388e+00, 2.04688826e+00, -1.82145375e+00, -1.01649942e+00, 2.67977931e+00, 3.64310972e-02, -5.79504850e-01, -2.83763077e+00, 7.30642137e-01, -9.15908959e-01, -1.33920463e+00, -2.61567136e+00, -9.93656887e-01, -2.59374035e+00, -2.97705451e+00, -2.75419318e+00, -9.06270806e-01, -2.44827413e+00, 1.21894359e-01, -1.70550112e+00, 2.94999927e+00, -1.39687703e+00, 1.08100832e+00, 1.57476715e-01, -3.60461582e-01, 9.69331474e-01, -2.19128895e+00, 1.72709403e+00, -2.17213379e+00, 7.97539786e-01, -1.71800785e+00, -2.85974811e+00, 7.61603840e-01, 8.52982359e-01, 8.52620021e-01, 2.18772540e+00, -9.76791579e-01, -5.34249680e-01, 6.61912103e-01, 2.64505914e+00, -2.08753638e+00, -1.89565196e+00, -2.07337027e+00, 1.27694596e+00, 2.56789897e+00, -4.63876920e-01, 2.71063582e-01, -1.06566621e+00, -2.03577190e+00, 1.21891215e+00, 1.38149044e+00, 2.76242723e+00, -7.77056575e-01, 1.30019035e+00, 2.91636731e+00, -2.33539465e+00, 1.54937129e+00, -2.05467527e+00, 1.89861153e+00, 3.24639277e-01, 4.90261325e-01, 2.61687350e+00, -3.93913469e-01, -6.52368818e-02, 9.96782801e-01, 7.80924006e-01, -2.21877150e+00, -8.76936173e-01, 8.10740308e-01, 2.51373517e+00, -2.45239968e+00, -2.57350725e+00, -5.17730183e-01, -1.70615298e+00, 1.18191789e-01, 3.51084133e-01, -1.57799016e-01, -1.70476727e+00, -1.56336669e+00, -1.69957048e+00, 9.34142269e-01, 2.07836070e+00, 2.58278636e+00, 1.80183310e+00, 1.08435507e+00, -1.75645825e+00, 1.44995835e+00, 1.18142751e+00, -7.09443154e-01, 2.10071475e+00, 1.68667087e-01, 2.35805441e+00, 1.92335625e+00, -1.62852828e+00, 1.92374382e+00, -2.16863145e+00, -1.05195029e-01, -2.10713666e+00, -3.10235670e-01, 9.95738834e-01, 1.73419455e+00, 9.72124549e-01, 1.26907457e+00, 2.32754197e+00, -2.14994825e+00, -2.11457926e+00, -1.04441494e+00, -2.80875702e+00, 1.12657737e+00, 1.58838027e+00, -8.99943488e-01, 6.96045664e-01, 2.75099915e+00, -1.25368430e+00, 1.12007078e+00, -2.74663062e+00, -2.62497821e+00, 1.88639217e+00, -3.80289825e-01, -6.47589408e-01, -1.01611392e+00, -2.54047030e-01, 2.01211291e+00, -1.99386743e-01, -4.72284073e-01, 4.25109318e-01, 1.43433574e+00, -2.66949955e+00, 7.45083894e-01, 7.26361966e-01, -2.99333681e+00, 6.17361038e-01, -2.75888753e+00, 5.14502201e-01, -3.09723452e-01, -8.77618394e-01, 2.60115141e+00, -1.39646441e+00, -1.31220372e+00, 2.94357819e-02, 8.80836712e-01, 2.82344057e+00, -2.78474712e+00, -4.60800803e-01, 5.29872532e-01, 1.39021370e+00, -1.94693356e+00, 6.32327077e-02, 1.70757504e-03, 2.35660579e+00, -7.03903755e-01, 9.77183021e-01, -2.71913064e+00, 1.50733970e+00, -7.87288246e-01, 2.68817182e+00, -9.16648691e-01, 1.10335919e+00, 1.94780929e+00, -8.24820346e-02, 2.90505523e+00, 6.22884229e-01, 1.55774899e+00, 1.10710017e+00, 2.59449736e+00, 2.69871283e+00, 2.94066677e+00, -2.24306770e+00, 2.85960370e+00, -1.62536606e+00, -1.88366146e+00, 5.52685321e-02, 1.82986096e-01, -1.30416455e+00, -1.13903079e+00, -1.14069374e+00, -1.40166668e+00, 5.60586905e-01, -1.69719377e+00, -5.85702494e-01, -1.26863256e+00, -1.95695511e+00};

  element_t correct_raw[] = {-0.861118,1.789599,-0.192098,-3.772066,-1.171446,3.868326,2.829584,3.519578,-0.401897,-5.756625,-1.167793,-0.123237,-0.333016,3.265663,-5.001259,-2.275627,2.801891,-0.380476,-0.281949,4.949083,6.634080,-4.571546,0.500780,-1.600668,-0.404496,5.583798,-5.585242,-4.355585,-1.292285,-7.720478,-3.375307,6.236872,7.582698,-1.215804,-3.438790,-0.206557,-1.589470,-0.288958,-2.960994,1.152735,2.488571,0.781154,-10.562472,-6.016970,8.332851,5.610995,-0.484588,-2.657443,-1.326799,-3.676986,2.932516,9.909317,-5.958278,1.501262,-10.012947,-0.660992,5.210555,-0.936115,1.438923,-0.467051,0.963350,2.352577,-2.595447,8.636878,-9.480071,0.267073,1.893265,4.650538,-2.989280,-0.938347,8.096261,-3.222964,0.069811,5.035134,-3.906377,-1.377284,-3.995087,1.627737,3.472075,5.245581,-5.183541,3.523603,-3.198893,-3.428192,-1.365123,1.956483,-2.648139,0.160610,5.591084,-0.673095,-1.655756,2.517139,5.317964,0.013097,0.232216,2.801119,-2.120084,3.965877,1.821071,-6.614838,-3.438645,4.562026,-0.998281,3.540547,1.997250,-2.849930,-5.619549,3.067973,-0.662032,0.050074,0.522035,-7.773035,13.852877,-2.032331,-4.413694,-6.226500,10.661108,-0.114805,-3.272382,5.556460,1.901664,0.176667,2.947251,-5.377202,-1.506144,-1.278448,10.884763,-7.307772,-5.229288,-5.934045,-3.221240,2.907982,2.758375,0.275452,1.592174,10.682644,-5.715372,1.198609,1.223449,-9.088083,5.399524,2.799407,2.480285,-2.518843,-1.693017,7.182967,-0.465039,8.277404,8.505639,4.144751,-8.093884,6.216247,6.655358,-5.677887,-5.782744,1.879567,-0.438828,5.258228,-0.172530,3.367729,9.702333,-3.334629,-5.368228,14.157303,5.123936,-4.809422,-0.065427,1.169573,4.672944,0.652245,4.008397,-11.696341,4.254375,-1.993380,0.772764,1.319159,1.332594,-1.101508,4.330271,1.487693,0.931754,-0.624353,5.998052,-3.184272,2.561398,2.162698,0.270218,-3.731274,-3.434558,1.781620,-1.208277,-2.355672,1.372223,-0.789950,0.649611,-2.953192,1.254964,-1.761536,4.236151,-1.784639,0.587066,-3.615817,-0.639442,-0.130348,-0.188041,0.387788,0.271775,6.524864,-2.877292,-4.810179,-9.713173,9.856152,5.190222,-0.340538,-1.207057,2.211226,2.282467,1.953119,1.046353,0.264842,-4.145903,-1.298680,-0.327268,-2.559111,-1.095952,-5.823745,-1.162175,2.726061,-0.692636,2.818845,-1.985480,-1.006485,-2.698162,-4.576430,0.639532,-2.779664,-2.504920,1.355231,-1.818899,-0.281408,4.168027,-2.839602,-3.896165,-6.237121,-3.230048,-4.478722,-0.479600,-4.557238,0.973666,-0.679591,1.946007,-0.320245,2.502236,-1.579053,-0.797051,0.614388,-3.737692,-2.902907,-3.467542,6.114590,-5.227870,-2.225209,0.308376,-1.234281,-2.658274,-3.788059,-0.411144,0.909863,-3.417280,-1.573502,4.443288,9.225067,-8.900447,0.296817,1.078235,0.837979,-2.986850,1.819401,-0.025384,-2.111081,-4.244297,0.309446,2.578097,-0.192216,0.128646,1.607225,1.603738,0.789715,-0.754840,-2.446655,3.198629,-1.275119,3.745399,-0.198952,1.012228,-9.062501,-6.847182,-6.631068,-1.483189,-2.420098,-4.444180,-6.471114,3.582602,2.950396,-2.459838,1.502661,1.438711,1.657287,2.918997,0.300620,-4.136347,-5.409235,-1.076149,-5.828786,-3.489184,-7.949127,-5.715112,5.500435,8.982519,2.711071,2.397807,3.291374,-0.682117,0.141506,0.033661,1.968719,-5.533283,-8.360313,-2.997298,-6.019006,-5.280542,4.562503,4.599768,10.330196,-0.459183,2.434101,-3.230419,1.217832,-2.136445,-6.687827,0.397670,1.276150,1.331867,-3.026968,-9.991388,-1.126211,-0.251184,-0.438882,-5.368198,-2.610491,1.660430,-0.768567,-5.618808,10.221746,7.674420,3.173374,-7.144212,4.364618,-6.513852,-3.489739,0.289451,-4.822148,2.654539,-3.901960,-3.065177,8.452254,-2.051857,6.003841,3.181066,6.028013,-4.086824,1.726675,1.147046,-3.829583,4.033304,1.746458,3.904646,-3.204093,-7.025935,-0.839962,0.550992,-1.446497,-0.046597,0.618169,-2.253153,-1.500938,1.324836,4.491065,2.739680,-0.658420,-4.968413,-2.742040,4.975129,1.480235,1.135472,-0.822700,-1.020366,0.607900,-3.481094,-7.163158,-4.878381,6.076893,4.077508,8.087923,-1.881206,-1.168522,0.356536,1.124289,-3.929127,0.373645,-2.309934,-15.655060,2.386410,-1.398612,-10.073902,1.774315,0.976454,3.380183,-1.519989,0.697923,-4.953779,-2.327959,-2.432772,-8.444665,5.078468,-1.868206,1.919565,-7.012532,3.071378,1.572557,-2.038942,0.609350,-3.625793,-0.926332,-3.209588,8.711662,-2.799956,-10.083397,7.346124,-9.100878,6.573493,-4.772502,-0.289014,0.017972,0.234143,1.716366,-5.708624,10.544999,-2.482754,-2.698241,-3.297389,-3.793433,3.759544,-2.163044,4.525909,2.778516,-1.008667,4.021857,-3.232802,3.224124,3.153430,11.552838,-7.959694,6.890323,-2.685184,2.293809,-1.808752,-3.241399,-0.974729,3.134702,-0.548421,-4.630121,1.525826,-0.038890,-5.427561,6.485326,0.995158,5.747540,-4.061276,3.321931,0.462585,-2.676033,0.692586,-4.428205,2.851727,3.579422,-5.693691,0.729099,-2.582628,-0.825910,0.447025,0.897885,0.640083,-1.283184,4.506027,-3.962641,7.628556,2.681618,-6.559796,-5.716064,-4.969007,7.426347,-1.102540,0.887424,1.105928,-2.940975,-2.665337,4.385749,-2.647065,0.559830,-1.729746,-7.954554,7.148817,-0.570385,-1.605864,-5.134223,-1.500844,1.896406,-4.136714,3.501003,2.793357,-4.793551,1.476191,-4.683261,-9.001178,-4.419949,9.630128,-2.325879,-1.769918,1.325857,-1.278566,1.538962,0.064186,2.870047,-0.965176,6.139172,-3.463282,-0.223263,2.689335,-2.884532,5.077912,1.404000,0.423740,-2.956308,-9.883310,-7.647298,-12.772137,10.669836,4.471886,-3.482169,-2.975618,-0.546047,-1.205117,-2.228755,-0.449468,-4.403217,3.962734,-2.994916,-2.372571,5.404981,6.218055,-2.892836,-7.338696,2.709865,1.370737,-0.543779,-1.181389,0.080095,-3.786092,-4.570521,1.758589,-7.591572,-1.925408,5.990691,0.319304,-0.671545,1.396614,-6.039306,2.723629,-3.564336,-3.683028,3.357243,-5.059089,3.105397,3.563374,-4.927155,-1.282873,-2.852456,-0.128050,2.579039,-3.203791,-1.633974,2.279120,2.540485,0.999827,-6.796712,-6.623774,-3.788263,3.813348,0.445892,-1.610440,-1.969648,-7.470009,8.979786,0.616404,7.188474,-2.532911,-0.269502,0.777244,0.460869,-5.537929,2.351184,1.680754,-6.363465,-0.281577,-1.248063,0.479298,0.924884,-12.434249,6.411742,-2.540554,-0.559595,-2.423559,2.458744,-5.743380,-1.139848,1.546543,-4.681086,4.481580,0.868453,-1.468513,2.693946,-0.424048,-2.166499,-1.582664,5.120764,1.363548,2.962844,2.332685,-12.982770,1.316206,-8.815780,6.926795,-1.996612,3.962878,0.706114,2.195045,-4.021688,-3.110470,-2.619936,-0.335381,-3.220358,-3.792652,-3.902319,3.092144,-5.546946,-0.545349,-1.140458,7.396077,-0.228004,-2.237571,-0.078275,-8.610713,1.325492,-3.892920,-0.678534,1.805630,4.158877,6.248294,-0.909855,-2.667446,-0.493430,-0.663760,2.317325,-3.282732,5.942960,-0.797827,-0.294271,0.677391,2.660363,1.896703,2.660187,-1.567300,-0.584433,-0.539476,3.216395,-0.329729,-3.129022,4.960201,1.944759,0.185053,4.696012,-3.133824,-2.115324,0.151550,-2.786795,1.387276,-0.429266,2.415838,-9.534157,1.231715,2.197715,14.833018,-3.656259,-3.150365,-5.877256,-1.249179,-1.445882,-3.559311,3.032200,2.149899,2.542215,7.641285,1.344760,-0.146722,-0.449808,-0.421924,-7.260665,0.207624,-0.040495,-0.054238,2.136933,-3.003693,3.953950,1.666373,-0.640226,2.979584,4.072708,-2.387727,-8.122070,-2.296925,2.226939,5.151889,3.076842,-1.198240,1.833760,-3.935266,-0.096859,4.766315,3.360656,-3.722329,-2.239634,-8.541346,3.749193,-0.790741,3.890601,0.763397,-4.146721,2.115535,4.469295,5.801566,-5.038229,-7.644842,6.513895,-1.125079,1.318954,2.475580,3.880140,1.922904,1.477416,3.806829,-5.331800,-0.318459,-2.795389,-1.227576,3.300580,-0.091793,-1.169827,0.577405,1.558482,1.410214,-2.293223,-2.817356,-2.196218,-0.894050,1.241790,-2.265645,0.723896,-1.552978,0.766894,2.168101,3.185398,7.244444,0.223601,3.850333,-3.544351,-3.879556,-7.993992,-0.913321,-0.246464,-1.968331,-1.076868,1.445627,-1.251424,10.992624,2.406884,3.083553,-3.976796,11.420601,-3.252425,3.770565,-9.027681,-0.820733,-4.536175,3.340143,2.997738,2.608858,-8.541022,-5.629584,-3.355803,0.963625,-5.206939,-10.688908,1.269209,-0.020354,-0.039742,-3.619257,-3.341744,-12.053204,-9.779691,-8.212052,6.107642,3.622704,9.697240,-4.916384,-2.549187,-5.653267,-0.404472,-3.854570,-1.802257,-2.284639,1.788811,-1.379691,-2.401009,-1.385132,13.066822,4.197006,-0.762217,-11.944082,1.003180,0.723836,-3.987071,7.109487,0.669772,8.847664,-6.473099,-5.048759,-1.923731,-5.661686,-0.898357,-2.515805,4.447938,-1.315907,-1.155657,-2.499074,1.253925,0.533754,4.925126,3.260244,0.244958,1.873359,3.839741,-2.589235,-1.933603,1.482819,-0.094911,2.247850,1.916307,-4.324421,5.398454,-2.683898,-3.803080,-2.539108,-3.321848,-0.840137,1.194703,1.077823,-4.391097,2.413430,-1.027599,-4.359714,-2.977153,-3.810991,3.056397,-5.345336,3.692720,-0.248154,0.121191,2.732118,2.065307,5.985812,-2.841371,4.367061,-11.579490,-4.312026,-9.014544,1.899171,0.534760,-0.869187,-0.670206,1.050324,0.597615,-3.133600,-1.037654,7.605500,-6.777506,2.997478,-9.650144,1.548298,-10.662847,6.504010,0.403664,-0.735089,-3.503188,-3.370574,2.038488,0.536245,-2.663870,-7.014248,2.834171,4.278159,0.257983,1.560945,-4.311639,0.876247,-3.126559,0.010525,12.060719,-6.738288,14.523293,-12.654755,-4.698486,-10.429930,-3.694757,-1.646406,5.424623,-0.989953,-0.467865,-0.315587,-8.657926,-2.971225,-6.292002,-6.728180,10.229908,5.584425,4.843599,-6.052397,1.157480,1.020668,-2.501064,2.888194,-1.489629,3.180426,-4.239866,1.106057,0.634659,-3.122109,2.654816,-1.808122,0.462653};

  auto& ms = MinervaSystem::Instance();
  Scale input_size{8, 6, 3, 2};
  Scale weight_size{5, 3, 5, 3};
  Scale correct_size{12, 8, 5, 2};
  shared_ptr<element_t> input_ptr(new element_t[input_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), input_raw, input_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));

  ms.SetDevice(cpu_device);
  ImageBatch top = NArray::MakeNArray(input_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  NArray bottom = NArray::Zeros(correct_size);
  ConvInfo conv_info(0, 0, 1, 1);
  ImageBatch output = Convolution::ConvBackwardData(top, bottom, weight, conv_info);
  auto output_ptr = output.Get();
  for (int i = 0; i < correct_size.Prod(); ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
	//printf("%f,",output_ptr.get()[i]);
  }
}

TEST(ConvBackwardData, DISABLED_CpuWithPaddingFrac) {
  //TODO(Jesse Lovitt) Redo this.
  element_t input_raw[] = {5.25103347e-02, 1.92732021e-01, -8.96084910e-01, 7.90179056e-01, 4.56532361e-01, 6.36700023e-01, 4.45505669e-04, -6.37884921e-02, -8.12535948e-02, 4.19019560e-01, -6.43893988e-01, 6.28997687e-02, -6.64515542e-01, 5.37627837e-01, -2.45310092e-01, 6.97202824e-01, 8.22194457e-01, -2.32302558e-01, -3.69008193e-01, 1.36788306e-01, -6.24363930e-01, 9.46459963e-01, 2.68108754e-01, 7.76843450e-01, -9.17048249e-03, -2.96766940e-01, 4.28460737e-01, 7.85823290e-03, 8.30187347e-01, 8.90743668e-01, 6.64644593e-02, -4.95014811e-01, 4.41724116e-01, -2.65122472e-01, -2.70311418e-03, 5.37470894e-01, 5.63674207e-01, 7.04818966e-01, 8.99811480e-01, -7.85354176e-01, 8.21450712e-01, -3.27889676e-01, 5.59052417e-01, -1.98597912e-01, 5.89058463e-01, 7.86248621e-01, -4.75020618e-01, 9.78394015e-01, 7.06614198e-01, 9.11532892e-01, -9.99785487e-01, -9.66917916e-01, -3.71859885e-01, 9.90632349e-01, -7.02311554e-01, -6.65245763e-01, -9.79623568e-01, 5.49647726e-01, 5.88402017e-01, -7.00861097e-01, -9.52592736e-01, 5.24127542e-01, -5.52659640e-01, 6.93885994e-01, -2.43800926e-01, -1.35069767e-01, 6.65238353e-01, -2.57736129e-01, -9.18893456e-01, 1.09342972e-01, -6.13706128e-02, 1.25286858e-01, 3.22398678e-01, -7.55162650e-02, 2.47273891e-01, -5.56238738e-01, 4.65726234e-01, -6.95721875e-01, 5.42747408e-01, -4.89176535e-01, -7.44913190e-01, 3.30334307e-01, -1.74390103e-01, 3.35535533e-01, -6.26250490e-01, -4.07823970e-01, 5.97030118e-01, -4.10443414e-01, 3.94243187e-01, -4.54081542e-01, 8.25056903e-01, -2.81417189e-01, 3.64354606e-01, 8.42783940e-01, -7.10151312e-01, -8.00251230e-01, -1.76794447e-01, 9.50250742e-01, -3.67423692e-01, 2.20271553e-01, -5.97610574e-01, 3.83795433e-01, -5.10746058e-01, 3.60743392e-01, -2.81245422e-02, 6.82296085e-01, -6.07151251e-01, -3.38833141e-01, 8.93259770e-01, 1.21436991e-02, -1.93168283e-01, -9.45876923e-01, -3.31218962e-01, -8.64580115e-01, -9.92351503e-01, -9.18064393e-01, -3.02090269e-01, -8.16091378e-01, 4.06314529e-02, 5.24922383e-02, -1.20153861e-01, 3.23110491e-01, -7.30429651e-01, 5.75698010e-01, -7.24044598e-01, 2.65846595e-01, 5.78064850e-01, 3.24041516e-01, 4.23024858e-01, 7.75847324e-01, -7.16649418e-01, -7.04859753e-01, -3.48138314e-01, 2.32015221e-01, 9.16999718e-01, -4.17894767e-01, 3.73356925e-01, -9.15543539e-01, -8.74992737e-01, 6.28797391e-01, 6.70704305e-01, -6.64622476e-02, -1.57428024e-01, 1.41703106e-01, 4.78111913e-01, -8.89833183e-01, 2.48361298e-01, 1.71500734e-01, -1.03241151e-01, -2.92539465e-01, 8.67050469e-01, -4.65488136e-01, -4.37401239e-01, 9.81192729e-03, 1.76624177e-01, 4.63404565e-01, -6.48977854e-01, 2.10775692e-02, 5.69191679e-04, 7.85535264e-01, -2.34634585e-01, 8.96057273e-01, -3.05549564e-01, 3.67786398e-01, 6.49269763e-01, -2.74940115e-02, 9.68351743e-01, 2.07628076e-01, 1.85028318e-01, -3.49798716e-01, 8.73610682e-01, -8.08034049e-01, 7.66591492e-01, 1.36035466e-01, -8.76153051e-01, -9.42090961e-01, 2.54198007e-01, 2.09278522e-01, -8.43584950e-01, 5.45907125e-01, -7.13366751e-01, -7.26307843e-02, 4.97412749e-01, 7.79227666e-01, -2.41219689e-01, -4.15127476e-01, 1.85804799e-02, 6.56272008e-02, -7.89156759e-01, 5.95946891e-01, -5.11510156e-01, 6.07075484e-01, -4.03649869e-01, -6.54580737e-02, 8.65639316e-01, 8.19513569e-01, 2.93617672e-01, -3.35847054e-01, -7.71555326e-01, 1.42208982e-01, -3.96017041e-01, -6.12988788e-01, 1.29411384e-01, -1.88205315e-01, 3.31118167e-01, -6.05975908e-01, -5.16439080e-01, 2.46344907e-01, 5.97476702e-01, 8.92727341e-02, 8.77082477e-01, 4.78201578e-01, -9.46106323e-01, -2.35208227e-01, -9.78947208e-01, -8.69535860e-01, 3.62785391e-01, 7.88573716e-01, 4.13573947e-01, -4.22013528e-02, -5.68775015e-01, -8.36467872e-01, 3.46404408e-01, 9.89558378e-01, 8.96711938e-02, 9.67284551e-01, 4.71404282e-01, -8.13833601e-01, -4.15551966e-01, -4.53903666e-01, -8.57667173e-01, -5.76563967e-01, -4.14422920e-01, -2.87165417e-01, 9.12734981e-01, 3.20487724e-01, 9.01024809e-01, -8.06264818e-01, -4.12511687e-01, 2.99419879e-01, -1.58010723e-01, -8.50696651e-01, 4.77613710e-01, 1.70740085e-01, -3.10658805e-01, -4.22856328e-01, -4.71636816e-01, -4.46162130e-01, 6.84712020e-01, -6.60755426e-01, -4.95826747e-01, 1.83750401e-01};

  element_t weight_raw[] = {4.69434058e-01, -1.38583424e+00, -1.19454332e+00, 7.51993600e-01, 1.67906442e+00, -4.73379739e-01, 9.41878306e-01, -4.58280482e-01, -8.89644787e-01, 7.47770021e-01, 1.86899005e+00, -3.76912984e-02, -2.68109599e+00, -1.01194085e-01, 2.78046317e-02, -3.78493153e-01, -7.43905667e-01, 1.66726823e+00, -2.39953374e+00, -2.90112339e+00, 1.69425602e+00, 2.11895221e+00, -1.65778947e+00, 7.61535409e-01, -2.61197826e+00, -1.56647519e+00, -2.41361783e-01, 9.76095418e-01, -1.69379028e+00, -1.80317946e-01, 2.86974591e+00, 7.83224328e-02, -1.79212071e-01, 9.96846111e-01, 1.27322826e-01, -1.45638535e+00, 1.94500748e+00, -2.22728921e+00, -1.96833731e+00, -1.95052845e+00, -7.08356663e-01, -2.39044050e+00, -6.61220349e-01, 1.85948655e+00, -8.77489231e-01, 2.25910682e+00, 2.75299436e+00, 2.03237053e+00, -2.30972770e+00, 3.74469986e-01, -2.34937194e+00, 2.25521054e+00, -8.99953121e-01, 2.38629051e+00, -2.25493565e+00, 8.27170971e-01, 2.23515090e+00, -2.99360661e+00, -1.17168090e+00, -2.82705197e+00, 2.98377018e-01, -1.94885169e+00, 5.40153173e-01, -2.96927632e+00, -1.30786336e+00, 1.55878752e+00, 2.23167008e+00, 3.25273789e-02, -9.75319840e-02, -2.71345071e+00, 1.50482951e+00, 1.98800589e+00, 2.19620308e+00, 1.96069188e+00, -2.51859384e-03, -2.94740383e+00, -9.52835533e-01, 1.44073713e+00, 2.46472884e+00, -1.23625174e+00, -1.87975626e+00, 2.30530176e+00, -6.95593244e-01, 7.01437086e-01, 5.81853703e-01, -1.06019632e+00, 8.40219457e-01, -3.08456307e-01, 1.19075977e+00, -2.02837369e+00, -1.82785135e+00, -1.03247982e-01, 3.75951276e-04, 1.60856600e+00, -1.84283918e+00, 2.95301614e+00, -1.04820246e+00, 2.07600281e+00, 1.90885268e+00, 2.43943187e+00, 1.43667562e+00, -1.10003648e+00, -2.83465135e+00, 3.78231860e-01, 2.74004219e+00, -2.06394886e+00, 1.54640811e+00, -2.75194253e+00, -1.83270810e+00, 1.21537604e-01, -2.10613421e-01, 1.73705801e+00, -2.23164924e+00, 2.35449197e+00, -1.94164743e+00, -3.90715826e-01, -2.10387976e+00, 1.13258744e+00, 1.88402160e+00, -1.84470203e+00, 4.68833930e-01, 1.32519944e+00, -1.49205079e-01, -1.42829315e+00, 1.40477660e+00, -9.04758285e-01, 1.02878655e+00, -2.66964987e+00, 2.38227291e+00, 1.29870916e-01, -1.34866170e+00, 2.06100418e+00, -3.45158807e-01, 1.01549933e+00, 2.95588019e+00, 2.11601428e+00, 2.60128869e+00, 2.17276736e+00, -2.59770354e+00, -1.24910999e+00, -1.82202496e+00, -5.33936144e-01, -4.84902078e-01, 2.74960541e+00, 2.54449228e+00, 2.90201444e+00, -7.12005966e-01, 2.78452402e+00, 5.41890668e-01, 6.39412589e-03, -1.30741768e+00, -2.02580336e+00, -3.07274893e-01, -9.16216399e-01, 1.43133925e-01, 2.62978313e-01, -2.93526489e+00, -1.22066322e+00, -1.99031596e+00, 2.75104991e+00, -1.58140965e+00, 1.99593194e+00, 1.24653142e+00, 3.63953174e-01, 1.20670807e+00, -1.72797444e+00, 1.14623773e+00, 7.29634814e-01, 1.30469585e+00, -2.08381639e+00, -2.43447976e+00, 2.70710670e+00, -5.76311983e-01, 8.60548537e-01, 2.76294937e+00, 2.02390457e+00, -2.21619757e+00, 5.84615982e-03, -1.90966590e+00, -2.69773939e+00, 2.37040542e+00, -1.40377827e+00, -2.67741849e+00, -3.91919585e-03, 1.68066674e+00, 3.41687874e-01, -2.18967901e+00, -6.68539573e-01, -1.45396104e+00, 1.63947625e-01, 2.41602503e+00, 2.11868255e+00, 2.02093959e+00, -1.70472896e+00, -2.19870107e+00, -2.27854787e+00, 2.24774629e+00, -2.51982957e+00, -6.63516277e-01, -1.90908765e+00, -5.33080226e-01, 2.00029937e+00, 2.87068895e+00, -2.97450387e+00, 3.59138519e-01, 1.51067887e+00, -6.59731115e-01, -1.14836880e+00, 1.78586722e+00, 1.33662466e+00, 1.80534568e+00, 2.83009647e+00, 2.26499936e+00, 6.41048319e-01, -1.35574472e+00, 1.12644441e-01, 4.13352887e-01, 2.71106637e+00, -3.33341733e-01, 2.67315433e+00, 4.36720777e-01, 2.50423523e+00, -6.96118478e-01, -2.71824102e+00, 2.16307105e+00};

  element_t correct_raw[] = {2.004409,-0.843072,3.329746,-0.996785,0.436712,0.217823,-1.541995,-0.823602,0.034842,-1.600653,4.621693,-1.418625,-0.269516,0.098562,1.513131,0.599923,-6.179233,-1.186083,-2.582740,1.683358,2.852424,-0.315925,5.142332,1.535626,-4.562220,0.644670,2.627658,-3.069175,-1.784449,-2.513139,-0.443387,-2.116778,1.162747,5.907422,3.047386,-1.478664,-0.146597,-0.157746,0.096542,-0.327836,-0.883091,-2.494856,1.275135,-0.880550,-1.400759,4.480975,-1.096947,-0.275551,-1.064331,2.118928,0.550107,0.938888,2.689481,-2.084024,0.203350,2.147929,-0.887589,2.836179,-3.762223,-2.284390,4.383195,-1.516443,0.097575,0.502015,-0.250226,-0.482772,3.694916,3.711507,0.679919,-1.000190,-2.743196,-0.932207,-1.945176,0.313547,3.517897,3.413946,-3.225674,-1.994010,-2.131760,1.370746,-1.559478,-1.789551,-1.015474,0.299115,3.593001,2.069727,0.397941,-1.388975,-2.769671,-1.388621,0.846613,-3.360937,1.287237,-1.214936,1.361168,3.160860,0.111793,-2.090322,-1.037955,-1.456465,-1.550581,-1.225884,0.804531,2.548610,0.324135,-3.197999,-1.555014,1.652432,-0.090163,0.552849,1.722764,-3.300266,-1.325707,-1.133390,-1.429248,1.815138,3.600827,-3.892414,-0.999564,-3.213647,-1.637944,0.416153,-2.086247,0.703993,-1.737389,-0.894318,-1.344373,0.010547,-1.516603,1.299025,-1.572996,2.628896,-2.297453,5.807673,-2.867663,5.933298,0.144691,2.436155,-2.637842,3.342784,1.131970,1.111646,0.584168,0.238641,1.349733,-0.043226,2.151483,1.000053,1.893778,1.535746,3.836198,1.237599,-1.058424,-0.934904,3.659289,3.243708,-6.355524,-1.299967,-1.401764,-2.372956,3.596136,1.400858,4.943524,3.934669,-5.041850,1.866133,-3.437076,-1.652139,2.090209,0.940294,-3.509238,-0.006668,1.060803,-8.352139,2.371621,-3.451177,-1.646835,1.487280,-5.070269,4.324033,-1.193210,-5.589361,1.007581,-1.307111,-2.215683,-0.879918,6.574915,0.774505,-1.779837,0.101871,5.262385,-0.832201,-4.002839,-0.756159,3.430188,3.321402,0.557448,0.433192,-1.289912,-3.639426,-0.125824,-1.055666,1.216551,2.909121,1.546517,-4.500172,-0.506837,2.225830,-1.286929,1.282084,-4.919023,2.732526,2.428495,-1.676842,0.523264,-1.257512,-2.551074,0.249044,-1.336449,-0.837597,0.805238,-4.172040,-0.638953,1.617395,-2.129019,0.451572,-1.426617,3.428720,-0.628135,-2.396891,0.772950,6.143318,0.830124,-2.694867,-0.117534,-1.890719,2.248334,0.829206,-1.445244,-0.726678,-4.671627,-2.327226,1.145011,-0.376156,5.990921,3.169857,-2.690088,-3.494296,2.341530,-1.903895,-0.777778,3.954208,2.901969,2.803606,0.993884,-4.170205,-1.919776,-6.167260,0.748878,-0.758231,3.012752,-1.821299,-4.100361,-3.393620,-0.619484,1.305181,2.485685,1.275386,-2.389160,-2.496936,2.882249,-1.522330,1.174219,3.497456,0.790895,1.998766,3.467693,-1.460932,4.391640,-0.510993,2.159391,-0.737385,2.088003,1.532071,2.587631,-3.358090,-5.722562,1.100285,-0.815586,-0.772333,3.687131,-4.194665,3.288239,-2.906620,-1.790751,-2.106956,3.224548,-1.266068,0.842904,0.129038,-4.054751,2.505550,-2.602180,3.803048,-1.351664,-1.502579,-1.732590,5.922730,-2.023726,-2.069938,0.127871,2.552568,1.620340,-5.017340,-1.770195,0.590361,4.471902,2.130941,0.563479,4.164499,0.616162,-6.187449,-4.412267,0.817947,1.129438,0.455446,-0.648280,3.171599,-7.019291,2.976037,-1.285631,0.442778,3.028845,1.588399,3.506876,2.990698,-6.131496,0.707161,-1.263081,3.549543,0.411170,0.122560,1.702616,-2.603082,7.019444,-1.378286,-3.825585,3.285629,0.348790,0.861483,-1.686380,-3.799882,3.825439,-0.217435,1.299857,-0.608541,-6.876150,1.083326,1.232786,-2.381492,2.430978,2.261024,-2.819659,0.299954,0.587167,-1.772708,-5.332870,2.464445,-1.923880,2.178893,2.784969,-3.283590,2.680928,-0.813761,1.134323,0.355200,2.456441,4.249353,-1.331533,-2.608520,0.338948,1.752215,2.864618,-0.349895,-0.260794,6.432142,-1.610654,-2.930209,0.705404,1.873966,3.088369,-1.202493,-0.661035,0.353343,-6.096087,-2.577202,1.957746,-0.543242,3.577410,0.672180,0.496942,2.332850,-2.204092,-4.261812,1.333201,-2.247141,0.072983,-2.876205,2.303862,-2.198768,-0.858588,2.323280,-3.777531,1.333414,1.277412,-0.125638,-4.921857,0.905826,4.662777,1.519554,2.554040,-0.904212,-2.564436,-0.049451,1.066220,1.673074,1.102829,-1.305114,4.898430,-0.399599,0.809099,-2.029834,-1.801943,-1.860824,-2.437342,-4.363709,1.199325,0.592640,-2.365926,-4.189416,0.878127,-0.955188,-3.613106,2.032148,-3.913174,5.914388,-0.861508,4.993614,-0.010186,1.068252,0.552781,2.348922,0.686461,1.347887,-0.836057,-0.417511,1.096785,1.914232,0.956470,0.390858,1.545351,-0.493801,1.121543,-4.864651,1.599386,3.929014,-0.591720,-2.937208,-2.039028,1.652367,-4.453529,-2.450314,-0.284939,-2.503682,7.475988,-2.233951,-1.148784,2.459910,-2.274349,-2.424586,-2.340636,-2.999696,-3.428433,2.495554,-4.293416,6.673437,1.326003,-1.325872,1.635208,-1.427027,-3.172690,0.390537,-5.703178,6.310870,-1.687011,1.773704,-2.819943,-0.875609,-2.018051,4.256105,2.052196,-4.890880,1.087757,2.342449,-0.917620,-4.079614,-2.630198,1.442510,-2.190269,-3.350533,1.112779,-2.711905,3.690558,-2.974886,-3.664033,4.997577,-1.434913,-0.702823,1.268081,2.043397,0.359604,0.021934,-1.796177,7.719742,-5.708386,-2.101423,1.561392,-2.107903,2.273444,-2.331852,2.840340,-1.153547,0.968689,1.186145,-5.340970,2.878999,0.799972,2.615695,2.982906,1.659017,1.846145,-0.949902,-4.730191,-1.782164,4.132142,-1.382833,-6.146494,1.449442,-2.191751,-1.155142,0.929772,3.963059,-0.821704,0.868923,-2.777534,-2.982654,-1.586477,-2.396110,2.326822,-1.599824,6.078083,-6.439430,1.679200,-0.968986,-0.158889,-0.085614,1.092202,-1.221375,-1.502180,2.093714,2.727281,-3.086561,1.017774,5.190581,3.768042,-2.326261,3.553362,-0.323626,-0.401438,3.909665,-3.101070,-0.680262,2.638019,-0.019080,3.360378,-5.387175,-0.512840,-2.009141,1.296866,0.040171,0.331480,-0.238379,-1.462343,-4.740770,-0.015401,2.936950,-0.651924,-0.901293,-3.836921,6.142310,-5.800762,4.286687,-4.737684,-0.133793,-2.979663,-0.488732,0.028332,1.115997,-1.638471,-1.820407,0.436922,4.691136,-0.202982,8.943903,0.719333,8.089758,0.240024,4.970495,-4.699423,3.237545,2.813051,3.978397,-3.987284,0.822413,3.375929,-3.172055,1.026144,-0.530535,-6.760239,4.098371,-5.487445,0.041733,0.710183,-3.787225,1.377904,-3.153124,-4.448451,-2.556512,-3.607925,-1.666436,-2.477348,3.405989,1.076808,0.954736,1.452518,-3.510494,-2.526684,-2.568790,-3.379426,3.140135,2.169822,4.771016,-0.472033,0.396626,0.821737,1.475960,-3.398465,-4.995393,0.098816,3.873744,-2.775585,-0.291316,-1.006258,-2.532544,0.355802,-1.755105,5.101672,7.426868,-2.159488,-1.155032,1.146931,-4.539948,-1.762735,-2.096842,-0.645077,-1.006133,-0.433499,1.193619,-0.616858,3.090392,-1.895654,-0.758696,-1.272869,-2.398576,1.950146,0.781553,2.043969,-1.274795,-0.529684,-4.990262,-6.466860,-1.739740,-3.658476,2.796686,0.993404,1.997453,2.958587,-5.608055,-4.740724,0.526946,5.389292,0.199387,2.220256,5.140096,3.332762,1.557127,2.933118,-1.293568,1.864851,0.990505,0.504159,0.491164,-4.717780,3.668082,-1.126074,-1.426789,1.529608,-4.588542,0.143328,4.071307,3.197996,3.699596,-0.690205,-4.994602,-3.023643,-2.327384,1.982151,-0.296733,4.341313,1.339472,0.834438,-5.047997,-4.203319,-3.952478,3.491567,5.834850,3.174083,0.933241,-1.679123,-4.685725,-4.065874,0.011349,5.029166,1.688877,2.518958,1.075837,-1.098472,-0.709080,-1.408139,-1.264206,1.342673,-0.221770,-2.038078,-1.106976,-5.250548,2.294376,-3.019834,2.774353,-3.084767,-0.287336,-4.440958,-0.706351,-4.539454,-0.502658,-0.446409,0.635279,0.392518,-0.584445,-6.239496,-0.829296,-5.527858,-0.554856,-1.021847,-4.077414,-3.977540,0.274674,0.636443,-3.723866,-4.415616,-1.626958,0.660472,1.134047,-2.323102,1.280614,2.828732,-1.141936,-4.528105,-1.419848,5.575875,-1.811173,3.389588,0.335031,-1.856798,1.557775,-5.728590,0.459734,0.838324,-2.482091,0.420881,-1.764838,2.938708,2.203918,2.440001,2.811877,-6.065337,0.400695,-0.592121,-0.084188,0.031965,-2.110612,1.542572,-0.812109,-4.576295,2.862029,5.004783,-0.290475,0.253039,0.577756,0.079099,-2.255058,1.858279,2.781716,2.488127,-1.532005,-0.060707,-2.576159,-2.155994,-0.519218,-0.828830,3.903382,-2.094260,-2.506429,2.301920,0.195705,-1.882444,-2.072870,-3.888889,-0.885524,1.094288,1.980053,-1.101463,3.453992,-2.087271,1.578035,1.660535,-1.048563,-0.600730,-0.262280,-3.754733,-3.262230,-0.677930,0.223789,2.633906,0.297234,0.070017,3.279797,1.117666,-1.187812,-0.827763,-1.405989,-1.067552,-0.605080,3.188092,-0.288257,-1.292065,1.535725,1.592028,2.005179,-1.913491,3.223606,-4.444261,-1.304265,3.785626,-1.099586,1.197647,3.888191,-0.904271,-1.813395,-3.062665,3.111362,-2.327051,-2.807750,1.109664,-0.773551,1.230590,-0.596175,-2.691256,3.009394,5.398801,-0.770425,-4.103712,-3.471014,-0.908929,1.037325,-0.063859,0.722025,-2.518008,-0.022903,-0.921131,1.261850,-0.612603,1.215245,-1.081604,0.073777,-1.877030,3.421158,-0.126751,-2.682459,-0.139091,2.049950,1.193181,0.810286,-2.457183,-0.865981,-0.724137,-0.151968,3.729771,1.615817,-0.108366,-3.782972,-0.227065,-0.256588,1.222034,1.574930,-0.442502,-1.531056,-3.173690,0.265945,3.100419,3.176019,0.145388,2.086179,-1.667570,-1.929344,-0.423279,2.514441,2.317025,-3.014148,0.818641,-0.549945,-2.079981,0.098888,7.539721,5.452971,-8.125350,2.024957,-1.286334,-2.754030,1.872302,-3.427281,5.153339,-4.054055,2.841140,-2.155553,-3.034523,-0.617755,-0.239345,4.161613,-6.506575,2.781754,1.023212,-6.195849,-3.028739,-0.423325,3.016926,1.049978,-0.597156,-2.754029,3.448865,1.141074,3.378134,1.069952,-4.164712,0.787048,2.806892,-1.217176,-2.347672,-4.326883,-3.709643,4.746657,0.415743,3.250180,2.216841,-0.489127,3.183926,-2.513884,2.067221,3.043923,4.616095,3.411764,4.682537,1.486250,-4.309215,-0.189442,-5.106012,-1.425771,1.711121,-1.074296,-1.193946,-5.238382,-1.764526,-2.074961,2.227417,-0.803829,1.682501,-0.939418,-1.387228,-1.227144,-2.654926,6.011815,0.814634,1.209372,-2.849462,0.789177,-1.790209,1.353631,3.258237,2.779547,-7.144658,-3.325076,1.785083,-1.636388,-0.337745,-1.178285,2.827132,-1.010469,1.434238,-0.838004,-3.233742,4.253736,-0.115565,0.506693,-1.358368,1.136436,4.527576,4.249712,2.044518,-0.013408,1.482945,1.771357,1.971208,-1.965753,-0.304276,0.958403,-2.680417,-1.713190,2.411942,1.872683,-3.913672,4.337953,-0.188073,1.511566,-3.545266,-2.473865,-0.935143,-0.854442,0.703176,3.631100,2.998194,-3.172862,0.660956,-2.706394,-2.511431,4.137148,1.145942,-2.363304,-0.647916,-1.080744,-0.091066,0.041548,-3.428963,-1.438717,-1.890646,-2.751823,-1.647070,1.284301,-4.934223,2.570267,-0.058262,-1.355810,-1.896079,4.734112,0.143143,0.172971,-0.550402,1.076343,-1.020708,0.046265,-2.060264,2.421962,0.040500,-0.089719,-1.809656,4.577197,2.699755,-2.161446,3.157495,0.543772,-0.603988,0.429271,-0.453724,-4.293742,-3.708539,3.671850,3.237256,-1.155934,-4.719697,-2.354383,2.696196,0.060672,-2.251002,2.570077,4.809885,3.968291,0.538135,3.318631,-6.547014,-0.357053,1.282388,-2.099052,2.409607,-0.915609,1.688291,2.270594,0.590165,-2.386716,2.749757,2.380505,-2.810035,-0.901916,-2.779810,-3.204792,-2.764252,1.975159,-0.981973,5.293998,2.751327,-0.404024,0.442842,-1.381566,-2.819619,1.519053,1.464470,-3.283269,-3.888617,2.531320,-2.435809,-1.837230,1.233200,-1.830487,0.559262,1.043406,0.308238,4.438101,2.203910,-1.722738,2.908358,-0.017211,-0.802285,-2.868719,0.125252,-1.476465,-0.141848,3.824220,0.955764,-0.558052,-0.356001,0.037098,2.366206,0.658556,1.341730,-3.334512,-3.327693,1.534226,-2.450660,-1.890510,-0.085114,-0.824844,-0.564055,1.210988,4.472528,4.070055,1.440786,-0.199867,2.232676,0.421027,2.240824,-1.152562,-2.869785,-0.352908,-0.717200,-0.577159,-0.131809,-2.501262,1.762465,-0.549122,-0.898863,2.580535,-0.014892,-1.620415,0.523096,2.919502,-3.790113,-2.182886,6.454196,-2.613594,-6.411479,-1.449454,-1.004376,-1.063331,-2.195405,1.022027,-2.157810,1.351904,4.597154,-1.512766,-3.711179,-1.543393,1.858466,1.089844,0.110726,-0.230530,-0.975562,-0.381396,1.795193,-0.647166,2.314383,-0.726288,2.104208,0.522803,-0.102130,-4.970343,-0.094554,1.307433,-0.515113,0.786203,2.123240,-1.479419,-0.135657,3.985642,-1.258439,1.992693,2.140233,-2.126106,0.622995,2.503860,-1.595937,4.441868,-2.563199,-2.021016,1.089555,2.927484,-2.041567,-2.784764,2.218863,-0.395612,4.928267,0.550004,-0.959043,-2.697813,-2.232053,2.683768,2.695036,0.524616,2.783683,-4.064313,-0.238441,2.933219,0.440233,-0.840571,-7.994110,4.717312,-3.630261,4.985171,-1.464034,-1.592710,-0.712654,4.485281,0.514831,-0.248059,3.589013,0.521420,-0.081582,-0.867171,-4.206909,-4.580775,-4.305184,1.501605,5.061756,-0.799254,1.600653,-2.346902,-3.201022,-0.291255,-1.285387,0.590045,1.679733,-1.276099,-4.178267,-0.996449,-1.075646,1.024224,-0.824291,0.234117,0.408673,2.109702,-2.243677,0.685821,0.655739,-0.350790,-2.566509,-1.583379,1.694303,0.286069,1.105909,-2.442420,3.419236,-2.437058,1.112154,1.856264,-2.844431,4.621421,2.669517,1.982946,-2.260421,1.838464,-1.831016,0.853379,1.666287,-0.565168,-1.449975,0.990978,-3.448131,1.555184,8.688093,1.613880,1.480283,-0.407168,0.445553,-3.382911,-0.385646,0.269401,0.014275,-2.935271,-2.217107,4.364831,1.145834,0.777634,-2.137724,1.445976,6.080402,-4.747075,1.746429,1.209941,4.182820,-1.894449,-1.475128,-2.678073,-1.077587,4.859661,-2.721947,-1.471810,-2.406933,1.310058,-0.706007,-2.058953,0.922785,-3.145372,-0.159245,2.902838,-4.336012,0.595981,1.351569,-5.677433,-2.367984,-0.449378,0.231313,2.748907,-3.108034,-0.709639,2.184839,-1.618212,0.911191,0.346062,-0.414894,-3.870537,0.913479,0.455579,1.956341,2.154887,-2.408054,0.484738,-0.841195,0.688802,4.209517,1.233217,-2.851614,-0.770486,-1.418259,0.016471,-0.501814,0.672083,2.297254,1.384813,-1.768757,3.918304,0.304516,2.086453,0.755932,0.735508,-2.976584,0.692971,-1.296061,-7.347276,-2.169559,-1.860429,-2.745759,1.866363,1.818403,4.748431,2.711926,-3.896648,-3.228132,-0.520929,2.917679,0.977822,-4.672035,-0.505217,-2.019511,2.713295,-2.213034,-3.789110,1.826128,0.714749,3.028087,1.957546,-1.028016,-3.767533,-2.337667,5.510308,-3.939394,-0.214129,1.277994,4.893094,-1.133607,4.860960,0.014593,-0.525221,3.304368,-1.909206,0.616318,-0.935008,-0.578686,-2.724492,-0.561733,-2.401762,4.772506,3.094884,3.465178,-0.969593,-3.640854,-0.911648,-4.114129,0.344464,1.133689,1.303839,-5.601315,-4.116673,-3.492215,-0.551658,-0.966192,5.130723,6.290287,5.270452,1.149357,-2.460248,-5.393554,-1.250804,0.121218,-0.110687,1.383013,-4.469207,1.537999,-0.880330,-0.243376,-0.342885,1.396630,-2.732690,2.034975,2.477493,1.059920,-2.913940,-1.666718,3.425429,5.112140,-3.975711,-1.432026,-0.191445,1.664885,-1.297942,-2.594388,3.057192,2.286360,8.873343,1.251087,1.341882,1.455253,-4.740438,1.417383,0.953907,-1.820899,-3.194699,-3.217972,0.395746,2.593567,1.601017,-0.346152,1.271595,4.043174,2.979353,3.287579,2.136997,-0.978248,0.466757,0.649161,-5.449493,1.294271,-1.219633,-3.701447,-0.997626};

  element_t bias_raw[] = {1.324, 3.829, 2.112, 0.003, 0.28464628};

  auto& ms = MinervaSystem::Instance();
  Scale input_size{7, 6, 3, 2};
  Scale weight_size{5, 3, 5, 3};
  Scale correct_size{17, 9, 5, 2};
  Scale bias_size{5};
  shared_ptr<element_t> input_ptr(new element_t[input_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> weight_ptr(new element_t[weight_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  shared_ptr<element_t> bias_ptr(new element_t[bias_size.Prod()], [](element_t* ptr) { delete[] ptr; });
  memcpy(input_ptr.get(), input_raw, input_size.Prod() * sizeof(element_t));
  memcpy(weight_ptr.get(), weight_raw, weight_size.Prod() * sizeof(element_t));
  memcpy(bias_ptr.get(), bias_raw, bias_size.Prod() * sizeof(element_t));

  ms.SetDevice(cpu_device);
  ImageBatch top = NArray::MakeNArray(input_size, input_ptr);
  Filter weight = NArray::MakeNArray(weight_size, weight_ptr);
  NArray bottom = NArray::Zeros(correct_size);
  ConvInfo conv_info(3, 2, 3, 2);
  ImageBatch output = Convolution::ConvBackwardData(top, bottom, weight, conv_info);
  auto output_ptr = output.Get();
  for (int i = 0; i < 10 && correct_size.Prod() > 1; ++i) {
    EXPECT_NEAR(output_ptr.get()[i], correct_raw[i], 0.001);
	//printf("%f,",output_ptr.get()[i]);
  }
}
