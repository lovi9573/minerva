#include "unittest_main.h"

#include <time.h>
#include <sys/time.h>
#include <stdlib.h>

double get_wall_time(){
    struct timeval time;
    if (gettimeofday(&time,NULL)){
        //  Handle error
        return 0;
    }
    return (double)time.tv_sec + (double)time.tv_usec * .000001;
}

using namespace std;
using namespace minerva;

#ifdef HAS_CUDA

TEST(LRNForward, GpuSmall) {
  float bottom_raw[] = {1,2,3,4,5,6,7,8,9,10,11,12};
  float correct_raw[] = {0.382625,0.598140,0.712426,0.769800,0.790370,0.787196,0.772239,0.751931,1.431855,1.338861,1.258747,1.189430}; 
  auto& ms = MinervaSystem::Instance();
  Scale bottom_size{2, 2, 3, 1};
  shared_ptr<float> bottom_ptr(new float[bottom_size.Prod()], [](float* ptr) { delete[] ptr; });
  memcpy(bottom_ptr.get(), bottom_raw, bottom_size.Prod() * sizeof(float));

  ms.SetDevice(cpu_device);
  ImageBatch bottom = NArray::MakeNArray(bottom_size, bottom_ptr);
  NArray scale = NArray::Ones(bottom_size);
  int local_size = 3;
  element_t alpha = 0.3;
  element_t beta = 0.75;
  ms.SetDevice(gpu_device);
  ImageBatch top = Convolution::LRNForward(bottom, scale, local_size, alpha, beta);
  auto top_ptr = top.Get();
  for (int i = 0; i < bottom_size.Prod(); ++i) {
    EXPECT_NEAR(top_ptr.get()[i], correct_raw[i], 0.001);
    //printf("%f,",top_ptr.get()[i]);
  }
}



TEST(LRNForward, GpuLarge) {
  float bottom_raw[] = {8.59232186e-01, -3.67248891e-01, -6.32162377e-01, -5.90879443e-01, 1.35450058e-01, 1.91089406e-01, 9.29029039e-01, 3.06354194e-01, 4.97813275e-01, 3.07139742e-01, 4.95429619e-01, 9.22613472e-01, -9.83223404e-01, -7.87111247e-01, -4.02592572e-01, 3.12822366e-01, 6.19625105e-01, 7.44351827e-01, 9.29295195e-01, 4.47370694e-01, 2.84950656e-01, 4.34907242e-01, -6.48019856e-02, -3.48830645e-01, -1.20710788e-01, 4.59378165e-01, 9.88029172e-01, 3.53747424e-01, 5.81645036e-01, -6.58171484e-01, -9.46301448e-01, 6.00740488e-01, 8.07445076e-01, -9.50647579e-01, -1.65053631e-02, 5.25103347e-02, 1.92732021e-01, -8.96084910e-01, 7.90179056e-01, 4.56532361e-01, 6.36700023e-01, 4.45505669e-04, 6.20378818e-01, -8.08062949e-01, -5.62099913e-01, -4.82561877e-01, -6.37884921e-02, -8.12535948e-02, 4.19019560e-01, -6.43893988e-01, 6.28997687e-02, -6.64515542e-01, 5.37627837e-01, 8.56341098e-01, 2.18987316e-01, -6.99633011e-01, -2.07465926e-02, -2.45310092e-01, 6.97202824e-01, 8.22194457e-01, -2.32302558e-01, -3.69008193e-01, 1.36788306e-01, -6.24363930e-01, -7.48316912e-01, 3.75191610e-01, 5.99213436e-01, 1.47073130e-01, 9.46459963e-01, 2.68108754e-01, 7.76843450e-01, -9.17048249e-03, -2.96766940e-01, 4.28460737e-01, 7.85823290e-03, -5.48724787e-01, -5.10051120e-01, 5.85601400e-01, -9.65517098e-03, 8.30187347e-01, 8.90743668e-01, 6.64644593e-02, -4.95014811e-01, 4.41724116e-01, -2.65122472e-01, -2.70311418e-03, -5.46849905e-01, -2.92868707e-01, 3.01703573e-01, -3.74134209e-01, 5.37470894e-01, 5.63674207e-01, 7.04818966e-01, 8.99811480e-01, -7.85354176e-01, 8.21450712e-01, -3.27889676e-01, 6.52760854e-01, 7.96201270e-01, -9.14569391e-01, -6.08410002e-01, -4.10997356e-01, 2.53999761e-01, -8.27553790e-01, -7.14109960e-01, 3.16530385e-02, 3.78682659e-01, 7.13251622e-01, 2.94723367e-01, 1.63237351e-01, 4.22231910e-01, -4.95166286e-01, 8.00319367e-01, -1.15412614e-01, -9.58958351e-01, 9.19322028e-01, 3.04450845e-01, 2.64125002e-02, 3.64712766e-01, -2.09192187e-02, 8.52980343e-01, 3.17595443e-02, -8.55680237e-01, 1.35016596e-01, 2.30486367e-01, 8.83092589e-01, -1.69273291e-01, -4.71120051e-01, -8.05213669e-01, -2.83115562e-02, -7.06742743e-02, -9.40481366e-01, 3.88554924e-01, 4.33894225e-01, 4.59622847e-01, -1.71297966e-01, -9.69802310e-01, 8.17950315e-01, 5.78757436e-01, -6.69601662e-01, -3.74428077e-01, 2.21890612e-01, -2.71019427e-01, -6.87922822e-01, -6.45392373e-01, 7.35779342e-01, -4.19810663e-01, 1.70359243e-01, -9.20102482e-02, -1.77643736e-01, 7.65268890e-01, 3.85416030e-01, -4.41453290e-01, -8.71119538e-01, -6.02752772e-01, 8.63365489e-01, 7.08827136e-01, 9.09469469e-01, -8.95493304e-01, 1.58943361e-01, -3.90074667e-02, -9.56582042e-01, -2.52759073e-01, -1.71816398e-01, 2.07814468e-01, 3.43497455e-01, 6.77731401e-01, 5.59052417e-01, -1.98597912e-01, 5.89058463e-01, 7.86248621e-01, -4.75020618e-01, 9.78394015e-01, 7.06614198e-01, 4.62954312e-01, -2.88868751e-01, 7.66578981e-01, 7.35918182e-01, 9.11532892e-01, -9.99785487e-01, -9.66917916e-01, -3.71859885e-01, 9.90632349e-01, -7.02311554e-01, -6.65245763e-01, 5.17144074e-01, -8.60940668e-01, 4.10946877e-01, -6.16694364e-02, -9.79623568e-01, 5.49647726e-01, 5.88402017e-01, -7.00861097e-01, -9.52592736e-01, 5.24127542e-01, -5.52659640e-01, -4.75651204e-01, -8.62609944e-02, -5.00146163e-01, 1.36567123e-01, 6.93885994e-01, -2.43800926e-01, -1.35069767e-01, 6.65238353e-01, -2.57736129e-01, -9.18893456e-01, 1.09342972e-01, -9.75075144e-02, 4.50601953e-01, -2.43098955e-01, 6.81324991e-01, -6.13706128e-02, 1.25286858e-01, 3.22398678e-01, -7.55162650e-02, 2.47273891e-01, -5.56238738e-01, 4.65726234e-01, -2.36635823e-01, -6.10330916e-01, -4.57674450e-01, -5.01549896e-01, -6.95721875e-01, 5.42747408e-01, -4.89176535e-01, -7.44913190e-01, 3.30334307e-01, -1.74390103e-01, 3.35535533e-01, 3.19627034e-01, -3.89244656e-01, -5.97551518e-01, -5.55945747e-01, -7.60058273e-01, -9.25709118e-01, -9.31736833e-01, -5.39006904e-01, -5.43292587e-01, 2.49821244e-01, 7.85122371e-01, 5.59456032e-01, 4.42902537e-01, -3.79115682e-01, -2.73833167e-01, -6.07836432e-01, 8.70983596e-01, 1.23468000e-01, 6.34583074e-01, -3.02172038e-01, 5.99428526e-01, -7.91791075e-01, 4.24240330e-01, 8.34896992e-01, 6.07170737e-01, -3.45773707e-01, -4.89785641e-01, -9.99565129e-03, -1.72778091e-01, -1.50125809e-01, -8.51243390e-01, 2.06781303e-01, 4.94399467e-01, 5.95152453e-01, -2.36998955e-01, 5.94316306e-01, -5.64052608e-02, 4.42798342e-01, -6.21574621e-01, -1.30808581e-01, 6.46936218e-01, 6.52545256e-01, -6.20949033e-01, -9.59795660e-01, 4.06982772e-01, -3.05459761e-01, -1.60992368e-01, 5.36177806e-01, 9.25756133e-01, 7.85130614e-01, -7.30115467e-01, 5.95609430e-01, 3.64181215e-01, 6.01057742e-02, 7.31963310e-01, 5.06496191e-01, -8.13594826e-01, -3.41121136e-01, -1.75274609e-01};


  float correct_raw[] = {0.804687,-0.352807,-0.613679,-0.558099,0.132409,0.180751,0.870221,0.293601,0.488741,0.303628,0.469878,0.829328,-0.914104,-0.745258,-0.397219,0.301848,0.579095,0.707779,0.852280,0.440071,0.265710,0.426583,-0.061997,-0.345679,-0.119790,0.446236,0.921359,0.342845,0.556834,-0.622289,-0.887343,0.557394,0.729693,-0.890648,-0.016208,0.051744,0.191194,-0.845652,0.739531,0.446712,0.613980,0.000441,0.590771,-0.753823,-0.530105,-0.447973,-0.060971,-0.077334,0.389545,-0.600474,0.058411,-0.593472,0.511833,0.800610,0.204220,-0.639705,-0.019640,-0.242487,0.654695,0.715508,-0.214704,-0.348739,0.133217,-0.592108,-0.670162,0.356424,0.518033,0.136305,0.877003,0.262964,0.736307,-0.009087,-0.279536,0.416172,0.006982,-0.531117,-0.486466,0.525409,-0.009036,0.758881,0.772381,0.062266,-0.485921,0.408956,-0.260098,-0.002518,-0.504498,-0.285958,0.272803,-0.352929,0.500095,0.510276,0.658309,0.832532,-0.746795,0.756816,-0.321096,0.614414,0.760118,-0.835684,-0.579966,-0.385214,0.251878,-0.761430,-0.687941,0.031509,0.361735,0.655803,0.291648,0.161272,0.416099,-0.472822,0.735082,-0.114097,-0.876207,0.863758,0.283670,0.026270,0.345783,-0.020918,0.804266,0.031327,-0.811509,0.131871,0.225215,0.815354,-0.168909,-0.441294,-0.727848,-0.028300,-0.069377,-0.870876,0.382229,0.427867,0.442782,-0.169834,-0.900961,0.771591,0.553077,-0.633538,-0.357483,0.208593,-0.257786,-0.634076,-0.604676,0.664779,-0.406150,0.166207,-0.090423,-0.177126,0.720558,0.380653,-0.420308,-0.821219,-0.586060,0.793655,0.680016,0.809922,-0.844455,0.158530,-0.038420,-0.892163,-0.243189,-0.171389,0.206901,0.337889,0.655017,0.543880,-0.193556,0.565315,0.748702,-0.454768,0.900678,0.669268,0.440099,-0.280941,0.722234,0.680677,0.852136,-0.928914,-0.897307,-0.365292,0.914023,-0.660615,-0.630052,0.486615,-0.770338,0.381634,-0.060342,-0.896510,0.535085,0.549209,-0.642860,-0.849774,0.501905,-0.536275,-0.455178,-0.081436,-0.470429,0.131007,0.656443,-0.224271,-0.125679,0.604250,-0.235695,-0.799450,0.102264,-0.095546,0.443807,-0.226266,0.654479,-0.058098,0.124340,0.311563,-0.071186,0.239591,-0.528641,0.446853,-0.222280,-0.568827,-0.420837,-0.461628,-0.642295,0.513605,-0.433500,-0.681382,0.306848,-0.161743,0.305438,0.295614,-0.344916,-0.542216,-0.513870,-0.708699,-0.828097,-0.835055,-0.517760,-0.476338,0.241174,0.731290,0.527924,0.409459,-0.367637,-0.266272,-0.582022,0.824077,0.121066,0.615241,-0.289809,0.581267,-0.755520,0.405454,0.790075,0.557210,-0.342402,-0.480820,-0.009846,-0.171634,-0.144869,-0.807520,0.205879,0.481863,0.579577,-0.234935,0.566396,-0.055492,0.434608,-0.588395,-0.128629,0.616220,0.611289,-0.591048,-0.883926,0.386290,-0.300903,-0.160316,0.520633,0.864297,0.742750,-0.684883,0.567580,0.345912,0.056497,0.663283,0.486662,-0.759690,-0.336618,-0.167222};

  auto& ms = MinervaSystem::Instance();
  Scale bottom_size{8, 6, 3, 2};
  shared_ptr<float> bottom_ptr(new float[bottom_size.Prod()], [](float* ptr) { delete[] ptr; });
  memcpy(bottom_ptr.get(), bottom_raw, bottom_size.Prod() * sizeof(float));

  ms.SetDevice(cpu_device);
  ImageBatch bottom = NArray::MakeNArray(bottom_size, bottom_ptr);
  NArray scale = NArray::Ones(bottom_size);
  int local_size = 3;
  element_t alpha = 0.3;
  element_t beta = 0.75;
  ms.SetDevice(gpu_device);
  ImageBatch top = Convolution::LRNForward(bottom, scale, local_size, alpha, beta);
  auto top_ptr = top.Get();
  for (int i = 0; i < bottom_size.Prod(); ++i) {
    EXPECT_NEAR(top_ptr.get()[i], correct_raw[i], 0.001);
    //printf("%f,",top_ptr.get()[i]);
  }
}



TEST(LRNForward, GpuLocalSizeTooLong) {
  float bottom_raw[] = {5.25103347e-02, 1.92732021e-01, -8.96084910e-01, 7.90179056e-01, 4.56532361e-01, 6.36700023e-01, 4.45505669e-04,
		  	  	  	  -6.37884921e-02, -8.12535948e-02, 4.19019560e-01, -6.43893988e-01, 6.28997687e-02, -6.64515542e-01, 5.37627837e-01,
					  -2.45310092e-01, 6.97202824e-01, 8.22194457e-01, -2.32302558e-01, -3.69008193e-01, 1.36788306e-01, -6.24363930e-01,
					  9.46459963e-01, 2.68108754e-01, 7.76843450e-01, -9.17048249e-03, -2.96766940e-01, 4.28460737e-01, 7.85823290e-03,
					  8.30187347e-01, 8.90743668e-01, 6.64644593e-02, -4.95014811e-01, 4.41724116e-01, -2.65122472e-01, -2.70311418e-03,
					  5.37470894e-01, 5.63674207e-01, 7.04818966e-01, 8.99811480e-01, -7.85354176e-01, 8.21450712e-01, -3.27889676e-01,};


  float correct_raw[] = {0.051669,0.190396,-0.861355,0.744919,0.431750,0.605300,0.000438,-0.062592,-0.077700,0.394298,-0.608941,0.059348,-0.648129,0.520465,-0.229672,0.645767,0.764140,-0.218572,-0.000000,0.132422,-0.584563,0.000000,0.000000,0.730928,-0.000000,-0.287581,0.409651,0.000000,0.000000,0.847015,0.000000,-0.479745,0.422406,-0.000000,-0.000000,0.511139,0.000000,0.688452,0.861834,-0.000000,0.000000,-0.312269};


  auto& ms = MinervaSystem::Instance();
  Scale bottom_size{2, 3, 7, 1};
  shared_ptr<float> bottom_ptr(new float[bottom_size.Prod()], [](float* ptr) { delete[] ptr; });
  memcpy(bottom_ptr.get(), bottom_raw, bottom_size.Prod() * sizeof(float));

  ms.SetDevice(cpu_device);
  ImageBatch bottom = NArray::MakeNArray(bottom_size, bottom_ptr);
  NArray scale = NArray::Ones(bottom_size);
  int local_size = 8;
  element_t alpha = 0.3;
  element_t beta = 0.75;
  ms.SetDevice(gpu_device);
  ImageBatch top = Convolution::LRNForward(bottom, scale, local_size, alpha, beta);
  auto top_ptr = top.Get();
  for (int i = 0; i < bottom_size.Prod(); ++i) {
    EXPECT_NEAR(top_ptr.get()[i], correct_raw[i], 0.001);
    //printf("%f,",top_ptr.get()[i]);
  }
}


TEST(LRNForward, GpuLong) {
  float bottom_raw[] = {5.25103347e-02, 1.92732021e-01, -8.96084910e-01, 7.90179056e-01, 4.56532361e-01, 6.36700023e-01, 4.45505669e-04, -6.37884921e-02, -8.12535948e-02, 4.19019560e-01, -6.43893988e-01, 6.28997687e-02, -6.64515542e-01, 5.37627837e-01, -2.45310092e-01, 6.97202824e-01, 8.22194457e-01, -2.32302558e-01, -3.69008193e-01, 1.36788306e-01, -6.24363930e-01, 9.46459963e-01, 2.68108754e-01, 7.76843450e-01, -9.17048249e-03, -2.96766940e-01, 4.28460737e-01, 7.85823290e-03, 8.30187347e-01, 8.90743668e-01, 6.64644593e-02, -4.95014811e-01, 4.41724116e-01, -2.65122472e-01, -2.70311418e-03, 5.37470894e-01, 5.63674207e-01, 7.04818966e-01, 8.99811480e-01, -7.85354176e-01, 8.21450712e-01, -3.27889676e-01, 5.59052417e-01, -1.98597912e-01, 5.89058463e-01, 7.86248621e-01, -4.75020618e-01, 9.78394015e-01, 7.06614198e-01, 9.11532892e-01, -9.99785487e-01, -9.66917916e-01, -3.71859885e-01, 9.90632349e-01, -7.02311554e-01, -6.65245763e-01, -9.79623568e-01, 5.49647726e-01, 5.88402017e-01, -7.00861097e-01, -9.52592736e-01, 5.24127542e-01, -5.52659640e-01, 6.93885994e-01, -2.43800926e-01, -1.35069767e-01, 6.65238353e-01, -2.57736129e-01, -9.18893456e-01, 1.09342972e-01, -6.13706128e-02, 1.25286858e-01, 3.22398678e-01, -7.55162650e-02, 2.47273891e-01, -5.56238738e-01, 4.65726234e-01, -6.95721875e-01, 5.42747408e-01, -4.89176535e-01, -7.44913190e-01, 3.30334307e-01, -1.74390103e-01, 3.35535533e-01, -6.26250490e-01, -4.07823970e-01, 5.97030118e-01, -4.10443414e-01, 3.94243187e-01, -4.54081542e-01, 8.25056903e-01, -2.81417189e-01, 3.64354606e-01, 8.42783940e-01, -7.10151312e-01, -8.00251230e-01, -1.76794447e-01, 9.50250742e-01, -3.67423692e-01, 2.20271553e-01, -5.97610574e-01, 3.83795433e-01, -5.10746058e-01, 3.60743392e-01, -2.81245422e-02, 6.82296085e-01, -6.07151251e-01, -3.38833141e-01, 8.93259770e-01, 1.21436991e-02, -1.93168283e-01, -9.45876923e-01, -3.31218962e-01, -8.64580115e-01, -9.92351503e-01, -9.18064393e-01, -3.02090269e-01, -8.16091378e-01, 4.06314529e-02, 5.24922383e-02, -1.20153861e-01, 3.23110491e-01, -7.30429651e-01, 5.75698010e-01, -7.24044598e-01, 2.65846595e-01, 5.78064850e-01, 3.24041516e-01, 4.23024858e-01, 7.75847324e-01, -7.16649418e-01, -7.04859753e-01, -3.48138314e-01, 2.32015221e-01, 9.16999718e-01, -4.17894767e-01, 3.73356925e-01, -9.15543539e-01, -8.74992737e-01, 6.28797391e-01, 6.70704305e-01, -6.64622476e-02, -1.57428024e-01, 1.41703106e-01, 4.78111913e-01, -8.89833183e-01, 2.48361298e-01, 1.71500734e-01, -1.03241151e-01, -2.92539465e-01, 8.67050469e-01, -4.65488136e-01, -4.37401239e-01, 9.81192729e-03, 1.76624177e-01, 4.63404565e-01, -6.48977854e-01, 2.10775692e-02, 5.69191679e-04, 7.85535264e-01, -2.34634585e-01, 8.96057273e-01, -3.05549564e-01, 3.67786398e-01, 6.49269763e-01, -2.74940115e-02, 9.68351743e-01, 2.07628076e-01, 1.85028318e-01, -3.49798716e-01, 8.73610682e-01, -8.08034049e-01, 7.66591492e-01, 1.36035466e-01, -8.76153051e-01, -9.42090961e-01, 2.54198007e-01, 2.09278522e-01, -8.43584950e-01, 5.45907125e-01, -7.13366751e-01, -7.26307843e-02, 4.97412749e-01, 7.79227666e-01, -2.41219689e-01, -4.15127476e-01, 1.85804799e-02, 6.56272008e-02, -7.89156759e-01, 5.95946891e-01, -5.11510156e-01, 6.07075484e-01, -4.03649869e-01, -6.54580737e-02, 8.65639316e-01, 8.19513569e-01, 2.93617672e-01, -3.35847054e-01, -7.71555326e-01, 1.42208982e-01, -3.96017041e-01, -6.12988788e-01, 1.29411384e-01, -1.88205315e-01, 3.31118167e-01, -6.05975908e-01, -5.16439080e-01, 2.46344907e-01, 5.97476702e-01, 8.92727341e-02, 8.77082477e-01, 4.78201578e-01, -9.46106323e-01, -2.35208227e-01, -9.78947208e-01, -8.69535860e-01, 3.62785391e-01, 7.88573716e-01, 4.13573947e-01, -4.22013528e-02, -5.68775015e-01, -8.36467872e-01, 3.46404408e-01, 9.89558378e-01, 8.96711938e-02, 9.67284551e-01, 4.71404282e-01, -8.13833601e-01, -4.15551966e-01, -4.53903666e-01, -8.57667173e-01, -5.76563967e-01, -4.14422920e-01, -2.87165417e-01, 9.12734981e-01, 3.20487724e-01, 9.01024809e-01, -8.06264818e-01, -4.12511687e-01, 2.99419879e-01, -1.58010723e-01, -8.50696651e-01, 4.77613710e-01, 1.70740085e-01, -3.10658805e-01, -4.22856328e-01, -4.71636816e-01, -4.46162130e-01, 6.84712020e-01, -6.60755426e-01, -4.95826747e-01, 1.83750401e-01};

  float weight_raw[] = {4.69434058e-01, -1.38583424e+00, -1.19454332e+00, 7.51993600e-01, 1.67906442e+00, -4.73379739e-01, 9.41878306e-01, -4.58280482e-01, -8.89644787e-01, 7.47770021e-01, 1.86899005e+00, -3.76912984e-02, -2.68109599e+00, -1.01194085e-01, 2.78046317e-02, -3.78493153e-01, -7.43905667e-01, 1.66726823e+00, -2.39953374e+00, -2.90112339e+00, 1.69425602e+00, 2.11895221e+00, -1.65778947e+00, 7.61535409e-01, -2.61197826e+00, -1.56647519e+00, -2.41361783e-01, 9.76095418e-01, -1.69379028e+00, -1.80317946e-01, 2.86974591e+00, 7.83224328e-02, -1.79212071e-01, 9.96846111e-01, 1.27322826e-01, -1.45638535e+00, 1.94500748e+00, -2.22728921e+00, -1.96833731e+00, -1.95052845e+00, -7.08356663e-01, -2.39044050e+00, -6.61220349e-01, 1.85948655e+00, -8.77489231e-01, 2.25910682e+00, 2.75299436e+00, 2.03237053e+00, -2.30972770e+00, 3.74469986e-01, -2.34937194e+00, 2.25521054e+00, -8.99953121e-01, 2.38629051e+00, -2.25493565e+00, 8.27170971e-01, 2.23515090e+00, -2.99360661e+00, -1.17168090e+00, -2.82705197e+00, 2.98377018e-01, -1.94885169e+00, 5.40153173e-01, -2.96927632e+00, -1.30786336e+00, 1.55878752e+00, 2.23167008e+00, 3.25273789e-02, -9.75319840e-02, -2.71345071e+00, 1.50482951e+00, 1.98800589e+00, 2.19620308e+00, 1.96069188e+00, -2.51859384e-03, -2.94740383e+00, -9.52835533e-01, 1.44073713e+00, 2.46472884e+00, -1.23625174e+00, -1.87975626e+00, 2.30530176e+00, -6.95593244e-01, 7.01437086e-01, 5.81853703e-01, -1.06019632e+00, 8.40219457e-01, -3.08456307e-01, 1.19075977e+00, -2.02837369e+00, -1.82785135e+00, -1.03247982e-01, 3.75951276e-04, 1.60856600e+00, -1.84283918e+00, 2.95301614e+00, -1.04820246e+00, 2.07600281e+00, 1.90885268e+00, 2.43943187e+00, 1.43667562e+00, -1.10003648e+00, -2.83465135e+00, 3.78231860e-01, 2.74004219e+00, -2.06394886e+00, 1.54640811e+00, -2.75194253e+00, -1.83270810e+00, 1.21537604e-01, -2.10613421e-01, 1.73705801e+00, -2.23164924e+00, 2.35449197e+00, -1.94164743e+00, -3.90715826e-01, -2.10387976e+00, 1.13258744e+00, 1.88402160e+00, -1.84470203e+00, 4.68833930e-01, 1.32519944e+00, -1.49205079e-01, -1.42829315e+00, 1.40477660e+00, -9.04758285e-01, 1.02878655e+00, -2.66964987e+00, 2.38227291e+00, 1.29870916e-01, -1.34866170e+00, 2.06100418e+00, -3.45158807e-01, 1.01549933e+00, 2.95588019e+00, 2.11601428e+00, 2.60128869e+00, 2.17276736e+00, -2.59770354e+00, -1.24910999e+00, -1.82202496e+00, -5.33936144e-01, -4.84902078e-01, 2.74960541e+00, 2.54449228e+00, 2.90201444e+00, -7.12005966e-01, 2.78452402e+00, 5.41890668e-01, 6.39412589e-03, -1.30741768e+00, -2.02580336e+00, -3.07274893e-01, -9.16216399e-01, 1.43133925e-01, 2.62978313e-01, -2.93526489e+00, -1.22066322e+00, -1.99031596e+00, 2.75104991e+00, -1.58140965e+00, 1.99593194e+00, 1.24653142e+00, 3.63953174e-01, 1.20670807e+00, -1.72797444e+00, 1.14623773e+00, 7.29634814e-01, 1.30469585e+00, -2.08381639e+00, -2.43447976e+00, 2.70710670e+00, -5.76311983e-01, 8.60548537e-01, 2.76294937e+00, 2.02390457e+00, -2.21619757e+00, 5.84615982e-03, -1.90966590e+00, -2.69773939e+00, 2.37040542e+00, -1.40377827e+00, -2.67741849e+00, -3.91919585e-03, 1.68066674e+00, 3.41687874e-01, -2.18967901e+00, -6.68539573e-01, -1.45396104e+00, 1.63947625e-01, 2.41602503e+00, 2.11868255e+00, 2.02093959e+00, -1.70472896e+00, -2.19870107e+00, -2.27854787e+00, 2.24774629e+00, -2.51982957e+00, -6.63516277e-01, -1.90908765e+00, -5.33080226e-01, 2.00029937e+00, 2.87068895e+00, -2.97450387e+00, 3.59138519e-01, 1.51067887e+00, -6.59731115e-01, -1.14836880e+00, 1.78586722e+00, 1.33662466e+00, 1.80534568e+00, 2.83009647e+00, 2.26499936e+00, 6.41048319e-01, -1.35574472e+00, 1.12644441e-01, 4.13352887e-01, 2.71106637e+00, -3.33341733e-01, 2.67315433e+00, 4.36720777e-01, 2.50423523e+00, -6.96118478e-01, -2.71824102e+00, 2.16307105e+00};

  float correct_raw[] = {0.050478,0.185649,-0.868895,0.765088,0.437247,0.609273,0.000431,-0.061133,-0.077411,0.397471,-0.616222,0.059689,-0.632168,0.504794,-0.233546,0.658564,0.774363,-0.217437,-0.350037,0.128550,-0.582559,0.883393,0.253513,0.726436,-0.008551,-0.276940,0.403274,0.007343,0.767498,0.831132,0.062555,-0.462504,0.407939,-0.247365,-0.002543,0.500581,0.519422,0.654366,0.843771,-0.729664,0.752772,-0.304195,0.528456,-0.185484,0.538818,0.731212,-0.447360,0.912250,0.645389,0.847461,-0.938973,-0.900855,-0.340689,0.917060,-0.656578,-0.618817,-0.903344,0.504485,0.550093,-0.651748,-0.878708,0.484707,-0.515676,0.648398,-0.224890,-0.124435,0.619545,-0.240557,-0.846687,0.101547,-0.057136,0.116162,0.297321,-0.069652,0.227920,-0.512841,0.430485,-0.640602,0.504386,-0.453827,-0.693187,0.304172,-0.161700,0.310367,-0.581711,-0.377610,0.552974,-0.382970,0.367405,-0.421421,0.767968,-0.263766,0.339610,0.789636,-0.658674,-0.752139,-0.166186,0.885434,-0.339343,0.207234,-0.564430,0.358610,-0.473055,0.341025,-0.026516,0.632500,-0.564531,-0.320436,0.849556,0.011249,-0.178249,-0.892647,-0.314724,-0.800927,-0.915985,-0.867255,-0.286432,-0.759744,0.037617,0.049393,-0.114526,0.298684,-0.675802,0.541577,-0.689918,0.246162,0.531701,0.305233,0.403603,0.719013,-0.658624,-0.660017,-0.330567,0.216544,0.840528,-0.390315,0.354388,-0.862103,-0.797423,0.585798,0.635617,-0.062675,-0.143491,0.131372,0.452828,-0.841700,0.227206,0.159176,-0.097961,-0.275694,0.791423,-0.434366,-0.414799,0.009319,0.161598,0.433183,-0.615475,0.020136,0.000518,0.734173,-0.222190,0.853569,-0.279340,0.344789,0.617515,-0.026109,0.885884,0.194734,0.175650,-0.334261,0.797176,-0.759960,0.721880,0.129991,-0.798562,-0.880737,0.239391,0.200439,-0.773455,0.512431,-0.672696,-0.069054,0.455626,0.724272,-0.227991,-0.394086,0.016992,0.060608,-0.744619,0.565027,-0.467864,0.559988,-0.380947,-0.062008,0.785492,0.756806,0.275981,-0.316001,-0.698944,0.132032,-0.372346,-0.577240,0.117077,-0.174927,0.312379,-0.569584,-0.470533,0.228600,0.561127,0.083639,0.803252,0.446575,-0.893987,-0.220408,-0.903490,-0.819508,0.343031,0.739287,0.384465,-0.039897,-0.540680,-0.784231,0.322839,0.941498,0.085294,0.908495,0.439336,-0.774343,-0.397878,-0.427890,-0.801472,-0.550725,-0.397485,-0.270719,0.859560,0.308319,0.864992,-0.760983,-0.390898,0.288113,-0.151946,-0.806076,0.452669,0.164355,-0.299085,-0.402224,-0.448257,-0.429756,0.661730,-0.628568,-0.475095,0.177428};


  auto& ms = MinervaSystem::Instance();
  Scale bottom_size{2, 2, 63, 1};
  shared_ptr<float> bottom_ptr(new float[bottom_size.Prod()], [](float* ptr) { delete[] ptr; });
  memcpy(bottom_ptr.get(), bottom_raw, bottom_size.Prod() * sizeof(float));

  ms.SetDevice(cpu_device);
  ImageBatch bottom = NArray::MakeNArray(bottom_size, bottom_ptr);
  NArray scale = NArray::Ones(bottom_size);
  int local_size = 20;
  element_t alpha = 0.3;
  element_t beta = 0.75;
  ms.SetDevice(gpu_device);
  ImageBatch top = Convolution::LRNForward(bottom, scale, local_size, alpha, beta);
  auto top_ptr = top.Get();
  for (int i = 0; i < bottom_size.Prod(); ++i) {
    EXPECT_NEAR(top_ptr.get()[i], correct_raw[i], 0.001);
    //printf("%f,",top_ptr.get()[i]);
  }
}

#endif

TEST(LRNForward, CpuSmall) {
  float bottom_raw[] = {1,2,3,4,5,6,7,8,9,10,11,12};
  float correct_raw[] = {0.382625,0.598140,0.712426,0.769800,0.790370,0.787196,0.772239,0.751931,1.431855,1.338861,1.258747,1.189430}; 
  auto& ms = MinervaSystem::Instance();
  Scale bottom_size{2, 2, 3, 1};
  shared_ptr<float> bottom_ptr(new float[bottom_size.Prod()], [](float* ptr) { delete[] ptr; });
  memcpy(bottom_ptr.get(), bottom_raw, bottom_size.Prod() * sizeof(float));

  ms.SetDevice(cpu_device);
  ImageBatch bottom = NArray::MakeNArray(bottom_size, bottom_ptr);
  NArray scale = NArray::Ones(bottom_size);
  int local_size = 3;
  element_t alpha = 0.3;
  element_t beta = 0.75;
  ImageBatch top = Convolution::LRNForward(bottom, scale, local_size, alpha, beta);
  auto top_ptr = top.Get();
  for (int i = 0; i < bottom_size.Prod(); ++i) {
    EXPECT_NEAR(top_ptr.get()[i], correct_raw[i], 0.001);
    //printf("%f,",top_ptr.get()[i]);
  }
}



TEST(LRNForward, CpuLarge) {
  float bottom_raw[] = {8.59232186e-01, -3.67248891e-01, -6.32162377e-01, -5.90879443e-01, 1.35450058e-01, 1.91089406e-01, 9.29029039e-01, 3.06354194e-01, 4.97813275e-01, 3.07139742e-01, 4.95429619e-01, 9.22613472e-01, -9.83223404e-01, -7.87111247e-01, -4.02592572e-01, 3.12822366e-01, 6.19625105e-01, 7.44351827e-01, 9.29295195e-01, 4.47370694e-01, 2.84950656e-01, 4.34907242e-01, -6.48019856e-02, -3.48830645e-01, -1.20710788e-01, 4.59378165e-01, 9.88029172e-01, 3.53747424e-01, 5.81645036e-01, -6.58171484e-01, -9.46301448e-01, 6.00740488e-01, 8.07445076e-01, -9.50647579e-01, -1.65053631e-02, 5.25103347e-02, 1.92732021e-01, -8.96084910e-01, 7.90179056e-01, 4.56532361e-01, 6.36700023e-01, 4.45505669e-04, 6.20378818e-01, -8.08062949e-01, -5.62099913e-01, -4.82561877e-01, -6.37884921e-02, -8.12535948e-02, 4.19019560e-01, -6.43893988e-01, 6.28997687e-02, -6.64515542e-01, 5.37627837e-01, 8.56341098e-01, 2.18987316e-01, -6.99633011e-01, -2.07465926e-02, -2.45310092e-01, 6.97202824e-01, 8.22194457e-01, -2.32302558e-01, -3.69008193e-01, 1.36788306e-01, -6.24363930e-01, -7.48316912e-01, 3.75191610e-01, 5.99213436e-01, 1.47073130e-01, 9.46459963e-01, 2.68108754e-01, 7.76843450e-01, -9.17048249e-03, -2.96766940e-01, 4.28460737e-01, 7.85823290e-03, -5.48724787e-01, -5.10051120e-01, 5.85601400e-01, -9.65517098e-03, 8.30187347e-01, 8.90743668e-01, 6.64644593e-02, -4.95014811e-01, 4.41724116e-01, -2.65122472e-01, -2.70311418e-03, -5.46849905e-01, -2.92868707e-01, 3.01703573e-01, -3.74134209e-01, 5.37470894e-01, 5.63674207e-01, 7.04818966e-01, 8.99811480e-01, -7.85354176e-01, 8.21450712e-01, -3.27889676e-01, 6.52760854e-01, 7.96201270e-01, -9.14569391e-01, -6.08410002e-01, -4.10997356e-01, 2.53999761e-01, -8.27553790e-01, -7.14109960e-01, 3.16530385e-02, 3.78682659e-01, 7.13251622e-01, 2.94723367e-01, 1.63237351e-01, 4.22231910e-01, -4.95166286e-01, 8.00319367e-01, -1.15412614e-01, -9.58958351e-01, 9.19322028e-01, 3.04450845e-01, 2.64125002e-02, 3.64712766e-01, -2.09192187e-02, 8.52980343e-01, 3.17595443e-02, -8.55680237e-01, 1.35016596e-01, 2.30486367e-01, 8.83092589e-01, -1.69273291e-01, -4.71120051e-01, -8.05213669e-01, -2.83115562e-02, -7.06742743e-02, -9.40481366e-01, 3.88554924e-01, 4.33894225e-01, 4.59622847e-01, -1.71297966e-01, -9.69802310e-01, 8.17950315e-01, 5.78757436e-01, -6.69601662e-01, -3.74428077e-01, 2.21890612e-01, -2.71019427e-01, -6.87922822e-01, -6.45392373e-01, 7.35779342e-01, -4.19810663e-01, 1.70359243e-01, -9.20102482e-02, -1.77643736e-01, 7.65268890e-01, 3.85416030e-01, -4.41453290e-01, -8.71119538e-01, -6.02752772e-01, 8.63365489e-01, 7.08827136e-01, 9.09469469e-01, -8.95493304e-01, 1.58943361e-01, -3.90074667e-02, -9.56582042e-01, -2.52759073e-01, -1.71816398e-01, 2.07814468e-01, 3.43497455e-01, 6.77731401e-01, 5.59052417e-01, -1.98597912e-01, 5.89058463e-01, 7.86248621e-01, -4.75020618e-01, 9.78394015e-01, 7.06614198e-01, 4.62954312e-01, -2.88868751e-01, 7.66578981e-01, 7.35918182e-01, 9.11532892e-01, -9.99785487e-01, -9.66917916e-01, -3.71859885e-01, 9.90632349e-01, -7.02311554e-01, -6.65245763e-01, 5.17144074e-01, -8.60940668e-01, 4.10946877e-01, -6.16694364e-02, -9.79623568e-01, 5.49647726e-01, 5.88402017e-01, -7.00861097e-01, -9.52592736e-01, 5.24127542e-01, -5.52659640e-01, -4.75651204e-01, -8.62609944e-02, -5.00146163e-01, 1.36567123e-01, 6.93885994e-01, -2.43800926e-01, -1.35069767e-01, 6.65238353e-01, -2.57736129e-01, -9.18893456e-01, 1.09342972e-01, -9.75075144e-02, 4.50601953e-01, -2.43098955e-01, 6.81324991e-01, -6.13706128e-02, 1.25286858e-01, 3.22398678e-01, -7.55162650e-02, 2.47273891e-01, -5.56238738e-01, 4.65726234e-01, -2.36635823e-01, -6.10330916e-01, -4.57674450e-01, -5.01549896e-01, -6.95721875e-01, 5.42747408e-01, -4.89176535e-01, -7.44913190e-01, 3.30334307e-01, -1.74390103e-01, 3.35535533e-01, 3.19627034e-01, -3.89244656e-01, -5.97551518e-01, -5.55945747e-01, -7.60058273e-01, -9.25709118e-01, -9.31736833e-01, -5.39006904e-01, -5.43292587e-01, 2.49821244e-01, 7.85122371e-01, 5.59456032e-01, 4.42902537e-01, -3.79115682e-01, -2.73833167e-01, -6.07836432e-01, 8.70983596e-01, 1.23468000e-01, 6.34583074e-01, -3.02172038e-01, 5.99428526e-01, -7.91791075e-01, 4.24240330e-01, 8.34896992e-01, 6.07170737e-01, -3.45773707e-01, -4.89785641e-01, -9.99565129e-03, -1.72778091e-01, -1.50125809e-01, -8.51243390e-01, 2.06781303e-01, 4.94399467e-01, 5.95152453e-01, -2.36998955e-01, 5.94316306e-01, -5.64052608e-02, 4.42798342e-01, -6.21574621e-01, -1.30808581e-01, 6.46936218e-01, 6.52545256e-01, -6.20949033e-01, -9.59795660e-01, 4.06982772e-01, -3.05459761e-01, -1.60992368e-01, 5.36177806e-01, 9.25756133e-01, 7.85130614e-01, -7.30115467e-01, 5.95609430e-01, 3.64181215e-01, 6.01057742e-02, 7.31963310e-01, 5.06496191e-01, -8.13594826e-01, -3.41121136e-01, -1.75274609e-01};


  float correct_raw[] = {0.804687,-0.352807,-0.613679,-0.558099,0.132409,0.180751,0.870221,0.293601,0.488741,0.303628,0.469878,0.829328,-0.914104,-0.745258,-0.397219,0.301848,0.579095,0.707779,0.852280,0.440071,0.265710,0.426583,-0.061997,-0.345679,-0.119790,0.446236,0.921359,0.342845,0.556834,-0.622289,-0.887343,0.557394,0.729693,-0.890648,-0.016208,0.051744,0.191194,-0.845652,0.739531,0.446712,0.613980,0.000441,0.590771,-0.753823,-0.530105,-0.447973,-0.060971,-0.077334,0.389545,-0.600474,0.058411,-0.593472,0.511833,0.800610,0.204220,-0.639705,-0.019640,-0.242487,0.654695,0.715508,-0.214704,-0.348739,0.133217,-0.592108,-0.670162,0.356424,0.518033,0.136305,0.877003,0.262964,0.736307,-0.009087,-0.279536,0.416172,0.006982,-0.531117,-0.486466,0.525409,-0.009036,0.758881,0.772381,0.062266,-0.485921,0.408956,-0.260098,-0.002518,-0.504498,-0.285958,0.272803,-0.352929,0.500095,0.510276,0.658309,0.832532,-0.746795,0.756816,-0.321096,0.614414,0.760118,-0.835684,-0.579966,-0.385214,0.251878,-0.761430,-0.687941,0.031509,0.361735,0.655803,0.291648,0.161272,0.416099,-0.472822,0.735082,-0.114097,-0.876207,0.863758,0.283670,0.026270,0.345783,-0.020918,0.804266,0.031327,-0.811509,0.131871,0.225215,0.815354,-0.168909,-0.441294,-0.727848,-0.028300,-0.069377,-0.870876,0.382229,0.427867,0.442782,-0.169834,-0.900961,0.771591,0.553077,-0.633538,-0.357483,0.208593,-0.257786,-0.634076,-0.604676,0.664779,-0.406150,0.166207,-0.090423,-0.177126,0.720558,0.380653,-0.420308,-0.821219,-0.586060,0.793655,0.680016,0.809922,-0.844455,0.158530,-0.038420,-0.892163,-0.243189,-0.171389,0.206901,0.337889,0.655017,0.543880,-0.193556,0.565315,0.748702,-0.454768,0.900678,0.669268,0.440099,-0.280941,0.722234,0.680677,0.852136,-0.928914,-0.897307,-0.365292,0.914023,-0.660615,-0.630052,0.486615,-0.770338,0.381634,-0.060342,-0.896510,0.535085,0.549209,-0.642860,-0.849774,0.501905,-0.536275,-0.455178,-0.081436,-0.470429,0.131007,0.656443,-0.224271,-0.125679,0.604250,-0.235695,-0.799450,0.102264,-0.095546,0.443807,-0.226266,0.654479,-0.058098,0.124340,0.311563,-0.071186,0.239591,-0.528641,0.446853,-0.222280,-0.568827,-0.420837,-0.461628,-0.642295,0.513605,-0.433500,-0.681382,0.306848,-0.161743,0.305438,0.295614,-0.344916,-0.542216,-0.513870,-0.708699,-0.828097,-0.835055,-0.517760,-0.476338,0.241174,0.731290,0.527924,0.409459,-0.367637,-0.266272,-0.582022,0.824077,0.121066,0.615241,-0.289809,0.581267,-0.755520,0.405454,0.790075,0.557210,-0.342402,-0.480820,-0.009846,-0.171634,-0.144869,-0.807520,0.205879,0.481863,0.579577,-0.234935,0.566396,-0.055492,0.434608,-0.588395,-0.128629,0.616220,0.611289,-0.591048,-0.883926,0.386290,-0.300903,-0.160316,0.520633,0.864297,0.742750,-0.684883,0.567580,0.345912,0.056497,0.663283,0.486662,-0.759690,-0.336618,-0.167222};

  auto& ms = MinervaSystem::Instance();
  Scale bottom_size{8, 6, 3, 2};
  shared_ptr<float> bottom_ptr(new float[bottom_size.Prod()], [](float* ptr) { delete[] ptr; });
  memcpy(bottom_ptr.get(), bottom_raw, bottom_size.Prod() * sizeof(float));

  ms.SetDevice(cpu_device);
  ImageBatch bottom = NArray::MakeNArray(bottom_size, bottom_ptr);
  NArray scale = NArray::Ones(bottom_size);
  int local_size = 3;
  element_t alpha = 0.3;
  element_t beta = 0.75;
  ImageBatch top = Convolution::LRNForward(bottom, scale, local_size, alpha, beta);
  auto top_ptr = top.Get();
  for (int i = 0; i < bottom_size.Prod(); ++i) {
    EXPECT_NEAR(top_ptr.get()[i], correct_raw[i], 0.001);
    //printf("%f,",top_ptr.get()[i]);
  }
}



TEST(LRNForward, CpuLocalSizeTooLong) {
  float bottom_raw[] = {5.25103347e-02, 1.92732021e-01, -8.96084910e-01, 7.90179056e-01, 4.56532361e-01, 6.36700023e-01, 4.45505669e-04,
		  	  	  	  -6.37884921e-02, -8.12535948e-02, 4.19019560e-01, -6.43893988e-01, 6.28997687e-02, -6.64515542e-01, 5.37627837e-01,
					  -2.45310092e-01, 6.97202824e-01, 8.22194457e-01, -2.32302558e-01, -3.69008193e-01, 1.36788306e-01, -6.24363930e-01,
					  9.46459963e-01, 2.68108754e-01, 7.76843450e-01, -9.17048249e-03, -2.96766940e-01, 4.28460737e-01, 7.85823290e-03,
					  8.30187347e-01, 8.90743668e-01, 6.64644593e-02, -4.95014811e-01, 4.41724116e-01, -2.65122472e-01, -2.70311418e-03,
					  5.37470894e-01, 5.63674207e-01, 7.04818966e-01, 8.99811480e-01, -7.85354176e-01, 8.21450712e-01, -3.27889676e-01,};


  float correct_raw[] = {0.051669,0.190396,-0.861355,0.744919,0.431750,0.605300,0.000438,-0.062592,-0.077700,0.394298,-0.608941,0.059348,-0.648129,0.520465,-0.229672,0.645767,0.764140,-0.218572,-0.000000,0.132422,-0.584563,0.000000,0.000000,0.730928,-0.000000,-0.287581,0.409651,0.000000,0.000000,0.847015,0.000000,-0.479745,0.422406,-0.000000,-0.000000,0.511139,0.000000,0.688452,0.861834,-0.000000,0.000000,-0.312269};


  auto& ms = MinervaSystem::Instance();
  Scale bottom_size{2, 3, 7, 1};
  shared_ptr<float> bottom_ptr(new float[bottom_size.Prod()], [](float* ptr) { delete[] ptr; });
  memcpy(bottom_ptr.get(), bottom_raw, bottom_size.Prod() * sizeof(float));

  ms.SetDevice(cpu_device);
  ImageBatch bottom = NArray::MakeNArray(bottom_size, bottom_ptr);
  NArray scale = NArray::Ones(bottom_size);
  int local_size = 8;
  element_t alpha = 0.3;
  element_t beta = 0.75;
  ImageBatch top = Convolution::LRNForward(bottom, scale, local_size, alpha, beta);
  auto top_ptr = top.Get();
  for (int i = 0; i < bottom_size.Prod(); ++i) {
    EXPECT_NEAR(top_ptr.get()[i], correct_raw[i], 0.001);
    //printf("%f,",top_ptr.get()[i]);
  }
}


TEST(LRNForward, CpuLong) {
  float bottom_raw[] = {5.25103347e-02, 1.92732021e-01, -8.96084910e-01, 7.90179056e-01, 4.56532361e-01, 6.36700023e-01, 4.45505669e-04, -6.37884921e-02, -8.12535948e-02, 4.19019560e-01, -6.43893988e-01, 6.28997687e-02, -6.64515542e-01, 5.37627837e-01, -2.45310092e-01, 6.97202824e-01, 8.22194457e-01, -2.32302558e-01, -3.69008193e-01, 1.36788306e-01, -6.24363930e-01, 9.46459963e-01, 2.68108754e-01, 7.76843450e-01, -9.17048249e-03, -2.96766940e-01, 4.28460737e-01, 7.85823290e-03, 8.30187347e-01, 8.90743668e-01, 6.64644593e-02, -4.95014811e-01, 4.41724116e-01, -2.65122472e-01, -2.70311418e-03, 5.37470894e-01, 5.63674207e-01, 7.04818966e-01, 8.99811480e-01, -7.85354176e-01, 8.21450712e-01, -3.27889676e-01, 5.59052417e-01, -1.98597912e-01, 5.89058463e-01, 7.86248621e-01, -4.75020618e-01, 9.78394015e-01, 7.06614198e-01, 9.11532892e-01, -9.99785487e-01, -9.66917916e-01, -3.71859885e-01, 9.90632349e-01, -7.02311554e-01, -6.65245763e-01, -9.79623568e-01, 5.49647726e-01, 5.88402017e-01, -7.00861097e-01, -9.52592736e-01, 5.24127542e-01, -5.52659640e-01, 6.93885994e-01, -2.43800926e-01, -1.35069767e-01, 6.65238353e-01, -2.57736129e-01, -9.18893456e-01, 1.09342972e-01, -6.13706128e-02, 1.25286858e-01, 3.22398678e-01, -7.55162650e-02, 2.47273891e-01, -5.56238738e-01, 4.65726234e-01, -6.95721875e-01, 5.42747408e-01, -4.89176535e-01, -7.44913190e-01, 3.30334307e-01, -1.74390103e-01, 3.35535533e-01, -6.26250490e-01, -4.07823970e-01, 5.97030118e-01, -4.10443414e-01, 3.94243187e-01, -4.54081542e-01, 8.25056903e-01, -2.81417189e-01, 3.64354606e-01, 8.42783940e-01, -7.10151312e-01, -8.00251230e-01, -1.76794447e-01, 9.50250742e-01, -3.67423692e-01, 2.20271553e-01, -5.97610574e-01, 3.83795433e-01, -5.10746058e-01, 3.60743392e-01, -2.81245422e-02, 6.82296085e-01, -6.07151251e-01, -3.38833141e-01, 8.93259770e-01, 1.21436991e-02, -1.93168283e-01, -9.45876923e-01, -3.31218962e-01, -8.64580115e-01, -9.92351503e-01, -9.18064393e-01, -3.02090269e-01, -8.16091378e-01, 4.06314529e-02, 5.24922383e-02, -1.20153861e-01, 3.23110491e-01, -7.30429651e-01, 5.75698010e-01, -7.24044598e-01, 2.65846595e-01, 5.78064850e-01, 3.24041516e-01, 4.23024858e-01, 7.75847324e-01, -7.16649418e-01, -7.04859753e-01, -3.48138314e-01, 2.32015221e-01, 9.16999718e-01, -4.17894767e-01, 3.73356925e-01, -9.15543539e-01, -8.74992737e-01, 6.28797391e-01, 6.70704305e-01, -6.64622476e-02, -1.57428024e-01, 1.41703106e-01, 4.78111913e-01, -8.89833183e-01, 2.48361298e-01, 1.71500734e-01, -1.03241151e-01, -2.92539465e-01, 8.67050469e-01, -4.65488136e-01, -4.37401239e-01, 9.81192729e-03, 1.76624177e-01, 4.63404565e-01, -6.48977854e-01, 2.10775692e-02, 5.69191679e-04, 7.85535264e-01, -2.34634585e-01, 8.96057273e-01, -3.05549564e-01, 3.67786398e-01, 6.49269763e-01, -2.74940115e-02, 9.68351743e-01, 2.07628076e-01, 1.85028318e-01, -3.49798716e-01, 8.73610682e-01, -8.08034049e-01, 7.66591492e-01, 1.36035466e-01, -8.76153051e-01, -9.42090961e-01, 2.54198007e-01, 2.09278522e-01, -8.43584950e-01, 5.45907125e-01, -7.13366751e-01, -7.26307843e-02, 4.97412749e-01, 7.79227666e-01, -2.41219689e-01, -4.15127476e-01, 1.85804799e-02, 6.56272008e-02, -7.89156759e-01, 5.95946891e-01, -5.11510156e-01, 6.07075484e-01, -4.03649869e-01, -6.54580737e-02, 8.65639316e-01, 8.19513569e-01, 2.93617672e-01, -3.35847054e-01, -7.71555326e-01, 1.42208982e-01, -3.96017041e-01, -6.12988788e-01, 1.29411384e-01, -1.88205315e-01, 3.31118167e-01, -6.05975908e-01, -5.16439080e-01, 2.46344907e-01, 5.97476702e-01, 8.92727341e-02, 8.77082477e-01, 4.78201578e-01, -9.46106323e-01, -2.35208227e-01, -9.78947208e-01, -8.69535860e-01, 3.62785391e-01, 7.88573716e-01, 4.13573947e-01, -4.22013528e-02, -5.68775015e-01, -8.36467872e-01, 3.46404408e-01, 9.89558378e-01, 8.96711938e-02, 9.67284551e-01, 4.71404282e-01, -8.13833601e-01, -4.15551966e-01, -4.53903666e-01, -8.57667173e-01, -5.76563967e-01, -4.14422920e-01, -2.87165417e-01, 9.12734981e-01, 3.20487724e-01, 9.01024809e-01, -8.06264818e-01, -4.12511687e-01, 2.99419879e-01, -1.58010723e-01, -8.50696651e-01, 4.77613710e-01, 1.70740085e-01, -3.10658805e-01, -4.22856328e-01, -4.71636816e-01, -4.46162130e-01, 6.84712020e-01, -6.60755426e-01, -4.95826747e-01, 1.83750401e-01};
  float correct_raw[] = {0.050478,0.185649,-0.868895,0.765088,0.437247,0.609273,0.000431,-0.061133,-0.077411,0.397471,-0.616222,0.059689,-0.632168,0.504794,-0.233546,0.658564,0.774363,-0.217437,-0.350037,0.128550,-0.582559,0.883393,0.253513,0.726436,-0.008551,-0.276940,0.403274,0.007343,0.767498,0.831132,0.062555,-0.462504,0.407939,-0.247365,-0.002543,0.500581,0.519422,0.654366,0.843771,-0.729664,0.752772,-0.304195,0.528456,-0.185484,0.538818,0.731212,-0.447360,0.912250,0.645389,0.847461,-0.938973,-0.900855,-0.340689,0.917060,-0.656578,-0.618817,-0.903344,0.504485,0.550093,-0.651748,-0.878708,0.484707,-0.515676,0.648398,-0.224890,-0.124435,0.619545,-0.240557,-0.846687,0.101547,-0.057136,0.116162,0.297321,-0.069652,0.227920,-0.512841,0.430485,-0.640602,0.504386,-0.453827,-0.693187,0.304172,-0.161700,0.310367,-0.581711,-0.377610,0.552974,-0.382970,0.367405,-0.421421,0.767968,-0.263766,0.339610,0.789636,-0.658674,-0.752139,-0.166186,0.885434,-0.339343,0.207234,-0.564430,0.358610,-0.473055,0.341025,-0.026516,0.632500,-0.564531,-0.320436,0.849556,0.011249,-0.178249,-0.892647,-0.314724,-0.800927,-0.915985,-0.867255,-0.286432,-0.759744,0.037617,0.049393,-0.114526,0.298684,-0.675802,0.541577,-0.689918,0.246162,0.531701,0.305233,0.403603,0.719013,-0.658624,-0.660017,-0.330567,0.216544,0.840528,-0.390315,0.354388,-0.862103,-0.797423,0.585798,0.635617,-0.062675,-0.143491,0.131372,0.452828,-0.841700,0.227206,0.159176,-0.097961,-0.275694,0.791423,-0.434366,-0.414799,0.009319,0.161598,0.433183,-0.615475,0.020136,0.000518,0.734173,-0.222190,0.853569,-0.279340,0.344789,0.617515,-0.026109,0.885884,0.194734,0.175650,-0.334261,0.797176,-0.759960,0.721880,0.129991,-0.798562,-0.880737,0.239391,0.200439,-0.773455,0.512431,-0.672696,-0.069054,0.455626,0.724272,-0.227991,-0.394086,0.016992,0.060608,-0.744619,0.565027,-0.467864,0.559988,-0.380947,-0.062008,0.785492,0.756806,0.275981,-0.316001,-0.698944,0.132032,-0.372346,-0.577240,0.117077,-0.174927,0.312379,-0.569584,-0.470533,0.228600,0.561127,0.083639,0.803252,0.446575,-0.893987,-0.220408,-0.903490,-0.819508,0.343031,0.739287,0.384465,-0.039897,-0.540680,-0.784231,0.322839,0.941498,0.085294,0.908495,0.439336,-0.774343,-0.397878,-0.427890,-0.801472,-0.550725,-0.397485,-0.270719,0.859560,0.308319,0.864992,-0.760983,-0.390898,0.288113,-0.151946,-0.806076,0.452669,0.164355,-0.299085,-0.402224,-0.448257,-0.429756,0.661730,-0.628568,-0.475095,0.177428};


  auto& ms = MinervaSystem::Instance();
  Scale bottom_size{2, 2, 63, 1};
  shared_ptr<float> bottom_ptr(new float[bottom_size.Prod()], [](float* ptr) { delete[] ptr; });
  memcpy(bottom_ptr.get(), bottom_raw, bottom_size.Prod() * sizeof(float));

  ms.SetDevice(cpu_device);
  ImageBatch bottom = NArray::MakeNArray(bottom_size, bottom_ptr);
  NArray scale = NArray::Ones(bottom_size);
  int local_size = 20;
  element_t alpha = 0.3;
  element_t beta = 0.75;
  ImageBatch top = Convolution::LRNForward(bottom, scale, local_size, alpha, beta);
  auto top_ptr = top.Get();
  for (int i = 0; i < bottom_size.Prod(); ++i) {
    EXPECT_NEAR(top_ptr.get()[i], correct_raw[i], 0.001);
    //printf("%f,",top_ptr.get()[i]);
  }
}
