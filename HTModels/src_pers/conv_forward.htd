	
#define FIXED_POINT_FRACTION_WIDTH_N 16


/*****************
 * 	TASKS
 *****************/
#define CONV_FORWARD 1
#define CONV_BACKWARD_DATA 2
#define CONV_BACKWARD_BIAS 3
#define CONV_BACKWARD_FILTER 4

/******************
 * Memory Indicators
 ******************/
#define GLOBAL_FILTER_MEM 1
#define GLOBAL_SAMPLE_MEM 2

typedef ht_uint48 MemAddr_t;
typedef uint16_t element_t;






/*////////////////////////////////////////////////////
// Top-level control module
*******************************************/
dsnInfo.AddModule(name=ctl, htIdW=0);

ctl.AddInstr(name=CTL_ENTRY);
ctl.AddInstr(name=CTL_RTN);

ctl.AddPrivate()
	.AddVar(type=uint32_t, name=task)
	.AddVar(type=uint32_t, name=rank)
	.AddVar(type=uint32_t, name=rankStride)
	;

ctl.AddGlobal()
	.AddVar(type=uint16_t, name=fractionW)
	;

ctl.AddEntry(func=htmain, instr=CTL_ENTRY, host=true)
	.AddParam(type=uint32_t, name=rank)
	.AddParam(type=uint32_t, name=rankStride)
	.AddParam(type=uint32_t, name=task)
	;

ctl.AddReturn(func=htmain)
	;

//ctl.AddCall(func=conv_fwd);
ctl.AddCall(func=conv_load_filter_applications);
ctl.AddCall(func=conv_back_bias);
//ctl.AddCall(func=load_filters);



/*********************************
 * Convolution Backward Bias
 *********************************/
dsnInfo.AddModule(name=convbackbias, htIdW=0);

convbackbias.AddInstr(name=CONVBACKBIAS_ENTRY);
convbackbias.AddInstr(name=CONVBACKBIAS_INIT_BIAS_READ);
convbackbias.AddInstr(name=CONVBACKBIAS_INIT_BIAS_READ_STORE);
convbackbias.AddInstr(name=CONVBACKBIAS_TOP_TEST);
convbackbias.AddInstr(name=CONVBACKBIAS_TOP_READ);
convbackbias.AddInstr(name=CONVBACKBIAS_TOP_READ_STORE);\
convbackbias.AddInstr(name=CONVBACKBIAS_BIAS_TEST);
convbackbias.AddInstr(name=CONVBACKBIAS_BIAS_WRITE_PREP);
convbackbias.AddInstr(name=CONVBACKBIAS_BIAS_WRITE);
convbackbias.AddInstr(name=CONVBACKBIAS_BIAS_READ);
convbackbias.AddInstr(name=CONVBACKBIAS_BIAS_READ_STORE);
convbackbias.AddInstr(name=CONVBACKBIAS_TOP_ELEMENT_TEST);
convbackbias.AddInstr(name=CONVBACKBIAS_BIAS_ELEMENT_TEST);
convbackbias.AddInstr(name=CONVBACKBIAS_APPLY);
convbackbias.AddInstr(name=CONVBACKBIAS_INCREMENT);
convbackbias.AddInstr(name=CONVBACKBIAS_RTN);

convbackbias.AddHostMsg(dir=in, name=TOP_ADDR)
	.AddDst(var=top_addr)
	;
convbackbias.AddHostMsg(dir=in, name=BIAS_ADDR)
	.AddDst(var=bias_addr)
	;
convbackbias.AddHostMsg(dir=in, name=CHANNELS)
	.AddDst(var=channels)
	;
convbackbias.AddHostMsg(dir=in, name=CHANNEL_STRIDE)
	.AddDst(var=channel_stride)
	;
convbackbias.AddHostMsg(dir=in, name=SIZE)
	.AddDst(var=size)
	;

convbackbias.AddPrivate()
	.AddVar(type=MemAddr_t, name=bias_cache_addr)
	.AddVar(type=uint64_t, name=top_data_raw)
	.AddVar(type=uint64_t, name=bias_diff_raw)
	.AddVar(type=uint32_t, name=top_idx)
	.AddVar(type=uint32_t, name=top_element_idx)
	.AddVar(type=uint32_t, name=top_channel_idx)
	.AddVar(type=uint32_t, name=bias_idx)
	.AddVar(type=uint32_t, name=bias_element_idx)
	.AddVar(type=element_t, name=bias_diff, dimen1=4)
	.AddVar(type=element_t, name=top_data, dimen1=4)
	;


convbackbias.AddShared()
	.AddVar(type=MemAddr_t, name=top_addr)
	.AddVar(type=MemAddr_t, name=bias_addr)
	.AddVar(type=uint32_t, name=channels)
	.AddVar(type=uint32_t, name=channel_stride)
	.AddVar(type=uint32_t, name=size)
	;

convbackbias.AddReadMem()
	.AddDst(var=top_data_raw, name=top_data_raw)
	.AddDst(var=bias_diff_raw, name=bias_diff_raw)
	;

convbackbias.AddWriteMem()
		;

convbackbias.AddEntry(func=conv_back_bias, instr=CONVBACKBIAS_ENTRY)
	;

convbackbias.AddReturn(func=conv_back_bias)
	;


/*********************************
 * Iterate through and Load Filters into global cache
 *********************************/
dsnInfo.AddModule(name=loadfilters, htIdW=0);

loadfilters.AddInstr(name=LOADFILTERS_ENTRY);
loadfilters.AddInstr(name=LOADFILTERS_READ);
loadfilters.AddInstr(name=LOADFILTERS_STORE);
loadfilters.AddInstr(name=LOADFILTERS_RAW_IDX_TEST);
loadfilters.AddInstr(name=LOADFILTERS_FILTER_ADDR_TEST);
loadfilters.AddInstr(name=LOADFILTERS_DISPATCH);
loadfilters.AddInstr(name=LOADFILTERS_JOIN);\
loadfilters.AddInstr(name=LOADFILTERS_ITER_TEST);
loadfilters.AddInstr(name=LOADFILTERS_RTN);


loadfilters.AddHostMsg(dir=in, name=FILTER_ADDR)
	.AddDst(var=filter_addr)
	;
loadfilters.AddHostMsg(dir=in, name=FILTER_DIM)
	.AddDst(var=filter_dim)
	;
loadfilters.AddHostMsg(dir=in, name=NUM_FILTERS)
	.AddDst(var=num_filters)
	;
loadfilters.AddHostMsg(dir=in, name=BOTTOM_CHANNELS)
	.AddDst(var=bottom_channels)
	;

loadfilters.AddPrivate()
	.AddVar(type=uint32_t, name=filter_addr_offset)
	.AddVar(type=uint64_t, name=filter_raw)
	.AddVar(type=uint8_t, name=filter_raw_idx)
	.AddVar(type=uint16_t, name=i_f)
	.AddVar(type=uint8_t, name=task)
	.AddVar(type=uint32_t, name=DS_f)
	.AddVar(type=uint32_t, name=global_idx)
	;


loadfilters.AddShared()
	.AddVar(type=MemAddr_t, name=filter_addr)
	.AddVar(type=MemAddr_t, name=filter_dim)
	.AddVar(type=uint16_t, name=num_filters)
	.AddVar(type=uint32_t, name=bottom_channels)
	;


loadfilters.AddReadMem()
	.AddDst(var=filter_raw, name=filter_raw)
	;

loadfilters.AddWriteMem()
		;

loadfilters.AddCall(func=read_to_global_filter);

loadfilters.AddEntry(func=load_filters, instr=LOADFILTERS_ENTRY)
		.AddParam(type=uint8_t, name=task)
	;

loadfilters.AddReturn(func=load_filters)
	;




/*********************************
 * Iterates through regions of bottom data where a filter would be applied
 * For each such region the data is cached and a task module called.
 *********************************/
dsnInfo.AddModule(name=loadregions, htIdW=0);


loadregions.AddInstr(name=LOADREGIONS_ENTRY);
loadregions.AddInstr(name=LOADREGIONS_INIT);
loadregions.AddInstr(name=LOADREGIONS_LOAD_ROW);
loadregions.AddInstr(name=LOADREGIONS_TEST_Y_F);
loadregions.AddInstr(name=LOADREGIONS_TEST_I_C);
loadregions.AddInstr(name=LOADREGIONS_JOIN);
loadregions.AddInstr(name=LOADREGIONS_WAIT);
loadregions.AddInstr(name=LOADREGIONS_CALL_KERNEL);
loadregions.AddInstr(name=LOADREGIONS_TEST_X_S);
loadregions.AddInstr(name=LOADREGIONS_TEST_Y_S);
loadregions.AddInstr(name=LOADREGIONS_NEXT_SAMPLE);
loadregions.AddInstr(name=LOADREGIONS_RTN);


loadregions.AddHostMsg(dir=in, name=BOTTOM_DIM)
	.AddDst(var=d_s)
	;
loadregions.AddHostMsg(dir=in, name=BOTTOM_CHANNELS)
	.AddDst(var=d_c)
	;
loadregions.AddHostMsg(dir=in, name=FILTER_DIM)
	.AddDst(var=d_f)
	;
loadregions.AddHostMsg(dir=in, name=STRIDE_X)
	.AddDst(var=s_x)
	;
loadregions.AddHostMsg(dir=in, name=STRIDE_Y)
	.AddDst(var=s_y)
	;
loadregions.AddHostMsg(dir=in, name=PAD_X)
	.AddDst(var=p_x)
	;
loadregions.AddHostMsg(dir=in, name=PAD_Y)
	.AddDst(var=p_y)
	;
loadregions.AddHostMsg(dir=in, name=BOTTOM_SAMPLES)
	.AddDst(var=bottom_samples)
	;

loadregions.AddPrivate()
	.AddVar(type=uint32_t, name=sample_idx)
	.AddVar(type=uint16_t, name=rank)
	.AddVar(type=uint16_t, name=rankStride)
	.AddVar(type=uint8_t, name=task)
	.AddVar(type=int16_t, name=x_s)
	.AddVar(type=int16_t, name=y_s)
	.AddVar(type=uint8_t, name=y_f)
	.AddVar(type=uint16_t, name=i_c)
	.AddVar(type=bool, name=in_sample)
	;


loadregions.AddShared()
	.AddVar(type=uint16_t, name=d_s)
	.AddVar(type=uint16_t, name=d_c)
	.AddVar(type=uint8_t, name=d_f)
	.AddVar(type=uint8_t, name=s_x)
	.AddVar(type=uint8_t, name=s_y)
	.AddVar(type=uint8_t, name=p_x)
	.AddVar(type=uint8_t, name=p_y)
	.AddVar(type=uint16_t, name=bottom_samples)
	;



loadregions.AddCall(func=load_filter_application_row, fork=true);
loadregions.AddCall(func=load_filters);

loadregions.AddEntry(func=conv_load_filter_applications, instr=LOADREGIONS_ENTRY)
		.AddParam(type=uint16_t, name=rank)
		.AddParam(type=uint16_t, name=rankStride)
		.AddParam(type=bool, name=in_sample)
		.AddParam(type=uint8_t, name=task)
	;

loadregions.AddReturn(func=conv_load_filter_applications)
	;




/*********************************
 * Load one row of a filter application area from the bottom
 * Includes 0 padding if needed.
 *********************************/
dsnInfo.AddModule(name=loadfilterapplicationrow, htIdW=0);


loadfilterapplicationrow.AddInstr(name=CONVLOADFILTERAPPLICATIONROW_ENTRY);
loadfilterapplicationrow.AddInstr(name=CONVLOADFILTERAPPLICATIONROW_TEST_X_S);
loadfilterapplicationrow.AddInstr(name=CONVLOADFILTERAPPLICATIONROW_PAD);
loadfilterapplicationrow.AddInstr(name=CONVLOADFILTERAPPLICATIONROW_COMPUTE_ADDR);
loadfilterapplicationrow.AddInstr(name=CONVLOADFILTERAPPLICATIONROW_READ);
loadfilterapplicationrow.AddInstr(name=CONVLOADFILTERAPPLICATIONROW_RTN);

loadfilterapplicationrow.AddHostMsg(dir=in, name=BOTTOM_ADDR)
	.AddDst(var=bottom_addr)
	;
loadfilterapplicationrow.AddHostMsg(dir=in, name=BOTTOM_DIM)
	.AddDst(var=d_s)
	;
loadfilterapplicationrow.AddHostMsg(dir=in, name=FILTER_DIM)
	.AddDst(var=d_f)
	;
loadfilterapplicationrow.AddHostMsg(dir=in, name=DATA_STRIDE_S)
	.AddDst(var=DS_s)
	;
loadfilterapplicationrow.AddHostMsg(dir=in, name=DATA_STRIDE_C)
	.AddDst(var=DS_c)
	;
loadfilterapplicationrow.AddHostMsg(dir=in, name=DATA_STRIDE_Y)
	.AddDst(var=DS_y)
	;

loadfilterapplicationrow.AddPrivate()
	.AddVar(type=MemAddr_t, name=bottom_addr_offset)
	.AddVar(type=uint16_t, name=i_s)
	.AddVar(type=uint16_t, name=c_s)
	.AddVar(type=int16_t, name=y_s)
	.AddVar(type=int16_t, name=x_s)
	.AddVar(type=uint8_t, name=y_f)
	.AddVar(type=uint8_t, name=x_f)
	.AddVar(type=uint32_t, name=read_size)
	.AddVar(type=ht_uint11, name=g_addr1)
	.AddVar(type=ht_uint9, name=g_addr2)
	;

loadfilterapplicationrow.AddShared()
	.AddVar(type=MemAddr_t, name=bottom_addr)
	.AddVar(type=uint8_t, name=d_f)
	.AddVar(type=uint16_t, name=d_s)
	.AddVar(type=uint32_t, name=DS_s)
	.AddVar(type=uint32_t, name=DS_c)
	.AddVar(type=uint32_t, name=DS_y)
	;

// dimensions: (x*y, c)
loadfilterapplicationrow.AddGlobal()
	.AddVar(type=uint16_t, name=bottom_data, addr1W=11, addr2W=9, addr1=g_addr1, addr2=g_addr2)
	;

loadfilterapplicationrow.AddCall(func=read_to_global);

loadfilterapplicationrow.AddEntry(func=load_filter_application_row, instr=CONVLOADFILTERAPPLICATIONROW_ENTRY)
	.AddParam(type=uint16_t, name=i_s)
	.AddParam(type=uint16_t, name=c_s)
	.AddParam(type=int16_t, name=y_s)
	.AddParam(type=int16_t, name=x_s)
	.AddParam(type=uint8_t, name=y_f)
	;

loadfilterapplicationrow.AddReturn(func=load_filter_application_row);



/*********************************
 * read n bytes into global cache
 *********************************/
dsnInfo.AddModule(name=readtoglobal, htIdW=0);


readtoglobal.AddInstr(name=READTOGLOBAL_ENTRY);
readtoglobal.AddInstr(name=READTOGLOBAL_READ);
readtoglobal.AddInstr(name=READTOGLOBAL_STORE);
readtoglobal.AddInstr(name=READTOGLOBAL_READ_IDX_TEST);
readtoglobal.AddInstr(name=READTOGLOBAL_FILTER_RAW_IDX_TEST);
readtoglobal.AddInstr(name=READTOGLOBAL_RTN);


readtoglobal.AddPrivate()
	.AddVar(type=MemAddr_t, name=data_addr)
	.AddVar(type=MemAddr_t, name=data_addr_offset)
	.AddVar(type=uint64_t, name=data_raw)
	.AddVar(type=uint8_t, name=data_raw_idx)
	.AddVar(type=uint16_t, name=global_idx)
	.AddVar(type=uint16_t, name=elements)
	.AddVar(type=uint16_t, name=i_c)
	.AddVar(type=uint8_t, name=which_mem)
	.AddVar(type=ht_uint11, name=gb_addr1)
	.AddVar(type=ht_uint9, name=gb_addr2)
	.AddVar(type=ht_uint7, name=gf_addr1)
	.AddVar(type=ht_uint9, name=gf_addr2)
	;


readtoglobal.AddGlobal()
	.AddVar(type=uint16_t, name=bottom_data, addr1W=11, addr2W=9, addr1=gb_addr1, addr2=gb_addr2)
	.AddVar(type=uint16_t, name=filter_data, addr1W=7, addr2W=9, addr1=gf_addr1, addr2=gf_addr2)
	;

readtoglobal.AddReadMem()
	.AddDst(var=data_raw, name=data_raw)
	;

readtoglobal.AddWriteMem()
		;

readtoglobal.AddEntry(func=read_to_global, instr=READTOGLOBAL_ENTRY)
		.AddParam(type=uint8_t, name=which_mem)
		.AddParam(type=MemAddr_t, name=data_addr)
		.AddParam(type=uint16_t, name=elements)
		.AddParam(type=uint16_t, name=global_idx)
		.AddParam(type=uint16_t, name=i_c)
	;

readtoglobal.AddReturn(func=read_to_global)
	;

readtoglobal.AddEntry(func=read_to_global_filter, instr=READTOGLOBAL_ENTRY)
		.AddParam(type=uint8_t, name=which_mem)
		.AddParam(type=MemAddr_t, name=data_addr)
		.AddParam(type=uint16_t, name=elements)
		.AddParam(type=uint16_t, name=global_idx)
		.AddParam(type=uint16_t, name=i_c)
	;

readtoglobal.AddReturn(func=read_to_global_filter)
	;




/*********************************
 * Convolution Backward Data
 *********************************/
/*
dsnInfo.AddModule(name=convbackdata, htIdW=0);

convbackdata.AddInstr(name=CONVBACKDATA_ENTRY);
convbackdata.AddInstr(name=CONVBACKDATA_INIT_BIAS_READ);
convbackdata.AddInstr(name=CONVBACKDATA_INIT_BIAS_READ_STORE);
convbackdata.AddInstr(name=CONVBACKDATA_TOP_TEST);
convbackdata.AddInstr(name=CONVBACKDATA_TOP_READ);
convbackdata.AddInstr(name=CONVBACKDATA_TOP_READ_STORE);\
convbackdata.AddInstr(name=CONVBACKDATA_BIAS_TEST);
convbackdata.AddInstr(name=CONVBACKDATA_BIAS_WRITE_PREP);
convbackdata.AddInstr(name=CONVBACKDATA_BIAS_WRITE);
convbackdata.AddInstr(name=CONVBACKDATA_BIAS_READ);
convbackdata.AddInstr(name=CONVBACKDATA_BIAS_READ_STORE);
convbackdata.AddInstr(name=CONVBACKDATA_TOP_ELEMENT_TEST);
convbackdata.AddInstr(name=CONVBACKDATA_BIAS_ELEMENT_TEST);
convbackdata.AddInstr(name=CONVBACKDATA_APPLY);
convbackdata.AddInstr(name=CONVBACKDATA_INCREMENT);
convbackdata.AddInstr(name=CONVBACKDATA_RTN);

convbackdata.AddHostMsg(dir=in, name=TOP_ADDR)
	.AddDst(var=top_addr)
	;
convbackdata.AddHostMsg(dir=in, name=BOTTOM_ADDR)
	.AddDst(var=bottom_addr)
	;
convbackdata.AddHostMsg(dir=in, name=CHANNELS)
	.AddDst(var=channels)
	;
convbackdata.AddHostMsg(dir=in, name=CHANNEL_STRIDE)
	.AddDst(var=channel_stride)
	;
convbackdata.AddHostMsg(dir=in, name=SIZE)
	.AddDst(var=size)
	;


convbackdata.AddPrivate()
	.AddVar(type=MemAddr_t, name=bias_cache_addr)
	.AddVar(type=uint64_t, name=top_data_raw)
	.AddVar(type=uint64_t, name=bias_diff_raw)
	.AddVar(type=uint32_t, name=top_idx)
	.AddVar(type=uint32_t, name=top_element_idx)
	.AddVar(type=uint32_t, name=top_channel_idx)
	.AddVar(type=uint32_t, name=bias_idx)
	.AddVar(type=uint32_t, name=bias_element_idx)
	.AddVar(type=uint32_t, name=i)
	.AddVar(type=uint32_t, name=j)
	.AddVar(type=element_t, name=bias_diff, dimen1=4)
	.AddVar(type=element_t, name=top_data, dimen1=4)
	;


convbackdata.AddShared()
	.AddVar(type=MemAddr_t, name=top_addr)
	.AddVar(type=MemAddr_t, name=bottom_addr)
	.AddVar(type=uint32_t, name=channels)
	.AddVar(type=uint32_t, name=channel_stride)
	.AddVar(type=uint32_t, name=size)
	;

convbackdata.AddReadMem()
	.AddDst(var=top_data_raw, name=top_data_raw)
	.AddDst(var=bias_diff_raw, name=bias_diff_raw)
	;

convbackdata.AddWriteMem()
		;

convbackdata.AddEntry(func=conv_back_data, instr=CONVBACKDATA_ENTRY)
	.AddParam(type=uint32_t, name=i)
	.AddParam(type=uint32_t, name=j)
	;

convbackdata.AddReturn(func=conv_back_data)
	;




/***********************************
 * Convolution Forward control
 ************************************/
/*
dsnInfo.AddModule(name=convfwd, htIdW=0);

convfwd.AddInstr(name=CONVFWD_ENTRY);
convfwd.AddInstr(name=CONVFWD_CHECK_I);
convfwd.AddInstr(name=CONVFWD_CHECK_Y);
convfwd.AddInstr(name=CONVFWD_CHECK_X);
convfwd.AddInstr(name=CONVFWD_CHECK_F);
convfwd.AddInstr(name=CONVFWD_COLLECT);
convfwd.AddInstr(name=CONVFWD_COMPUTE);
convfwd.AddInstr(name=CONVFWD_JOIN);
convfwd.AddInstr(name=CONVFWD_RTN);

convfwd.AddHostMsg(dir=in, name=IMG_ADDR)
	.AddDst(var=imgAddr)
	;
convfwd.AddHostMsg(dir=in, name=IMG_NUM)
	.AddDst(var=img_num)
	;
convfwd.AddHostMsg(dir=in, name=IMG_DIM)
	.AddDst(var=img_dim)
	;
convfwd.AddHostMsg(dir=in, name=IMG_CHANNELS)
	.AddDst(var=img_channels)
	;
convfwd.AddHostMsg(dir=in, name=FILTER_ADDR)
	.AddDst(var=filterAddr)
	;
convfwd.AddHostMsg(dir=in, name=FILTER_NUM)
	.AddDst(var=filter_num)
	;
convfwd.AddHostMsg(dir=in, name=FILTER_DIM)
	.AddDst(var=filter_dim)
	;
convfwd.AddHostMsg(dir=in, name=STRIDE)
	.AddDst(var=stride)
	;
convfwd.AddHostMsg(dir=in, name=OUT_ADDR)
	.AddDst(var=outAddr)
	;
convfwd.AddHostMsg(dir=in, name=FRACTION_WIDTH)
	.AddDst(var=fractionW)
	;



//All in units of image pixels(ignores # channels)
convfwd.AddPrivate()
	.AddVar(type=uint32_t, name=rank)
	.AddVar(type=uint32_t, name=applicationIdx_F)
	.AddVar(type=uint32_t, name=applicationIdx_X)
	.AddVar(type=uint32_t, name=applicationIdx_Y)
	.AddVar(type=uint32_t, name=applicationIdx_I)
	.AddVar(type=uint32_t, name=rankStride)
	.AddVar(type=MemAddr_t, name=Addresses, dimen1=8)
	.AddVar(type=ht_uint2,  name=count)
	.AddVar(type=MemAddr_t,  name=outAddrOffset)
	;

convfwd.AddShared()
	.AddVar(type=MemAddr_t, name=imgAddr)
	.AddVar(type=uint32_t, name=img_num)
	.AddVar(type=uint32_t, name=img_dim)
	.AddVar(type=uint32_t, name=img_channels)
	.AddVar(type=MemAddr_t, name=filterAddr)
	.AddVar(type=uint32_t, name=filter_num)
	.AddVar(type=uint32_t, name=filter_dim)
	.AddVar(type=uint32_t, name=stride)
	.AddVar(type=MemAddr_t, name=outAddr)
	.AddVar(type=uint16_t, name=fractionW)
	.AddVar(type=uint32_t, name=dCoordinates)
	.AddVar(type=uint32_t, name=dimY)
	.AddVar(type=uint32_t, name=dimX)
	.AddVar(type=uint32_t, name=dimF)
	;


convfwd.AddGlobal()
		.AddVar(type=uint16_t, name=fractionW)
		;

convfwd.AddEntry(func=conv_fwd, instr=CONVFWD_ENTRY)
	.AddParam(type=uint32_t, name=rank)
	.AddParam(type=uint32_t, name=rankStride)
	;

convfwd.AddReturn(func=conv_fwd)
	;

convfwd.AddCall(func=cluster, fork=true);

////////////////////////////////////////////////////
// Scatters a group of 4 filter applications to seperate threads
// Gathers the resulting activations and merges them into a single quad-word write.
//#define CLUSTER_HTID_W 9
#define CLUSTER_HTID_W 1

dsnInfo.AddModule(name=cluster, htIdW=CLUSTER_HTID_W);

cluster.AddInstr(name=SG_FILTER_GROUP_INIT);
cluster.AddInstr(name=SG_FILTER_GROUP_DISPATCH);
cluster.AddInstr(name=SG_FILTER_GROUP_MERGE);
cluster.AddInstr(name=SG_FILTER_GROUP_WRITE);
cluster.AddInstr(name=SG_FILTER_GROUP_RTN);


cluster.AddPrivate()
		.AddVar(type=MemAddr_t, name=img_Addr1)
		.AddVar(type=MemAddr_t, name=filter_Addr1)
		.AddVar(type=MemAddr_t, name=img_Addr2)
		.AddVar(type=MemAddr_t, name=filter_Addr2)
		.AddVar(type=MemAddr_t, name=img_Addr3)
		.AddVar(type=MemAddr_t, name=filter_Addr3)
		.AddVar(type=MemAddr_t, name=img_Addr4)
		.AddVar(type=MemAddr_t, name=filter_Addr4)
		.AddVar(type=uint64_t, name=activation_group)
		.AddVar(type=MemAddr_t, name=out_Addr)
		.AddVar(type=ht_uint3, name=out_index)
		.AddVar(type=ht_uint3, name=idx)
		.AddVar(type=int16_t, name=accum)
		;


cluster.AddEntry(func=cluster, instr=SG_FILTER_GROUP_INIT)
		.AddParam(type=MemAddr_t, name=img_Addr1)
		.AddParam(type=MemAddr_t, name=filter_Addr1)
		.AddParam(type=MemAddr_t, name=img_Addr2)
		.AddParam(type=MemAddr_t, name=filter_Addr2)
		.AddParam(type=MemAddr_t, name=img_Addr3)
		.AddParam(type=MemAddr_t, name=filter_Addr3)
		.AddParam(type=MemAddr_t, name=img_Addr4)
		.AddParam(type=MemAddr_t, name=filter_Addr4)
		.AddParam(type=MemAddr_t, name=out_Addr)
	;

cluster.AddReturn(func=cluster)
		;

cluster.AddCall(func=applyfilter, fork=true)
		;

cluster.AddWriteMem()
		;

////////////////////////////////////////////////////
// Loads vector elements from op array, rectifies , stores results
//#define APPLYFILTER_HTID_W 9
#define APPLYFILTER_HTID_W 1

dsnInfo.AddModule(name=applyfilter, htIdW=APPLYFILTER_HTID_W);

applyfilter.AddInstr(name=CONV_INIT);
applyfilter.AddInstr(name=CONV_LOOP_TOP);
applyfilter.AddInstr(name=CONV_LD_IMG_SAMPLE);
applyfilter.AddInstr(name=CONV_LD_FILTER_SAMPLE);
applyfilter.AddInstr(name=CONV_APPLY);
applyfilter.AddInstr(name=CONV_LOOP_BRANCH);
applyfilter.AddInstr(name=CONV_LD_OUT);
applyfilter.AddInstr(name=CONV_PACK);
applyfilter.AddInstr(name=CONV_WRITE);
applyfilter.AddInstr(name=CONV_RTN);


applyfilter.AddHostMsg(dir=in, name=IMG_DIM)
	.AddDst(var=img_dim)
	;
applyfilter.AddHostMsg(dir=in, name=IMG_CHANNELS)
	.AddDst(var=img_channels)
	;
applyfilter.AddHostMsg(dir=in, name=FILTER_DIM)
	.AddDst(var=filter_dim)
	;
applyfilter.AddHostMsg(dir=in, name=FRACTION_WIDTH)
	.AddDst(var=fractionW)
	;

applyfilter.AddPrivate()
	.AddVar(type=int16_t, name=accum)
	.AddVar(type=int16_t, name=img_val)
	.AddVar(type=int16_t, name=filter_val)
	.AddVar(type=uint16_t, name=cIdx)
	.AddVar(type=uint16_t, name=xIdx)
	.AddVar(type=uint16_t, name=yIdx)
	.AddVar(type=ht_uint3, name=out_index)
	.AddVar(type=MemAddr_t, name=imgAddr)
	.AddVar(type=MemAddr_t, name=filterAddr)
	;

applyfilter.AddShared()
	.AddVar(type=uint16_t, name=img_dim)
	.AddVar(type=uint16_t, name=img_channels)
	.AddVar(type=uint16_t, name=filter_dim)
	.AddVar(type=uint16_t, name=fractionW)
	;


applyfilter.AddEntry(func=applyfilter, instr=CONV_INIT)
	.AddParam(type=ht_uint3, name=out_index)
	.AddParam(type=MemAddr_t, name=imgAddr)
	.AddParam(type=MemAddr_t, name=filterAddr)
	;

applyfilter.AddReturn(func=applyfilter)
	.AddParam(type=ht_uint3, name=out_index)
	.AddParam(type=int16_t, name=accum)
	;

applyfilter.AddReadMem()
	.AddDst(var=filter_val, name=filter_val )
	.AddDst(var=img_val, name=img_val)
	;


	//, rdType=int32_t)
*/
