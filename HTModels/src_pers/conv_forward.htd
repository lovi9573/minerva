	
#define FIXED_POINT_FRACTION_WIDTH_N 16

#define CONV_FORWARD 1
#define CONV_BACKWARD_DATA 2
#define CONV_BACKWARD_BIAS 3
#define CONV_BACKWARD_FILTER 4

typedef ht_uint48 MemAddr_t;
typedef uint16_t element_t;






////////////////////////////////////////////////////
// Top-level control module
dsnInfo.AddModule(name=ctl, htIdW=0);

ctl.AddInst(name=CTL_ENTRY);
ctl.AddInst(name=CTL_RTN);

ctl.AddPrivate()
	.AddVar(type=uint32_t, name=task)
	.AddVar(type=uint32_t, name=rank)
	.AddVar(type=uint32_t, name=rankStride)
	;

ctl.AddGlobal()
	.AddVar(type=uint16_t, name=fractionW)
	;

ctl.AddEntry(func=htmain, inst=CTL_ENTRY, host=true)
	.AddParam(type=uint32_t, name=rank)
	.AddParam(type=uint32_t, name=rankStride)
	.AddParam(type=uint32_t, name=task)
	;

ctl.AddReturn(func=htmain)
	;

ctl.AddCall(func=conv_fwd);
ctl.AddCall(func=conv_load_bottom_diff_layer);
ctl.AddCall(func=conv_back_bias);
ctl.AddCall(func=conv_load_filter);



/*********************************
 * Convolution Backward Bias
 *********************************/
dsnInfo.AddModule(name=convbackbias, htIdW=0);

convbackbias.AddInst(name=CONVBACKBIAS_ENTRY);
convbackbias.AddInst(name=CONVBACKBIAS_INIT_BIAS_READ);
convbackbias.AddInst(name=CONVBACKBIAS_INIT_BIAS_READ_STORE);
convbackbias.AddInst(name=CONVBACKBIAS_TOP_TEST);
convbackbias.AddInst(name=CONVBACKBIAS_TOP_READ);
convbackbias.AddInst(name=CONVBACKBIAS_TOP_READ_STORE);\
convbackbias.AddInst(name=CONVBACKBIAS_BIAS_TEST);
convbackbias.AddInst(name=CONVBACKBIAS_BIAS_WRITE_PREP);
convbackbias.AddInst(name=CONVBACKBIAS_BIAS_WRITE);
convbackbias.AddInst(name=CONVBACKBIAS_BIAS_READ);
convbackbias.AddInst(name=CONVBACKBIAS_BIAS_READ_STORE);
convbackbias.AddInst(name=CONVBACKBIAS_TOP_ELEMENT_TEST);
convbackbias.AddInst(name=CONVBACKBIAS_BIAS_ELEMENT_TEST);
convbackbias.AddInst(name=CONVBACKBIAS_APPLY);
convbackbias.AddInst(name=CONVBACKBIAS_INCREMENT);
convbackbias.AddInst(name=CONVBACKBIAS_RTN);

convbackbias.AddHostMsg(dir=in, name=TOP_ADDR)
	.AddDst(var=top_addr)
	;
convbackbias.AddHostMsg(dir=in, name=BIAS_ADDR)
	.AddDst(var=bias_addr)
	;
convbackbias.AddHostMsg(dir=in, name=CHANNELS)
	.AddDst(var=channels)
	;
convbackbias.AddHostMsg(dir=in, name=CHANNEL_STRIDE)
	.AddDst(var=channel_stride)
	;
convbackbias.AddHostMsg(dir=in, name=SIZE)
	.AddDst(var=size)
	;

convbackbias.AddPrivate()
	.AddVar(type=MemAddr_t, name=bias_cache_addr)
	.AddVar(type=uint64_t, name=top_data_raw)
	.AddVar(type=uint64_t, name=bias_diff_raw)
	.AddVar(type=uint32_t, name=top_idx)
	.AddVar(type=uint32_t, name=top_element_idx)
	.AddVar(type=uint32_t, name=top_channel_idx)
	.AddVar(type=uint32_t, name=bias_idx)
	.AddVar(type=uint32_t, name=bias_element_idx)
	.AddVar(type=element_t, name=bias_diff, dimen1=4)
	.AddVar(type=element_t, name=top_data, dimen1=4)
	;


convbackbias.AddShared()
	.AddVar(type=MemAddr_t, name=top_addr)
	.AddVar(type=MemAddr_t, name=bias_addr)
	.AddVar(type=uint32_t, name=channels)
	.AddVar(type=uint32_t, name=channel_stride)
	.AddVar(type=uint32_t, name=size)
	;

convbackbias.AddReadMem()
	.AddDst(var=top_data_raw, name=top_data_raw)
	.AddDst(var=bias_diff_raw, name=bias_diff_raw)
	;

convbackbias.AddWriteMem()
		;

convbackbias.AddEntry(func=conv_back_bias, inst=CONVBACKBIAS_ENTRY)
	;

convbackbias.AddReturn(func=conv_back_bias)
	;


/*********************************
 * Convolution Iterate through and Load Filters
 *********************************/
dsnInfo.AddModule(name=convloadfilter, htIdW=0);

convloadfilter.AddInst(name=CONVLOADFILTER_ENTRY);
convloadfilter.AddInst(name=CONVLOADFILTER_READ);
convloadfilter.AddInst(name=CONVLOADFILTER_STORE);
convloadfilter.AddInst(name=CONVLOADFILTER_READ_IDX_TEST);
convloadfilter.AddInst(name=CONVLOADFILTER_FILTER_RAW_IDX_TEST);
convloadfilter.AddInst(name=CONVLOADFILTER_DISPATCH);
convloadfilter.AddInst(name=CONVLOADFILTER_JOIN);\
convloadfilter.AddInst(name=CONVLOADFILTER_ITER_TEST);
convloadfilter.AddInst(name=CONVLOADFILTER_RTN);


convloadfilter.AddHostMsg(dir=in, name=FILTER_ADDR)
	.AddDst(var=filter_addr)
	;
convloadfilter.AddHostMsg(dir=in, name=FILTER_DIM)
	.AddDst(var=filter_dim)
	;
convloadfilter.AddHostMsg(dir=in, name=BOTTOM_CHANNELS)
	.AddDst(var=bottom_channels)
	;

convloadfilter.AddPrivate()
	.AddVar(type=uint64_t, name=filter_data_raw)
	.AddVar(type=uint32_t, name=num_filters_to_iterate)
	.AddVar(type=uint32_t, name=iter)
	.AddVar(type=uint32_t, name=filter_raw_idx)
	.AddVar(type=uint32_t, name=read_idx)
	.AddVar(type=uint32_t, name=task)
	.AddVar(type=uint32_t, name=filter_stride)
	;


convloadfilter.AddShared()
	.AddVar(type=MemAddr_t, name=filter_addr)
	.AddVar(type=MemAddr_t, name=filter_dim)
	.AddVar(type=uint32_t, name=bottom_channels)
	;

convloadfilter.AddGlobal()
	.AddVar(type=uint16_t, name=filter_data, dimen1=512, dimen2=121)
	;

convloadfilter.AddReadMem()
	.AddDst(var=filter_data_raw, name=filter_data_raw)
	;

convloadfilter.AddWriteMem()
		;

//ctl.AddCall(func=conv_load_top_diff_layer, fork=true);

convloadfilter.AddEntry(func=conv_load_filter, inst=CONVLOADFILTER_ENTRY)
		.AddParam(type=uint32_t, name=task)
	;

convloadfilter.AddReturn(func=conv_load_filter)
	;



/*********************************
 * Convolution Load Bottom Diff layer
 *********************************/
dsnInfo.AddModule(name=convcachebottomapplication, htIdW=0);

convcachebottomapplication.AddInst(name=CONVLOADFILTER_ENTRY);
convcachebottomapplication.AddInst(name=CONVLOADFILTER_READ);
convcachebottomapplication.AddInst(name=CONVLOADFILTER_STORE);
convcachebottomapplication.AddInst(name=CONVLOADFILTER_RAW_IDX_TEST);
convcachebottomapplication.AddInst(name=CONV_CHANNEL_IDX_TEST);
convcachebottomapplication.AddInst(name=CONV_SAMPLE_IDX_TEST);
convcachebottomapplication.AddInst(name=CONVLOADFILTER_DISPATCH);
convcachebottomapplication.AddInst(name=CONVLOADFILTER_JOIN);
convcachebottomapplication.AddInst(name=CONVLOADFILTER_RTN);


convcachebottomapplication.AddHostMsg(dir=in, name=BOTTOM_ADDR)
	.AddDst(var=bottom_addr)
	;
convcachebottomapplication.AddHostMsg(dir=in, name=BOTTOM_DIM)
	.AddDst(var=bottom_dim)
	;
convcachebottomapplication.AddHostMsg(dir=in, name=BOTTOM_CHANNELS)
	.AddDst(var=bottom_channels)
	;
convcachebottomapplication.AddHostMsg(dir=in, name=BOTTOM_SAMPLES)
	.AddDst(var=bottom_samples)
	;

convcachebottomapplication.AddPrivate()
	.AddVar(type=uint64_t, name=top_diff_data_raw)
	.AddVar(type=uint32_t, name=top_raw_idx)
	.AddVar(type=uint64_t, name=bottom_diff_data_raw)
	.AddVar(type=uint32_t, name=bottom_raw_idx)
	.AddVar(type=uint32_t, name=rank)
	.AddVar(type=uint32_t, name=rankStride)
	.AddVar(type=uint32_t, name=iter)
	.AddVar(type=uint32_t, name=i)
	.AddVar(type=uint32_t, name=j)
	.AddVar(type=uint32_t, name=i_bottom)
	.AddVar(type=uint32_t, name=j_bottom)
	.AddVar(type=uint32_t, name=sample_idx)
	.AddVar(type=uint32_t, name=channel_idx)
	.AddVar(type=uint32_t, name=bottom_channel_stride)
	.AddVar(type=uint32_t, name=bottom_sample_stride)
	.AddVar(type=uint32_t, name=filter_raw_idx)
	;


convcachebottomapplication.AddShared()
	.AddVar(type=MemAddr_t, name=bottom_addr)
	.AddVar(type=uint32_t, name=bottom_samples)
	.AddVar(type=uint32_t, name=bottom_channels)
	.AddVar(type=uint32_t, name=bottom_dim)
	.AddVar(type=uint32_t, name=filter_dim)
	;

convcachebottomapplication.AddGlobal()
	.AddVar(type=uint16_t, name=bottom_diff_data, dimen1=256, dimen2=256)
	;

convcachebottomapplication.AddReadMem()
	.AddDst(var=top_diff_data_raw, name=top_diff_data_raw)
	.AddDst(var=bottom_diff_data_raw, name=bottom_diff_data_raw)
	;

convcachebottomapplication.AddWriteMem()
		;

convcachebottomapplication.AddCall(func=conv_back_data, fork=true);

convcachebottomapplication.AddEntry(func=conv_load_bottom_diff_layer, inst=CONVLOADFILTER_ENTRY)
		.AddParam(type=uint32_t, name=rank)
		.AddParam(type=uint32_t, name=rankStride)
	;

convcachebottomapplication.AddReturn(func=conv_load_bottom_diff_layer)
	;




/*********************************
 * Convolution Backward Data
 *********************************/
dsnInfo.AddModule(name=convbackdata, htIdW=0);

convbackdata.AddInst(name=CONVBACKDATA_ENTRY);
convbackdata.AddInst(name=CONVBACKDATA_INIT_BIAS_READ);
convbackdata.AddInst(name=CONVBACKDATA_INIT_BIAS_READ_STORE);
convbackdata.AddInst(name=CONVBACKDATA_TOP_TEST);
convbackdata.AddInst(name=CONVBACKDATA_TOP_READ);
convbackdata.AddInst(name=CONVBACKDATA_TOP_READ_STORE);\
convbackdata.AddInst(name=CONVBACKDATA_BIAS_TEST);
convbackdata.AddInst(name=CONVBACKDATA_BIAS_WRITE_PREP);
convbackdata.AddInst(name=CONVBACKDATA_BIAS_WRITE);
convbackdata.AddInst(name=CONVBACKDATA_BIAS_READ);
convbackdata.AddInst(name=CONVBACKDATA_BIAS_READ_STORE);
convbackdata.AddInst(name=CONVBACKDATA_TOP_ELEMENT_TEST);
convbackdata.AddInst(name=CONVBACKDATA_BIAS_ELEMENT_TEST);
convbackdata.AddInst(name=CONVBACKDATA_APPLY);
convbackdata.AddInst(name=CONVBACKDATA_INCREMENT);
convbackdata.AddInst(name=CONVBACKDATA_RTN);

convbackdata.AddHostMsg(dir=in, name=TOP_ADDR)
	.AddDst(var=top_addr)
	;
convbackdata.AddHostMsg(dir=in, name=BOTTOM_ADDR)
	.AddDst(var=bottom_addr)
	;
convbackdata.AddHostMsg(dir=in, name=CHANNELS)
	.AddDst(var=channels)
	;
convbackdata.AddHostMsg(dir=in, name=CHANNEL_STRIDE)
	.AddDst(var=channel_stride)
	;
convbackdata.AddHostMsg(dir=in, name=SIZE)
	.AddDst(var=size)
	;


convbackdata.AddPrivate()
	.AddVar(type=MemAddr_t, name=bias_cache_addr)
	.AddVar(type=uint64_t, name=top_data_raw)
	.AddVar(type=uint64_t, name=bias_diff_raw)
	.AddVar(type=uint32_t, name=top_idx)
	.AddVar(type=uint32_t, name=top_element_idx)
	.AddVar(type=uint32_t, name=top_channel_idx)
	.AddVar(type=uint32_t, name=bias_idx)
	.AddVar(type=uint32_t, name=bias_element_idx)
	.AddVar(type=uint32_t, name=i)
	.AddVar(type=uint32_t, name=j)
	.AddVar(type=element_t, name=bias_diff, dimen1=4)
	.AddVar(type=element_t, name=top_data, dimen1=4)
	;


convbackdata.AddShared()
	.AddVar(type=MemAddr_t, name=top_addr)
	.AddVar(type=MemAddr_t, name=bottom_addr)
	.AddVar(type=uint32_t, name=channels)
	.AddVar(type=uint32_t, name=channel_stride)
	.AddVar(type=uint32_t, name=size)
	;

convbackdata.AddReadMem()
	.AddDst(var=top_data_raw, name=top_data_raw)
	.AddDst(var=bias_diff_raw, name=bias_diff_raw)
	;

convbackdata.AddWriteMem()
		;

convbackdata.AddEntry(func=conv_back_data, inst=CONVBACKDATA_ENTRY)
	.AddParam(type=uint32_t, name=i)
	.AddParam(type=uint32_t, name=j)
	;

convbackdata.AddReturn(func=conv_back_data)
	;




/*
 * Convolution Forward control
 */

dsnInfo.AddModule(name=convfwd, htIdW=0);

convfwd.AddInst(name=CONVFWD_ENTRY);
convfwd.AddInst(name=CONVFWD_CHECK_I);
convfwd.AddInst(name=CONVFWD_CHECK_Y);
convfwd.AddInst(name=CONVFWD_CHECK_X);
convfwd.AddInst(name=CONVFWD_CHECK_F);
convfwd.AddInst(name=CONVFWD_COLLECT);
convfwd.AddInst(name=CONVFWD_COMPUTE);
convfwd.AddInst(name=CONVFWD_JOIN);
convfwd.AddInst(name=CONVFWD_RTN);

convfwd.AddHostMsg(dir=in, name=IMG_ADDR)
	.AddDst(var=imgAddr)
	;
convfwd.AddHostMsg(dir=in, name=IMG_NUM)
	.AddDst(var=img_num)
	;
convfwd.AddHostMsg(dir=in, name=IMG_DIM)
	.AddDst(var=img_dim)
	;
convfwd.AddHostMsg(dir=in, name=IMG_CHANNELS)
	.AddDst(var=img_channels)
	;
convfwd.AddHostMsg(dir=in, name=FILTER_ADDR)
	.AddDst(var=filterAddr)
	;
convfwd.AddHostMsg(dir=in, name=FILTER_NUM)
	.AddDst(var=filter_num)
	;
convfwd.AddHostMsg(dir=in, name=FILTER_DIM)
	.AddDst(var=filter_dim)
	;
convfwd.AddHostMsg(dir=in, name=STRIDE)
	.AddDst(var=stride)
	;
convfwd.AddHostMsg(dir=in, name=OUT_ADDR)
	.AddDst(var=outAddr)
	;
convfwd.AddHostMsg(dir=in, name=FRACTION_WIDTH)
	.AddDst(var=fractionW)
	;



//All in units of image pixels(ignores # channels)
convfwd.AddPrivate()
	.AddVar(type=uint32_t, name=rank)
	.AddVar(type=uint32_t, name=applicationIdx_F)
	.AddVar(type=uint32_t, name=applicationIdx_X)
	.AddVar(type=uint32_t, name=applicationIdx_Y)
	.AddVar(type=uint32_t, name=applicationIdx_I)
	.AddVar(type=uint32_t, name=rankStride)
	.AddVar(type=MemAddr_t, name=Addresses, dimen1=8)
	.AddVar(type=ht_uint2,  name=count)
	.AddVar(type=MemAddr_t,  name=outAddrOffset)
	;

convfwd.AddShared()
	.AddVar(type=MemAddr_t, name=imgAddr)
	.AddVar(type=uint32_t, name=img_num)
	.AddVar(type=uint32_t, name=img_dim)
	.AddVar(type=uint32_t, name=img_channels)
	.AddVar(type=MemAddr_t, name=filterAddr)
	.AddVar(type=uint32_t, name=filter_num)
	.AddVar(type=uint32_t, name=filter_dim)
	.AddVar(type=uint32_t, name=stride)
	.AddVar(type=MemAddr_t, name=outAddr)
	.AddVar(type=uint16_t, name=fractionW)
	.AddVar(type=uint32_t, name=dCoordinates)
	.AddVar(type=uint32_t, name=dimY)
	.AddVar(type=uint32_t, name=dimX)
	.AddVar(type=uint32_t, name=dimF)
	;


convfwd.AddGlobal()
		.AddVar(type=uint16_t, name=fractionW)
		;

convfwd.AddEntry(func=conv_fwd, inst=CONVFWD_ENTRY)
	.AddParam(type=uint32_t, name=rank)
	.AddParam(type=uint32_t, name=rankStride)
	;

convfwd.AddReturn(func=conv_fwd)
	;

convfwd.AddCall(func=cluster, fork=true);

////////////////////////////////////////////////////
// Scatters a group of 4 filter applications to seperate threads
// Gathers the resulting activations and merges them into a single quad-word write.
#define CLUSTER_HTID_W 9

dsnInfo.AddModule(name=cluster, htIdW=CLUSTER_HTID_W);

cluster.AddInst(name=SG_FILTER_GROUP_INIT);
cluster.AddInst(name=SG_FILTER_GROUP_DISPATCH);
cluster.AddInst(name=SG_FILTER_GROUP_MERGE);
cluster.AddInst(name=SG_FILTER_GROUP_WRITE);
cluster.AddInst(name=SG_FILTER_GROUP_RTN);


cluster.AddPrivate()
		.AddVar(type=MemAddr_t, name=img_Addr1)
		.AddVar(type=MemAddr_t, name=filter_Addr1)
		.AddVar(type=MemAddr_t, name=img_Addr2)
		.AddVar(type=MemAddr_t, name=filter_Addr2)
		.AddVar(type=MemAddr_t, name=img_Addr3)
		.AddVar(type=MemAddr_t, name=filter_Addr3)
		.AddVar(type=MemAddr_t, name=img_Addr4)
		.AddVar(type=MemAddr_t, name=filter_Addr4)
		.AddVar(type=uint64_t, name=activation_group)
		.AddVar(type=MemAddr_t, name=out_Addr)
		.AddVar(type=ht_uint3, name=out_index)
		.AddVar(type=ht_uint3, name=idx)
		.AddVar(type=int16_t, name=accum)
		;


cluster.AddEntry(func=cluster, inst=SG_FILTER_GROUP_INIT)
		.AddParam(type=MemAddr_t, name=img_Addr1)
		.AddParam(type=MemAddr_t, name=filter_Addr1)
		.AddParam(type=MemAddr_t, name=img_Addr2)
		.AddParam(type=MemAddr_t, name=filter_Addr2)
		.AddParam(type=MemAddr_t, name=img_Addr3)
		.AddParam(type=MemAddr_t, name=filter_Addr3)
		.AddParam(type=MemAddr_t, name=img_Addr4)
		.AddParam(type=MemAddr_t, name=filter_Addr4)
		.AddParam(type=MemAddr_t, name=out_Addr)
	;

cluster.AddReturn(func=cluster)
		;

cluster.AddCall(func=applyfilter, fork=true)
		;

cluster.AddWriteMem()
		;

////////////////////////////////////////////////////
// Loads vector elements from op array, rectifies , stores results
#define APPLYFILTER_HTID_W 9

dsnInfo.AddModule(name=applyfilter, htIdW=APPLYFILTER_HTID_W);

applyfilter.AddInst(name=CONV_INIT);
applyfilter.AddInst(name=CONV_LOOP_TOP);
applyfilter.AddInst(name=CONV_LD_IMG_SAMPLE);
applyfilter.AddInst(name=CONV_LD_FILTER_SAMPLE);
applyfilter.AddInst(name=CONV_APPLY);
applyfilter.AddInst(name=CONV_LOOP_BRANCH);
applyfilter.AddInst(name=CONV_LD_OUT);
applyfilter.AddInst(name=CONV_PACK);
applyfilter.AddInst(name=CONV_WRITE);
applyfilter.AddInst(name=CONV_RTN);


applyfilter.AddHostMsg(dir=in, name=IMG_DIM)
	.AddDst(var=img_dim)
	;
applyfilter.AddHostMsg(dir=in, name=IMG_CHANNELS)
	.AddDst(var=img_channels)
	;
applyfilter.AddHostMsg(dir=in, name=FILTER_DIM)
	.AddDst(var=filter_dim)
	;
applyfilter.AddHostMsg(dir=in, name=FRACTION_WIDTH)
	.AddDst(var=fractionW)
	;

applyfilter.AddPrivate()
	.AddVar(type=int16_t, name=accum)
	.AddVar(type=int16_t, name=img_val)
	.AddVar(type=int16_t, name=filter_val)
	.AddVar(type=uint16_t, name=cIdx)
	.AddVar(type=uint16_t, name=xIdx)
	.AddVar(type=uint16_t, name=yIdx)
	.AddVar(type=ht_uint3, name=out_index)
	.AddVar(type=MemAddr_t, name=imgAddr)
	.AddVar(type=MemAddr_t, name=filterAddr)
	;

applyfilter.AddShared()
	.AddVar(type=uint16_t, name=img_dim)
	.AddVar(type=uint16_t, name=img_channels)
	.AddVar(type=uint16_t, name=filter_dim)
	.AddVar(type=uint16_t, name=fractionW)
	;


applyfilter.AddEntry(func=applyfilter, inst=CONV_INIT)
	.AddParam(type=ht_uint3, name=out_index)
	.AddParam(type=MemAddr_t, name=imgAddr)
	.AddParam(type=MemAddr_t, name=filterAddr)
	;

applyfilter.AddReturn(func=applyfilter)
	.AddParam(type=ht_uint3, name=out_index)
	.AddParam(type=int16_t, name=accum)
	;

applyfilter.AddReadMem()
	.AddDst(var=filter_val, name=filter_val )
	.AddDst(var=img_val, name=img_val)
	;


	//, rdType=int32_t)

