// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rbmconfig.proto

#ifndef PROTOBUF_rbmconfig_2eproto__INCLUDED
#define PROTOBUF_rbmconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rbm {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_rbmconfig_2eproto();
void protobuf_AssignDesc_rbmconfig_2eproto();
void protobuf_ShutdownFile_rbmconfig_2eproto();

class RbmParameters;

// ===================================================================

class RbmParameters : public ::google::protobuf::Message {
 public:
  RbmParameters();
  virtual ~RbmParameters();

  RbmParameters(const RbmParameters& from);

  inline RbmParameters& operator=(const RbmParameters& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RbmParameters& default_instance();

  void Swap(RbmParameters* other);

  // implements Message ----------------------------------------------

  inline RbmParameters* New() const { return New(NULL); }

  RbmParameters* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RbmParameters& from);
  void MergeFrom(const RbmParameters& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RbmParameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 num_hidden = 1;
  bool has_num_hidden() const;
  void clear_num_hidden();
  static const int kNumHiddenFieldNumber = 1;
  ::google::protobuf::int32 num_hidden() const;
  void set_num_hidden(::google::protobuf::int32 value);

  // required int32 epochs = 2;
  bool has_epochs() const;
  void clear_epochs();
  static const int kEpochsFieldNumber = 2;
  ::google::protobuf::int32 epochs() const;
  void set_epochs(::google::protobuf::int32 value);

  // required int32 batch_size = 3;
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 3;
  ::google::protobuf::int32 batch_size() const;
  void set_batch_size(::google::protobuf::int32 value);

  // required float momentum = 4;
  bool has_momentum() const;
  void clear_momentum();
  static const int kMomentumFieldNumber = 4;
  float momentum() const;
  void set_momentum(float value);

  // required float learning_rate = 5;
  bool has_learning_rate() const;
  void clear_learning_rate();
  static const int kLearningRateFieldNumber = 5;
  float learning_rate() const;
  void set_learning_rate(float value);

  // optional int32 gibbs_sampling_steps = 6 [default = 1];
  bool has_gibbs_sampling_steps() const;
  void clear_gibbs_sampling_steps();
  static const int kGibbsSamplingStepsFieldNumber = 6;
  ::google::protobuf::int32 gibbs_sampling_steps() const;
  void set_gibbs_sampling_steps(::google::protobuf::int32 value);

  // optional bool persistent_gibbs_chain = 7 [default = false];
  bool has_persistent_gibbs_chain() const;
  void clear_persistent_gibbs_chain();
  static const int kPersistentGibbsChainFieldNumber = 7;
  bool persistent_gibbs_chain() const;
  void set_persistent_gibbs_chain(bool value);

  // required bool sample_visibles = 8;
  bool has_sample_visibles() const;
  void clear_sample_visibles();
  static const int kSampleVisiblesFieldNumber = 8;
  bool sample_visibles() const;
  void set_sample_visibles(bool value);

  // required bool sample_hiddens = 9;
  bool has_sample_hiddens() const;
  void clear_sample_hiddens();
  static const int kSampleHiddensFieldNumber = 9;
  bool sample_hiddens() const;
  void set_sample_hiddens(bool value);

  // optional int32 synchronization_period = 10 [default = 512];
  bool has_synchronization_period() const;
  void clear_synchronization_period();
  static const int kSynchronizationPeriodFieldNumber = 10;
  ::google::protobuf::int32 synchronization_period() const;
  void set_synchronization_period(::google::protobuf::int32 value);

  // required string output_filename_base = 11;
  bool has_output_filename_base() const;
  void clear_output_filename_base();
  static const int kOutputFilenameBaseFieldNumber = 11;
  const ::std::string& output_filename_base() const;
  void set_output_filename_base(const ::std::string& value);
  void set_output_filename_base(const char* value);
  void set_output_filename_base(const char* value, size_t size);
  ::std::string* mutable_output_filename_base();
  ::std::string* release_output_filename_base();
  void set_allocated_output_filename_base(::std::string* output_filename_base);

  // optional bool diag_error = 12 [default = false];
  bool has_diag_error() const;
  void clear_diag_error();
  static const int kDiagErrorFieldNumber = 12;
  bool diag_error() const;
  void set_diag_error(bool value);

  // optional bool diag_weight_update_hist = 13 [default = false];
  bool has_diag_weight_update_hist() const;
  void clear_diag_weight_update_hist();
  static const int kDiagWeightUpdateHistFieldNumber = 13;
  bool diag_weight_update_hist() const;
  void set_diag_weight_update_hist(bool value);

  // optional bool diag_hidden_activation_probability = 14 [default = false];
  bool has_diag_hidden_activation_probability() const;
  void clear_diag_hidden_activation_probability();
  static const int kDiagHiddenActivationProbabilityFieldNumber = 14;
  bool diag_hidden_activation_probability() const;
  void set_diag_hidden_activation_probability(bool value);

  // optional bool diag_visible_recon_err = 15 [default = false];
  bool has_diag_visible_recon_err() const;
  void clear_diag_visible_recon_err();
  static const int kDiagVisibleReconErrFieldNumber = 15;
  bool diag_visible_recon_err() const;
  void set_diag_visible_recon_err(bool value);

  // optional bool diag_epoch_weight_output = 16 [default = false];
  bool has_diag_epoch_weight_output() const;
  void clear_diag_epoch_weight_output();
  static const int kDiagEpochWeightOutputFieldNumber = 16;
  bool diag_epoch_weight_output() const;
  void set_diag_epoch_weight_output(bool value);

  // optional bool diag_train_val_energy_diff = 17 [default = true];
  bool has_diag_train_val_energy_diff() const;
  void clear_diag_train_val_energy_diff();
  static const int kDiagTrainValEnergyDiffFieldNumber = 17;
  bool diag_train_val_energy_diff() const;
  void set_diag_train_val_energy_diff(bool value);

  // @@protoc_insertion_point(class_scope:rbm.RbmParameters)
 private:
  inline void set_has_num_hidden();
  inline void clear_has_num_hidden();
  inline void set_has_epochs();
  inline void clear_has_epochs();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_momentum();
  inline void clear_has_momentum();
  inline void set_has_learning_rate();
  inline void clear_has_learning_rate();
  inline void set_has_gibbs_sampling_steps();
  inline void clear_has_gibbs_sampling_steps();
  inline void set_has_persistent_gibbs_chain();
  inline void clear_has_persistent_gibbs_chain();
  inline void set_has_sample_visibles();
  inline void clear_has_sample_visibles();
  inline void set_has_sample_hiddens();
  inline void clear_has_sample_hiddens();
  inline void set_has_synchronization_period();
  inline void clear_has_synchronization_period();
  inline void set_has_output_filename_base();
  inline void clear_has_output_filename_base();
  inline void set_has_diag_error();
  inline void clear_has_diag_error();
  inline void set_has_diag_weight_update_hist();
  inline void clear_has_diag_weight_update_hist();
  inline void set_has_diag_hidden_activation_probability();
  inline void clear_has_diag_hidden_activation_probability();
  inline void set_has_diag_visible_recon_err();
  inline void clear_has_diag_visible_recon_err();
  inline void set_has_diag_epoch_weight_output();
  inline void clear_has_diag_epoch_weight_output();
  inline void set_has_diag_train_val_energy_diff();
  inline void clear_has_diag_train_val_energy_diff();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 num_hidden_;
  ::google::protobuf::int32 epochs_;
  ::google::protobuf::int32 batch_size_;
  float momentum_;
  float learning_rate_;
  ::google::protobuf::int32 gibbs_sampling_steps_;
  bool persistent_gibbs_chain_;
  bool sample_visibles_;
  bool sample_hiddens_;
  bool diag_error_;
  ::google::protobuf::int32 synchronization_period_;
  ::google::protobuf::internal::ArenaStringPtr output_filename_base_;
  bool diag_weight_update_hist_;
  bool diag_hidden_activation_probability_;
  bool diag_visible_recon_err_;
  bool diag_epoch_weight_output_;
  bool diag_train_val_energy_diff_;
  friend void  protobuf_AddDesc_rbmconfig_2eproto();
  friend void protobuf_AssignDesc_rbmconfig_2eproto();
  friend void protobuf_ShutdownFile_rbmconfig_2eproto();

  void InitAsDefaultInstance();
  static RbmParameters* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RbmParameters

// required int32 num_hidden = 1;
inline bool RbmParameters::has_num_hidden() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RbmParameters::set_has_num_hidden() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RbmParameters::clear_has_num_hidden() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RbmParameters::clear_num_hidden() {
  num_hidden_ = 0;
  clear_has_num_hidden();
}
inline ::google::protobuf::int32 RbmParameters::num_hidden() const {
  // @@protoc_insertion_point(field_get:rbm.RbmParameters.num_hidden)
  return num_hidden_;
}
inline void RbmParameters::set_num_hidden(::google::protobuf::int32 value) {
  set_has_num_hidden();
  num_hidden_ = value;
  // @@protoc_insertion_point(field_set:rbm.RbmParameters.num_hidden)
}

// required int32 epochs = 2;
inline bool RbmParameters::has_epochs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RbmParameters::set_has_epochs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RbmParameters::clear_has_epochs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RbmParameters::clear_epochs() {
  epochs_ = 0;
  clear_has_epochs();
}
inline ::google::protobuf::int32 RbmParameters::epochs() const {
  // @@protoc_insertion_point(field_get:rbm.RbmParameters.epochs)
  return epochs_;
}
inline void RbmParameters::set_epochs(::google::protobuf::int32 value) {
  set_has_epochs();
  epochs_ = value;
  // @@protoc_insertion_point(field_set:rbm.RbmParameters.epochs)
}

// required int32 batch_size = 3;
inline bool RbmParameters::has_batch_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RbmParameters::set_has_batch_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RbmParameters::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RbmParameters::clear_batch_size() {
  batch_size_ = 0;
  clear_has_batch_size();
}
inline ::google::protobuf::int32 RbmParameters::batch_size() const {
  // @@protoc_insertion_point(field_get:rbm.RbmParameters.batch_size)
  return batch_size_;
}
inline void RbmParameters::set_batch_size(::google::protobuf::int32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:rbm.RbmParameters.batch_size)
}

// required float momentum = 4;
inline bool RbmParameters::has_momentum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RbmParameters::set_has_momentum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RbmParameters::clear_has_momentum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RbmParameters::clear_momentum() {
  momentum_ = 0;
  clear_has_momentum();
}
inline float RbmParameters::momentum() const {
  // @@protoc_insertion_point(field_get:rbm.RbmParameters.momentum)
  return momentum_;
}
inline void RbmParameters::set_momentum(float value) {
  set_has_momentum();
  momentum_ = value;
  // @@protoc_insertion_point(field_set:rbm.RbmParameters.momentum)
}

// required float learning_rate = 5;
inline bool RbmParameters::has_learning_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RbmParameters::set_has_learning_rate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RbmParameters::clear_has_learning_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RbmParameters::clear_learning_rate() {
  learning_rate_ = 0;
  clear_has_learning_rate();
}
inline float RbmParameters::learning_rate() const {
  // @@protoc_insertion_point(field_get:rbm.RbmParameters.learning_rate)
  return learning_rate_;
}
inline void RbmParameters::set_learning_rate(float value) {
  set_has_learning_rate();
  learning_rate_ = value;
  // @@protoc_insertion_point(field_set:rbm.RbmParameters.learning_rate)
}

// optional int32 gibbs_sampling_steps = 6 [default = 1];
inline bool RbmParameters::has_gibbs_sampling_steps() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RbmParameters::set_has_gibbs_sampling_steps() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RbmParameters::clear_has_gibbs_sampling_steps() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RbmParameters::clear_gibbs_sampling_steps() {
  gibbs_sampling_steps_ = 1;
  clear_has_gibbs_sampling_steps();
}
inline ::google::protobuf::int32 RbmParameters::gibbs_sampling_steps() const {
  // @@protoc_insertion_point(field_get:rbm.RbmParameters.gibbs_sampling_steps)
  return gibbs_sampling_steps_;
}
inline void RbmParameters::set_gibbs_sampling_steps(::google::protobuf::int32 value) {
  set_has_gibbs_sampling_steps();
  gibbs_sampling_steps_ = value;
  // @@protoc_insertion_point(field_set:rbm.RbmParameters.gibbs_sampling_steps)
}

// optional bool persistent_gibbs_chain = 7 [default = false];
inline bool RbmParameters::has_persistent_gibbs_chain() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RbmParameters::set_has_persistent_gibbs_chain() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RbmParameters::clear_has_persistent_gibbs_chain() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RbmParameters::clear_persistent_gibbs_chain() {
  persistent_gibbs_chain_ = false;
  clear_has_persistent_gibbs_chain();
}
inline bool RbmParameters::persistent_gibbs_chain() const {
  // @@protoc_insertion_point(field_get:rbm.RbmParameters.persistent_gibbs_chain)
  return persistent_gibbs_chain_;
}
inline void RbmParameters::set_persistent_gibbs_chain(bool value) {
  set_has_persistent_gibbs_chain();
  persistent_gibbs_chain_ = value;
  // @@protoc_insertion_point(field_set:rbm.RbmParameters.persistent_gibbs_chain)
}

// required bool sample_visibles = 8;
inline bool RbmParameters::has_sample_visibles() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RbmParameters::set_has_sample_visibles() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RbmParameters::clear_has_sample_visibles() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RbmParameters::clear_sample_visibles() {
  sample_visibles_ = false;
  clear_has_sample_visibles();
}
inline bool RbmParameters::sample_visibles() const {
  // @@protoc_insertion_point(field_get:rbm.RbmParameters.sample_visibles)
  return sample_visibles_;
}
inline void RbmParameters::set_sample_visibles(bool value) {
  set_has_sample_visibles();
  sample_visibles_ = value;
  // @@protoc_insertion_point(field_set:rbm.RbmParameters.sample_visibles)
}

// required bool sample_hiddens = 9;
inline bool RbmParameters::has_sample_hiddens() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RbmParameters::set_has_sample_hiddens() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RbmParameters::clear_has_sample_hiddens() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RbmParameters::clear_sample_hiddens() {
  sample_hiddens_ = false;
  clear_has_sample_hiddens();
}
inline bool RbmParameters::sample_hiddens() const {
  // @@protoc_insertion_point(field_get:rbm.RbmParameters.sample_hiddens)
  return sample_hiddens_;
}
inline void RbmParameters::set_sample_hiddens(bool value) {
  set_has_sample_hiddens();
  sample_hiddens_ = value;
  // @@protoc_insertion_point(field_set:rbm.RbmParameters.sample_hiddens)
}

// optional int32 synchronization_period = 10 [default = 512];
inline bool RbmParameters::has_synchronization_period() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RbmParameters::set_has_synchronization_period() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RbmParameters::clear_has_synchronization_period() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RbmParameters::clear_synchronization_period() {
  synchronization_period_ = 512;
  clear_has_synchronization_period();
}
inline ::google::protobuf::int32 RbmParameters::synchronization_period() const {
  // @@protoc_insertion_point(field_get:rbm.RbmParameters.synchronization_period)
  return synchronization_period_;
}
inline void RbmParameters::set_synchronization_period(::google::protobuf::int32 value) {
  set_has_synchronization_period();
  synchronization_period_ = value;
  // @@protoc_insertion_point(field_set:rbm.RbmParameters.synchronization_period)
}

// required string output_filename_base = 11;
inline bool RbmParameters::has_output_filename_base() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RbmParameters::set_has_output_filename_base() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RbmParameters::clear_has_output_filename_base() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RbmParameters::clear_output_filename_base() {
  output_filename_base_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_output_filename_base();
}
inline const ::std::string& RbmParameters::output_filename_base() const {
  // @@protoc_insertion_point(field_get:rbm.RbmParameters.output_filename_base)
  return output_filename_base_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RbmParameters::set_output_filename_base(const ::std::string& value) {
  set_has_output_filename_base();
  output_filename_base_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rbm.RbmParameters.output_filename_base)
}
inline void RbmParameters::set_output_filename_base(const char* value) {
  set_has_output_filename_base();
  output_filename_base_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rbm.RbmParameters.output_filename_base)
}
inline void RbmParameters::set_output_filename_base(const char* value, size_t size) {
  set_has_output_filename_base();
  output_filename_base_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rbm.RbmParameters.output_filename_base)
}
inline ::std::string* RbmParameters::mutable_output_filename_base() {
  set_has_output_filename_base();
  // @@protoc_insertion_point(field_mutable:rbm.RbmParameters.output_filename_base)
  return output_filename_base_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RbmParameters::release_output_filename_base() {
  clear_has_output_filename_base();
  return output_filename_base_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RbmParameters::set_allocated_output_filename_base(::std::string* output_filename_base) {
  if (output_filename_base != NULL) {
    set_has_output_filename_base();
  } else {
    clear_has_output_filename_base();
  }
  output_filename_base_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_filename_base);
  // @@protoc_insertion_point(field_set_allocated:rbm.RbmParameters.output_filename_base)
}

// optional bool diag_error = 12 [default = false];
inline bool RbmParameters::has_diag_error() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RbmParameters::set_has_diag_error() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RbmParameters::clear_has_diag_error() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RbmParameters::clear_diag_error() {
  diag_error_ = false;
  clear_has_diag_error();
}
inline bool RbmParameters::diag_error() const {
  // @@protoc_insertion_point(field_get:rbm.RbmParameters.diag_error)
  return diag_error_;
}
inline void RbmParameters::set_diag_error(bool value) {
  set_has_diag_error();
  diag_error_ = value;
  // @@protoc_insertion_point(field_set:rbm.RbmParameters.diag_error)
}

// optional bool diag_weight_update_hist = 13 [default = false];
inline bool RbmParameters::has_diag_weight_update_hist() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RbmParameters::set_has_diag_weight_update_hist() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RbmParameters::clear_has_diag_weight_update_hist() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RbmParameters::clear_diag_weight_update_hist() {
  diag_weight_update_hist_ = false;
  clear_has_diag_weight_update_hist();
}
inline bool RbmParameters::diag_weight_update_hist() const {
  // @@protoc_insertion_point(field_get:rbm.RbmParameters.diag_weight_update_hist)
  return diag_weight_update_hist_;
}
inline void RbmParameters::set_diag_weight_update_hist(bool value) {
  set_has_diag_weight_update_hist();
  diag_weight_update_hist_ = value;
  // @@protoc_insertion_point(field_set:rbm.RbmParameters.diag_weight_update_hist)
}

// optional bool diag_hidden_activation_probability = 14 [default = false];
inline bool RbmParameters::has_diag_hidden_activation_probability() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RbmParameters::set_has_diag_hidden_activation_probability() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RbmParameters::clear_has_diag_hidden_activation_probability() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RbmParameters::clear_diag_hidden_activation_probability() {
  diag_hidden_activation_probability_ = false;
  clear_has_diag_hidden_activation_probability();
}
inline bool RbmParameters::diag_hidden_activation_probability() const {
  // @@protoc_insertion_point(field_get:rbm.RbmParameters.diag_hidden_activation_probability)
  return diag_hidden_activation_probability_;
}
inline void RbmParameters::set_diag_hidden_activation_probability(bool value) {
  set_has_diag_hidden_activation_probability();
  diag_hidden_activation_probability_ = value;
  // @@protoc_insertion_point(field_set:rbm.RbmParameters.diag_hidden_activation_probability)
}

// optional bool diag_visible_recon_err = 15 [default = false];
inline bool RbmParameters::has_diag_visible_recon_err() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RbmParameters::set_has_diag_visible_recon_err() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RbmParameters::clear_has_diag_visible_recon_err() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RbmParameters::clear_diag_visible_recon_err() {
  diag_visible_recon_err_ = false;
  clear_has_diag_visible_recon_err();
}
inline bool RbmParameters::diag_visible_recon_err() const {
  // @@protoc_insertion_point(field_get:rbm.RbmParameters.diag_visible_recon_err)
  return diag_visible_recon_err_;
}
inline void RbmParameters::set_diag_visible_recon_err(bool value) {
  set_has_diag_visible_recon_err();
  diag_visible_recon_err_ = value;
  // @@protoc_insertion_point(field_set:rbm.RbmParameters.diag_visible_recon_err)
}

// optional bool diag_epoch_weight_output = 16 [default = false];
inline bool RbmParameters::has_diag_epoch_weight_output() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RbmParameters::set_has_diag_epoch_weight_output() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RbmParameters::clear_has_diag_epoch_weight_output() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RbmParameters::clear_diag_epoch_weight_output() {
  diag_epoch_weight_output_ = false;
  clear_has_diag_epoch_weight_output();
}
inline bool RbmParameters::diag_epoch_weight_output() const {
  // @@protoc_insertion_point(field_get:rbm.RbmParameters.diag_epoch_weight_output)
  return diag_epoch_weight_output_;
}
inline void RbmParameters::set_diag_epoch_weight_output(bool value) {
  set_has_diag_epoch_weight_output();
  diag_epoch_weight_output_ = value;
  // @@protoc_insertion_point(field_set:rbm.RbmParameters.diag_epoch_weight_output)
}

// optional bool diag_train_val_energy_diff = 17 [default = true];
inline bool RbmParameters::has_diag_train_val_energy_diff() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RbmParameters::set_has_diag_train_val_energy_diff() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RbmParameters::clear_has_diag_train_val_energy_diff() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RbmParameters::clear_diag_train_val_energy_diff() {
  diag_train_val_energy_diff_ = true;
  clear_has_diag_train_val_energy_diff();
}
inline bool RbmParameters::diag_train_val_energy_diff() const {
  // @@protoc_insertion_point(field_get:rbm.RbmParameters.diag_train_val_energy_diff)
  return diag_train_val_energy_diff_;
}
inline void RbmParameters::set_diag_train_val_energy_diff(bool value) {
  set_has_diag_train_val_energy_diff();
  diag_train_val_energy_diff_ = value;
  // @@protoc_insertion_point(field_set:rbm.RbmParameters.diag_train_val_energy_diff)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace rbm

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rbmconfig_2eproto__INCLUDED
