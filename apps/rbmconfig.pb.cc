// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rbmconfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rbmconfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rbm {

namespace {

const ::google::protobuf::Descriptor* RbmParameters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RbmParameters_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rbmconfig_2eproto() {
  protobuf_AddDesc_rbmconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rbmconfig.proto");
  GOOGLE_CHECK(file != NULL);
  RbmParameters_descriptor_ = file->message_type(0);
  static const int RbmParameters_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RbmParameters, num_hidden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RbmParameters, epochs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RbmParameters, batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RbmParameters, momentum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RbmParameters, learning_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RbmParameters, gibbs_sampling_steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RbmParameters, persistent_gibbs_chain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RbmParameters, binary_visibles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RbmParameters, synchronization_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RbmParameters, output_filename_base_),
  };
  RbmParameters_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RbmParameters_descriptor_,
      RbmParameters::default_instance_,
      RbmParameters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RbmParameters, _has_bits_[0]),
      -1,
      -1,
      sizeof(RbmParameters),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RbmParameters, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rbmconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RbmParameters_descriptor_, &RbmParameters::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rbmconfig_2eproto() {
  delete RbmParameters::default_instance_;
  delete RbmParameters_reflection_;
}

void protobuf_AddDesc_rbmconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017rbmconfig.proto\022\003rbm\"\224\002\n\rRbmParameters"
    "\022\022\n\nnum_hidden\030\001 \002(\005\022\016\n\006epochs\030\002 \002(\005\022\022\n\n"
    "batch_size\030\003 \002(\005\022\020\n\010momentum\030\004 \002(\002\022\025\n\rle"
    "arning_rate\030\005 \002(\002\022\037\n\024gibbs_sampling_step"
    "s\030\006 \001(\005:\0011\022%\n\026persistent_gibbs_chain\030\007 \001"
    "(\010:\005false\022\027\n\017binary_visibles\030\010 \002(\010\022#\n\026sy"
    "nchronization_period\030\t \001(\005:\003512\022\034\n\024outpu"
    "t_filename_base\030\n \002(\t", 301);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rbmconfig.proto", &protobuf_RegisterTypes);
  RbmParameters::default_instance_ = new RbmParameters();
  RbmParameters::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rbmconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rbmconfig_2eproto {
  StaticDescriptorInitializer_rbmconfig_2eproto() {
    protobuf_AddDesc_rbmconfig_2eproto();
  }
} static_descriptor_initializer_rbmconfig_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int RbmParameters::kNumHiddenFieldNumber;
const int RbmParameters::kEpochsFieldNumber;
const int RbmParameters::kBatchSizeFieldNumber;
const int RbmParameters::kMomentumFieldNumber;
const int RbmParameters::kLearningRateFieldNumber;
const int RbmParameters::kGibbsSamplingStepsFieldNumber;
const int RbmParameters::kPersistentGibbsChainFieldNumber;
const int RbmParameters::kBinaryVisiblesFieldNumber;
const int RbmParameters::kSynchronizationPeriodFieldNumber;
const int RbmParameters::kOutputFilenameBaseFieldNumber;
#endif  // !_MSC_VER

RbmParameters::RbmParameters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rbm.RbmParameters)
}

void RbmParameters::InitAsDefaultInstance() {
}

RbmParameters::RbmParameters(const RbmParameters& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rbm.RbmParameters)
}

void RbmParameters::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  num_hidden_ = 0;
  epochs_ = 0;
  batch_size_ = 0;
  momentum_ = 0;
  learning_rate_ = 0;
  gibbs_sampling_steps_ = 1;
  persistent_gibbs_chain_ = false;
  binary_visibles_ = false;
  synchronization_period_ = 512;
  output_filename_base_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RbmParameters::~RbmParameters() {
  // @@protoc_insertion_point(destructor:rbm.RbmParameters)
  SharedDtor();
}

void RbmParameters::SharedDtor() {
  output_filename_base_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RbmParameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RbmParameters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RbmParameters_descriptor_;
}

const RbmParameters& RbmParameters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rbmconfig_2eproto();
  return *default_instance_;
}

RbmParameters* RbmParameters::default_instance_ = NULL;

RbmParameters* RbmParameters::New(::google::protobuf::Arena* arena) const {
  RbmParameters* n = new RbmParameters;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RbmParameters::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RbmParameters*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(num_hidden_, learning_rate_);
    ZR_(persistent_gibbs_chain_, binary_visibles_);
    gibbs_sampling_steps_ = 1;
  }
  if (_has_bits_[8 / 32] & 768u) {
    synchronization_period_ = 512;
    if (has_output_filename_base()) {
      output_filename_base_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RbmParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rbm.RbmParameters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 num_hidden = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_hidden_)));
          set_has_num_hidden();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_epochs;
        break;
      }

      // required int32 epochs = 2;
      case 2: {
        if (tag == 16) {
         parse_epochs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &epochs_)));
          set_has_epochs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_batch_size;
        break;
      }

      // required int32 batch_size = 3;
      case 3: {
        if (tag == 24) {
         parse_batch_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batch_size_)));
          set_has_batch_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_momentum;
        break;
      }

      // required float momentum = 4;
      case 4: {
        if (tag == 37) {
         parse_momentum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &momentum_)));
          set_has_momentum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_learning_rate;
        break;
      }

      // required float learning_rate = 5;
      case 5: {
        if (tag == 45) {
         parse_learning_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &learning_rate_)));
          set_has_learning_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gibbs_sampling_steps;
        break;
      }

      // optional int32 gibbs_sampling_steps = 6 [default = 1];
      case 6: {
        if (tag == 48) {
         parse_gibbs_sampling_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gibbs_sampling_steps_)));
          set_has_gibbs_sampling_steps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_persistent_gibbs_chain;
        break;
      }

      // optional bool persistent_gibbs_chain = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_persistent_gibbs_chain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &persistent_gibbs_chain_)));
          set_has_persistent_gibbs_chain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_binary_visibles;
        break;
      }

      // required bool binary_visibles = 8;
      case 8: {
        if (tag == 64) {
         parse_binary_visibles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &binary_visibles_)));
          set_has_binary_visibles();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_synchronization_period;
        break;
      }

      // optional int32 synchronization_period = 9 [default = 512];
      case 9: {
        if (tag == 72) {
         parse_synchronization_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &synchronization_period_)));
          set_has_synchronization_period();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_output_filename_base;
        break;
      }

      // required string output_filename_base = 10;
      case 10: {
        if (tag == 82) {
         parse_output_filename_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_filename_base()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->output_filename_base().data(), this->output_filename_base().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rbm.RbmParameters.output_filename_base");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rbm.RbmParameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rbm.RbmParameters)
  return false;
#undef DO_
}

void RbmParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rbm.RbmParameters)
  // required int32 num_hidden = 1;
  if (has_num_hidden()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_hidden(), output);
  }

  // required int32 epochs = 2;
  if (has_epochs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->epochs(), output);
  }

  // required int32 batch_size = 3;
  if (has_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->batch_size(), output);
  }

  // required float momentum = 4;
  if (has_momentum()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->momentum(), output);
  }

  // required float learning_rate = 5;
  if (has_learning_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->learning_rate(), output);
  }

  // optional int32 gibbs_sampling_steps = 6 [default = 1];
  if (has_gibbs_sampling_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gibbs_sampling_steps(), output);
  }

  // optional bool persistent_gibbs_chain = 7 [default = false];
  if (has_persistent_gibbs_chain()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->persistent_gibbs_chain(), output);
  }

  // required bool binary_visibles = 8;
  if (has_binary_visibles()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->binary_visibles(), output);
  }

  // optional int32 synchronization_period = 9 [default = 512];
  if (has_synchronization_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->synchronization_period(), output);
  }

  // required string output_filename_base = 10;
  if (has_output_filename_base()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_filename_base().data(), this->output_filename_base().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rbm.RbmParameters.output_filename_base");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->output_filename_base(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rbm.RbmParameters)
}

::google::protobuf::uint8* RbmParameters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbm.RbmParameters)
  // required int32 num_hidden = 1;
  if (has_num_hidden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_hidden(), target);
  }

  // required int32 epochs = 2;
  if (has_epochs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->epochs(), target);
  }

  // required int32 batch_size = 3;
  if (has_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->batch_size(), target);
  }

  // required float momentum = 4;
  if (has_momentum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->momentum(), target);
  }

  // required float learning_rate = 5;
  if (has_learning_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->learning_rate(), target);
  }

  // optional int32 gibbs_sampling_steps = 6 [default = 1];
  if (has_gibbs_sampling_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gibbs_sampling_steps(), target);
  }

  // optional bool persistent_gibbs_chain = 7 [default = false];
  if (has_persistent_gibbs_chain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->persistent_gibbs_chain(), target);
  }

  // required bool binary_visibles = 8;
  if (has_binary_visibles()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->binary_visibles(), target);
  }

  // optional int32 synchronization_period = 9 [default = 512];
  if (has_synchronization_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->synchronization_period(), target);
  }

  // required string output_filename_base = 10;
  if (has_output_filename_base()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_filename_base().data(), this->output_filename_base().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rbm.RbmParameters.output_filename_base");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->output_filename_base(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbm.RbmParameters)
  return target;
}

int RbmParameters::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_num_hidden()) {
    // required int32 num_hidden = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_hidden());
  }

  if (has_epochs()) {
    // required int32 epochs = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->epochs());
  }

  if (has_batch_size()) {
    // required int32 batch_size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->batch_size());
  }

  if (has_momentum()) {
    // required float momentum = 4;
    total_size += 1 + 4;
  }

  if (has_learning_rate()) {
    // required float learning_rate = 5;
    total_size += 1 + 4;
  }

  if (has_binary_visibles()) {
    // required bool binary_visibles = 8;
    total_size += 1 + 1;
  }

  if (has_output_filename_base()) {
    // required string output_filename_base = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->output_filename_base());
  }

  return total_size;
}
int RbmParameters::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000029f) ^ 0x0000029f) == 0) {  // All required fields are present.
    // required int32 num_hidden = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_hidden());

    // required int32 epochs = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->epochs());

    // required int32 batch_size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->batch_size());

    // required float momentum = 4;
    total_size += 1 + 4;

    // required float learning_rate = 5;
    total_size += 1 + 4;

    // required bool binary_visibles = 8;
    total_size += 1 + 1;

    // required string output_filename_base = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->output_filename_base());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[5 / 32] & 96u) {
    // optional int32 gibbs_sampling_steps = 6 [default = 1];
    if (has_gibbs_sampling_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gibbs_sampling_steps());
    }

    // optional bool persistent_gibbs_chain = 7 [default = false];
    if (has_persistent_gibbs_chain()) {
      total_size += 1 + 1;
    }

  }
  // optional int32 synchronization_period = 9 [default = 512];
  if (has_synchronization_period()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->synchronization_period());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RbmParameters::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RbmParameters* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RbmParameters>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RbmParameters::MergeFrom(const RbmParameters& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_hidden()) {
      set_num_hidden(from.num_hidden());
    }
    if (from.has_epochs()) {
      set_epochs(from.epochs());
    }
    if (from.has_batch_size()) {
      set_batch_size(from.batch_size());
    }
    if (from.has_momentum()) {
      set_momentum(from.momentum());
    }
    if (from.has_learning_rate()) {
      set_learning_rate(from.learning_rate());
    }
    if (from.has_gibbs_sampling_steps()) {
      set_gibbs_sampling_steps(from.gibbs_sampling_steps());
    }
    if (from.has_persistent_gibbs_chain()) {
      set_persistent_gibbs_chain(from.persistent_gibbs_chain());
    }
    if (from.has_binary_visibles()) {
      set_binary_visibles(from.binary_visibles());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_synchronization_period()) {
      set_synchronization_period(from.synchronization_period());
    }
    if (from.has_output_filename_base()) {
      set_has_output_filename_base();
      output_filename_base_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_filename_base_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RbmParameters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RbmParameters::CopyFrom(const RbmParameters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RbmParameters::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000029f) != 0x0000029f) return false;

  return true;
}

void RbmParameters::Swap(RbmParameters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RbmParameters::InternalSwap(RbmParameters* other) {
  std::swap(num_hidden_, other->num_hidden_);
  std::swap(epochs_, other->epochs_);
  std::swap(batch_size_, other->batch_size_);
  std::swap(momentum_, other->momentum_);
  std::swap(learning_rate_, other->learning_rate_);
  std::swap(gibbs_sampling_steps_, other->gibbs_sampling_steps_);
  std::swap(persistent_gibbs_chain_, other->persistent_gibbs_chain_);
  std::swap(binary_visibles_, other->binary_visibles_);
  std::swap(synchronization_period_, other->synchronization_period_);
  output_filename_base_.Swap(&other->output_filename_base_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RbmParameters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RbmParameters_descriptor_;
  metadata.reflection = RbmParameters_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RbmParameters

// required int32 num_hidden = 1;
bool RbmParameters::has_num_hidden() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RbmParameters::set_has_num_hidden() {
  _has_bits_[0] |= 0x00000001u;
}
void RbmParameters::clear_has_num_hidden() {
  _has_bits_[0] &= ~0x00000001u;
}
void RbmParameters::clear_num_hidden() {
  num_hidden_ = 0;
  clear_has_num_hidden();
}
 ::google::protobuf::int32 RbmParameters::num_hidden() const {
  // @@protoc_insertion_point(field_get:rbm.RbmParameters.num_hidden)
  return num_hidden_;
}
 void RbmParameters::set_num_hidden(::google::protobuf::int32 value) {
  set_has_num_hidden();
  num_hidden_ = value;
  // @@protoc_insertion_point(field_set:rbm.RbmParameters.num_hidden)
}

// required int32 epochs = 2;
bool RbmParameters::has_epochs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RbmParameters::set_has_epochs() {
  _has_bits_[0] |= 0x00000002u;
}
void RbmParameters::clear_has_epochs() {
  _has_bits_[0] &= ~0x00000002u;
}
void RbmParameters::clear_epochs() {
  epochs_ = 0;
  clear_has_epochs();
}
 ::google::protobuf::int32 RbmParameters::epochs() const {
  // @@protoc_insertion_point(field_get:rbm.RbmParameters.epochs)
  return epochs_;
}
 void RbmParameters::set_epochs(::google::protobuf::int32 value) {
  set_has_epochs();
  epochs_ = value;
  // @@protoc_insertion_point(field_set:rbm.RbmParameters.epochs)
}

// required int32 batch_size = 3;
bool RbmParameters::has_batch_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RbmParameters::set_has_batch_size() {
  _has_bits_[0] |= 0x00000004u;
}
void RbmParameters::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void RbmParameters::clear_batch_size() {
  batch_size_ = 0;
  clear_has_batch_size();
}
 ::google::protobuf::int32 RbmParameters::batch_size() const {
  // @@protoc_insertion_point(field_get:rbm.RbmParameters.batch_size)
  return batch_size_;
}
 void RbmParameters::set_batch_size(::google::protobuf::int32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:rbm.RbmParameters.batch_size)
}

// required float momentum = 4;
bool RbmParameters::has_momentum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RbmParameters::set_has_momentum() {
  _has_bits_[0] |= 0x00000008u;
}
void RbmParameters::clear_has_momentum() {
  _has_bits_[0] &= ~0x00000008u;
}
void RbmParameters::clear_momentum() {
  momentum_ = 0;
  clear_has_momentum();
}
 float RbmParameters::momentum() const {
  // @@protoc_insertion_point(field_get:rbm.RbmParameters.momentum)
  return momentum_;
}
 void RbmParameters::set_momentum(float value) {
  set_has_momentum();
  momentum_ = value;
  // @@protoc_insertion_point(field_set:rbm.RbmParameters.momentum)
}

// required float learning_rate = 5;
bool RbmParameters::has_learning_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RbmParameters::set_has_learning_rate() {
  _has_bits_[0] |= 0x00000010u;
}
void RbmParameters::clear_has_learning_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
void RbmParameters::clear_learning_rate() {
  learning_rate_ = 0;
  clear_has_learning_rate();
}
 float RbmParameters::learning_rate() const {
  // @@protoc_insertion_point(field_get:rbm.RbmParameters.learning_rate)
  return learning_rate_;
}
 void RbmParameters::set_learning_rate(float value) {
  set_has_learning_rate();
  learning_rate_ = value;
  // @@protoc_insertion_point(field_set:rbm.RbmParameters.learning_rate)
}

// optional int32 gibbs_sampling_steps = 6 [default = 1];
bool RbmParameters::has_gibbs_sampling_steps() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RbmParameters::set_has_gibbs_sampling_steps() {
  _has_bits_[0] |= 0x00000020u;
}
void RbmParameters::clear_has_gibbs_sampling_steps() {
  _has_bits_[0] &= ~0x00000020u;
}
void RbmParameters::clear_gibbs_sampling_steps() {
  gibbs_sampling_steps_ = 1;
  clear_has_gibbs_sampling_steps();
}
 ::google::protobuf::int32 RbmParameters::gibbs_sampling_steps() const {
  // @@protoc_insertion_point(field_get:rbm.RbmParameters.gibbs_sampling_steps)
  return gibbs_sampling_steps_;
}
 void RbmParameters::set_gibbs_sampling_steps(::google::protobuf::int32 value) {
  set_has_gibbs_sampling_steps();
  gibbs_sampling_steps_ = value;
  // @@protoc_insertion_point(field_set:rbm.RbmParameters.gibbs_sampling_steps)
}

// optional bool persistent_gibbs_chain = 7 [default = false];
bool RbmParameters::has_persistent_gibbs_chain() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RbmParameters::set_has_persistent_gibbs_chain() {
  _has_bits_[0] |= 0x00000040u;
}
void RbmParameters::clear_has_persistent_gibbs_chain() {
  _has_bits_[0] &= ~0x00000040u;
}
void RbmParameters::clear_persistent_gibbs_chain() {
  persistent_gibbs_chain_ = false;
  clear_has_persistent_gibbs_chain();
}
 bool RbmParameters::persistent_gibbs_chain() const {
  // @@protoc_insertion_point(field_get:rbm.RbmParameters.persistent_gibbs_chain)
  return persistent_gibbs_chain_;
}
 void RbmParameters::set_persistent_gibbs_chain(bool value) {
  set_has_persistent_gibbs_chain();
  persistent_gibbs_chain_ = value;
  // @@protoc_insertion_point(field_set:rbm.RbmParameters.persistent_gibbs_chain)
}

// required bool binary_visibles = 8;
bool RbmParameters::has_binary_visibles() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RbmParameters::set_has_binary_visibles() {
  _has_bits_[0] |= 0x00000080u;
}
void RbmParameters::clear_has_binary_visibles() {
  _has_bits_[0] &= ~0x00000080u;
}
void RbmParameters::clear_binary_visibles() {
  binary_visibles_ = false;
  clear_has_binary_visibles();
}
 bool RbmParameters::binary_visibles() const {
  // @@protoc_insertion_point(field_get:rbm.RbmParameters.binary_visibles)
  return binary_visibles_;
}
 void RbmParameters::set_binary_visibles(bool value) {
  set_has_binary_visibles();
  binary_visibles_ = value;
  // @@protoc_insertion_point(field_set:rbm.RbmParameters.binary_visibles)
}

// optional int32 synchronization_period = 9 [default = 512];
bool RbmParameters::has_synchronization_period() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void RbmParameters::set_has_synchronization_period() {
  _has_bits_[0] |= 0x00000100u;
}
void RbmParameters::clear_has_synchronization_period() {
  _has_bits_[0] &= ~0x00000100u;
}
void RbmParameters::clear_synchronization_period() {
  synchronization_period_ = 512;
  clear_has_synchronization_period();
}
 ::google::protobuf::int32 RbmParameters::synchronization_period() const {
  // @@protoc_insertion_point(field_get:rbm.RbmParameters.synchronization_period)
  return synchronization_period_;
}
 void RbmParameters::set_synchronization_period(::google::protobuf::int32 value) {
  set_has_synchronization_period();
  synchronization_period_ = value;
  // @@protoc_insertion_point(field_set:rbm.RbmParameters.synchronization_period)
}

// required string output_filename_base = 10;
bool RbmParameters::has_output_filename_base() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void RbmParameters::set_has_output_filename_base() {
  _has_bits_[0] |= 0x00000200u;
}
void RbmParameters::clear_has_output_filename_base() {
  _has_bits_[0] &= ~0x00000200u;
}
void RbmParameters::clear_output_filename_base() {
  output_filename_base_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_output_filename_base();
}
 const ::std::string& RbmParameters::output_filename_base() const {
  // @@protoc_insertion_point(field_get:rbm.RbmParameters.output_filename_base)
  return output_filename_base_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RbmParameters::set_output_filename_base(const ::std::string& value) {
  set_has_output_filename_base();
  output_filename_base_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rbm.RbmParameters.output_filename_base)
}
 void RbmParameters::set_output_filename_base(const char* value) {
  set_has_output_filename_base();
  output_filename_base_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rbm.RbmParameters.output_filename_base)
}
 void RbmParameters::set_output_filename_base(const char* value, size_t size) {
  set_has_output_filename_base();
  output_filename_base_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rbm.RbmParameters.output_filename_base)
}
 ::std::string* RbmParameters::mutable_output_filename_base() {
  set_has_output_filename_base();
  // @@protoc_insertion_point(field_mutable:rbm.RbmParameters.output_filename_base)
  return output_filename_base_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RbmParameters::release_output_filename_base() {
  clear_has_output_filename_base();
  return output_filename_base_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RbmParameters::set_allocated_output_filename_base(::std::string* output_filename_base) {
  if (output_filename_base != NULL) {
    set_has_output_filename_base();
  } else {
    clear_has_output_filename_base();
  }
  output_filename_base_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_filename_base);
  // @@protoc_insertion_point(field_set_allocated:rbm.RbmParameters.output_filename_base)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace rbm

// @@protoc_insertion_point(global_scope)
